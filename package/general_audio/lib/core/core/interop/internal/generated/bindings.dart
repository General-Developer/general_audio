/* <!-- START LICENSE -->


This Software / Program / Source Code Created By Developer From Company GLOBAL CORPORATION
Social Media:

   - Youtube: https://youtube.com/@Global_Corporation 
   - Github: https://github.com/globalcorporation
   - TELEGRAM: https://t.me/GLOBAL_CORP_ORG_BOT

All code script in here created 100% original without copy / steal from other code if we copy we add description source at from top code

If you wan't edit you must add credit me (don't change)

If this Software / Program / Source Code has you

Jika Program ini milik anda dari hasil beli jasa developer di (Global Corporation / apapun itu dari turunan itu jika ada kesalahan / bug / ingin update segera lapor ke sub)

Misal anda beli Beli source code di Slebew CORPORATION anda lapor dahulu di slebew jangan lapor di GLOBAL CORPORATION!

Jika ada kendala program ini (Pastikan sebelum deal project tidak ada negosiasi harga)
Karena jika ada negosiasi harga kemungkinan

1. Software Ada yang di kurangin
2. Informasi tidak lengkap
3. Bantuan Tidak Bisa remote / full time (Ada jeda)

Sebelum program ini sampai ke pembeli developer kami sudah melakukan testing

jadi sebelum nego kami sudah melakukan berbagai konsekuensi jika nego tidak sesuai ? 
Bukan maksud kami menipu itu karena harga yang sudah di kalkulasi + bantuan tiba tiba di potong akhirnya bantuan / software kadang tidak lengkap


<!-- END LICENSE --> */

// ignore_for_file: unused_field, unused_element, no_leading_underscores_for_local_identifiers, non_constant_identifier_names, library_private_types_in_public_api, camel_case_types, constant_identifier_names

import 'dart:ffi' as ffi;

/// FFI bindings for native code
class NativeBindings {
  /// Holds the symbol lookup function.
  final ffi.Pointer<T> Function<T extends ffi.NativeType>(String symbolName)
      _lookup;

  /// The symbols are looked up in [dynamicLibrary].
  NativeBindings(ffi.DynamicLibrary dynamicLibrary)
      : _lookup = dynamicLibrary.lookup;

  /// The symbols are looked up with [lookup].
  NativeBindings.fromLookup(
      ffi.Pointer<T> Function<T extends ffi.NativeType>(String symbolName)
          lookup)
      : _lookup = lookup;

  /// General Library Documentation Undocument By General Corporation & Global Corporation & General Developer
  void ma_version(
    ffi.Pointer<ma_uint32> pMajor,
    ffi.Pointer<ma_uint32> pMinor,
    ffi.Pointer<ma_uint32> pRevision,
  ) {
    return _ma_version(
      pMajor,
      pMinor,
      pRevision,
    );
  }

  late final _ma_versionPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Pointer<ma_uint32>, ffi.Pointer<ma_uint32>,
              ffi.Pointer<ma_uint32>)>>('ma_version');
  late final _ma_version = _ma_versionPtr.asFunction<
      void Function(ffi.Pointer<ma_uint32>, ffi.Pointer<ma_uint32>,
          ffi.Pointer<ma_uint32>)>(isLeaf: true);

  /// General Library Documentation Undocument By General Corporation & Global Corporation & General Developer
  ffi.Pointer<ffi.Char> ma_version_string() {
    return _ma_version_string();
  }

  late final _ma_version_stringPtr =
      _lookup<ffi.NativeFunction<ffi.Pointer<ffi.Char> Function()>>(
          'ma_version_string');
  late final _ma_version_string = _ma_version_stringPtr
      .asFunction<ffi.Pointer<ffi.Char> Function()>(isLeaf: true);

  /// General Library Documentation Undocument By General Corporation & Global Corporation & General Developer
  ma_log_callback ma_log_callback_init(
    ma_log_callback_proc onLog,
    ffi.Pointer<ffi.Void> pUserData,
  ) {
    return _ma_log_callback_init(
      onLog,
      pUserData,
    );
  }

  late final _ma_log_callback_initPtr = _lookup<
      ffi.NativeFunction<
          ma_log_callback Function(ma_log_callback_proc,
              ffi.Pointer<ffi.Void>)>>('ma_log_callback_init');
  late final _ma_log_callback_init = _ma_log_callback_initPtr.asFunction<
      ma_log_callback Function(
          ma_log_callback_proc, ffi.Pointer<ffi.Void>)>(isLeaf: true);

  /// General Library Documentation Undocument By General Corporation & Global Corporation & General Developer
  int ma_log_init(
    ffi.Pointer<ma_allocation_callbacks> pAllocationCallbacks,
    ffi.Pointer<ma_log> pLog,
  ) {
    return _ma_log_init(
      pAllocationCallbacks,
      pLog,
    );
  }

  late final _ma_log_initPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int32 Function(ffi.Pointer<ma_allocation_callbacks>,
              ffi.Pointer<ma_log>)>>('ma_log_init');
  late final _ma_log_init = _ma_log_initPtr.asFunction<
      int Function(ffi.Pointer<ma_allocation_callbacks>,
          ffi.Pointer<ma_log>)>(isLeaf: true);

  /// General Library Documentation Undocument By General Corporation & Global Corporation & General Developer
  void ma_log_uninit(
    ffi.Pointer<ma_log> pLog,
  ) {
    return _ma_log_uninit(
      pLog,
    );
  }

  late final _ma_log_uninitPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Pointer<ma_log>)>>(
          'ma_log_uninit');
  late final _ma_log_uninit = _ma_log_uninitPtr
      .asFunction<void Function(ffi.Pointer<ma_log>)>(isLeaf: true);

  /// General Library Documentation Undocument By General Corporation & Global Corporation & General Developer
  int ma_log_register_callback(
    ffi.Pointer<ma_log> pLog,
    ma_log_callback callback,
  ) {
    return _ma_log_register_callback(
      pLog,
      callback,
    );
  }

  late final _ma_log_register_callbackPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int32 Function(ffi.Pointer<ma_log>,
              ma_log_callback)>>('ma_log_register_callback');
  late final _ma_log_register_callback = _ma_log_register_callbackPtr
      .asFunction<int Function(ffi.Pointer<ma_log>, ma_log_callback)>(
          isLeaf: true);

  /// General Library Documentation Undocument By General Corporation & Global Corporation & General Developer
  int ma_log_unregister_callback(
    ffi.Pointer<ma_log> pLog,
    ma_log_callback callback,
  ) {
    return _ma_log_unregister_callback(
      pLog,
      callback,
    );
  }

  late final _ma_log_unregister_callbackPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int32 Function(ffi.Pointer<ma_log>,
              ma_log_callback)>>('ma_log_unregister_callback');
  late final _ma_log_unregister_callback = _ma_log_unregister_callbackPtr
      .asFunction<int Function(ffi.Pointer<ma_log>, ma_log_callback)>(
          isLeaf: true);

  /// General Library Documentation Undocument By General Corporation & Global Corporation & General Developer
  int ma_log_post(
    ffi.Pointer<ma_log> pLog,
    int level,
    ffi.Pointer<ffi.Char> pMessage,
  ) {
    return _ma_log_post(
      pLog,
      level,
      pMessage,
    );
  }

  late final _ma_log_postPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int32 Function(ffi.Pointer<ma_log>, ma_uint32,
              ffi.Pointer<ffi.Char>)>>('ma_log_post');
  late final _ma_log_post = _ma_log_postPtr.asFunction<
      int Function(
          ffi.Pointer<ma_log>, int, ffi.Pointer<ffi.Char>)>(isLeaf: true);

  /// General Library Documentation Undocument By General Corporation & Global Corporation & General Developer
  int ma_log_postv(
    ffi.Pointer<ma_log> pLog,
    int level,
    ffi.Pointer<ffi.Char> pFormat,
    ffi.Pointer<__va_list_tag> args,
  ) {
    return _ma_log_postv(
      pLog,
      level,
      pFormat,
      args,
    );
  }

  late final _ma_log_postvPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int32 Function(
              ffi.Pointer<ma_log>,
              ma_uint32,
              ffi.Pointer<ffi.Char>,
              ffi.Pointer<__va_list_tag>)>>('ma_log_postv');
  late final _ma_log_postv = _ma_log_postvPtr.asFunction<
      int Function(ffi.Pointer<ma_log>, int, ffi.Pointer<ffi.Char>,
          ffi.Pointer<__va_list_tag>)>(isLeaf: true);

  /// General Library Documentation Undocument By General Corporation & Global Corporation & General Developer
  int ma_log_postf(
    ffi.Pointer<ma_log> pLog,
    int level,
    ffi.Pointer<ffi.Char> pFormat,
  ) {
    return _ma_log_postf(
      pLog,
      level,
      pFormat,
    );
  }

  late final _ma_log_postfPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int32 Function(ffi.Pointer<ma_log>, ma_uint32,
              ffi.Pointer<ffi.Char>)>>('ma_log_postf');
  late final _ma_log_postf = _ma_log_postfPtr.asFunction<
      int Function(
          ffi.Pointer<ma_log>, int, ffi.Pointer<ffi.Char>)>(isLeaf: true);

  /// General Library Documentation Undocument By General Corporation & Global Corporation & General Developer
  ma_biquad_config ma_biquad_config_init(
    int format,
    int channels,
    double b0,
    double b1,
    double b2,
    double a0,
    double a1,
    double a2,
  ) {
    return _ma_biquad_config_init(
      format,
      channels,
      b0,
      b1,
      b2,
      a0,
      a1,
      a2,
    );
  }

  late final _ma_biquad_config_initPtr = _lookup<
      ffi.NativeFunction<
          ma_biquad_config Function(
              ffi.Int32,
              ma_uint32,
              ffi.Double,
              ffi.Double,
              ffi.Double,
              ffi.Double,
              ffi.Double,
              ffi.Double)>>('ma_biquad_config_init');
  late final _ma_biquad_config_init = _ma_biquad_config_initPtr.asFunction<
      ma_biquad_config Function(int, int, double, double, double, double,
          double, double)>(isLeaf: true);

  /// General Library Documentation Undocument By General Corporation & Global Corporation & General Developer
  int ma_biquad_get_heap_size(
    ffi.Pointer<ma_biquad_config> pConfig,
    ffi.Pointer<ffi.Size> pHeapSizeInBytes,
  ) {
    return _ma_biquad_get_heap_size(
      pConfig,
      pHeapSizeInBytes,
    );
  }

  late final _ma_biquad_get_heap_sizePtr = _lookup<
      ffi.NativeFunction<
          ffi.Int32 Function(ffi.Pointer<ma_biquad_config>,
              ffi.Pointer<ffi.Size>)>>('ma_biquad_get_heap_size');
  late final _ma_biquad_get_heap_size = _ma_biquad_get_heap_sizePtr.asFunction<
      int Function(
          ffi.Pointer<ma_biquad_config>, ffi.Pointer<ffi.Size>)>(isLeaf: true);

  /// General Library Documentation Undocument By General Corporation & Global Corporation & General Developer
  int ma_biquad_init_preallocated(
    ffi.Pointer<ma_biquad_config> pConfig,
    ffi.Pointer<ffi.Void> pHeap,
    ffi.Pointer<ma_biquad> pBQ,
  ) {
    return _ma_biquad_init_preallocated(
      pConfig,
      pHeap,
      pBQ,
    );
  }

  late final _ma_biquad_init_preallocatedPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int32 Function(
              ffi.Pointer<ma_biquad_config>,
              ffi.Pointer<ffi.Void>,
              ffi.Pointer<ma_biquad>)>>('ma_biquad_init_preallocated');
  late final _ma_biquad_init_preallocated =
      _ma_biquad_init_preallocatedPtr.asFunction<
          int Function(ffi.Pointer<ma_biquad_config>, ffi.Pointer<ffi.Void>,
              ffi.Pointer<ma_biquad>)>(isLeaf: true);

  /// General Library Documentation Undocument By General Corporation & Global Corporation & General Developer
  int ma_biquad_init(
    ffi.Pointer<ma_biquad_config> pConfig,
    ffi.Pointer<ma_allocation_callbacks> pAllocationCallbacks,
    ffi.Pointer<ma_biquad> pBQ,
  ) {
    return _ma_biquad_init(
      pConfig,
      pAllocationCallbacks,
      pBQ,
    );
  }

  late final _ma_biquad_initPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int32 Function(
              ffi.Pointer<ma_biquad_config>,
              ffi.Pointer<ma_allocation_callbacks>,
              ffi.Pointer<ma_biquad>)>>('ma_biquad_init');
  late final _ma_biquad_init = _ma_biquad_initPtr.asFunction<
      int Function(
          ffi.Pointer<ma_biquad_config>,
          ffi.Pointer<ma_allocation_callbacks>,
          ffi.Pointer<ma_biquad>)>(isLeaf: true);

  /// General Library Documentation Undocument By General Corporation & Global Corporation & General Developer
  void ma_biquad_uninit(
    ffi.Pointer<ma_biquad> pBQ,
    ffi.Pointer<ma_allocation_callbacks> pAllocationCallbacks,
  ) {
    return _ma_biquad_uninit(
      pBQ,
      pAllocationCallbacks,
    );
  }

  late final _ma_biquad_uninitPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Pointer<ma_biquad>,
              ffi.Pointer<ma_allocation_callbacks>)>>('ma_biquad_uninit');
  late final _ma_biquad_uninit = _ma_biquad_uninitPtr.asFunction<
      void Function(ffi.Pointer<ma_biquad>,
          ffi.Pointer<ma_allocation_callbacks>)>(isLeaf: true);

  /// General Library Documentation Undocument By General Corporation & Global Corporation & General Developer
  int ma_biquad_reinit(
    ffi.Pointer<ma_biquad_config> pConfig,
    ffi.Pointer<ma_biquad> pBQ,
  ) {
    return _ma_biquad_reinit(
      pConfig,
      pBQ,
    );
  }

  late final _ma_biquad_reinitPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int32 Function(ffi.Pointer<ma_biquad_config>,
              ffi.Pointer<ma_biquad>)>>('ma_biquad_reinit');
  late final _ma_biquad_reinit = _ma_biquad_reinitPtr.asFunction<
      int Function(
          ffi.Pointer<ma_biquad_config>, ffi.Pointer<ma_biquad>)>(isLeaf: true);

  /// General Library Documentation Undocument By General Corporation & Global Corporation & General Developer
  int ma_biquad_clear_cache(
    ffi.Pointer<ma_biquad> pBQ,
  ) {
    return _ma_biquad_clear_cache(
      pBQ,
    );
  }

  late final _ma_biquad_clear_cachePtr =
      _lookup<ffi.NativeFunction<ffi.Int32 Function(ffi.Pointer<ma_biquad>)>>(
          'ma_biquad_clear_cache');
  late final _ma_biquad_clear_cache = _ma_biquad_clear_cachePtr
      .asFunction<int Function(ffi.Pointer<ma_biquad>)>(isLeaf: true);

  /// General Library Documentation Undocument By General Corporation & Global Corporation & General Developer
  int ma_biquad_process_pcm_frames(
    ffi.Pointer<ma_biquad> pBQ,
    ffi.Pointer<ffi.Void> pFramesOut,
    ffi.Pointer<ffi.Void> pFramesIn,
    int frameCount,
  ) {
    return _ma_biquad_process_pcm_frames(
      pBQ,
      pFramesOut,
      pFramesIn,
      frameCount,
    );
  }

  late final _ma_biquad_process_pcm_framesPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int32 Function(
              ffi.Pointer<ma_biquad>,
              ffi.Pointer<ffi.Void>,
              ffi.Pointer<ffi.Void>,
              ma_uint64)>>('ma_biquad_process_pcm_frames');
  late final _ma_biquad_process_pcm_frames =
      _ma_biquad_process_pcm_framesPtr.asFunction<
          int Function(ffi.Pointer<ma_biquad>, ffi.Pointer<ffi.Void>,
              ffi.Pointer<ffi.Void>, int)>(isLeaf: true);

  /// General Library Documentation Undocument By General Corporation & Global Corporation & General Developer
  int ma_biquad_get_latency(
    ffi.Pointer<ma_biquad> pBQ,
  ) {
    return _ma_biquad_get_latency(
      pBQ,
    );
  }

  late final _ma_biquad_get_latencyPtr =
      _lookup<ffi.NativeFunction<ma_uint32 Function(ffi.Pointer<ma_biquad>)>>(
          'ma_biquad_get_latency');
  late final _ma_biquad_get_latency = _ma_biquad_get_latencyPtr
      .asFunction<int Function(ffi.Pointer<ma_biquad>)>(isLeaf: true);

  /// General Library Documentation Undocument By General Corporation & Global Corporation & General Developer
  ma_lpf1_config ma_lpf1_config_init(
    int format,
    int channels,
    int sampleRate,
    double cutoffFrequency,
  ) {
    return _ma_lpf1_config_init(
      format,
      channels,
      sampleRate,
      cutoffFrequency,
    );
  }

  late final _ma_lpf1_config_initPtr = _lookup<
      ffi.NativeFunction<
          ma_lpf1_config Function(ffi.Int32, ma_uint32, ma_uint32,
              ffi.Double)>>('ma_lpf1_config_init');
  late final _ma_lpf1_config_init = _ma_lpf1_config_initPtr
      .asFunction<ma_lpf1_config Function(int, int, int, double)>(isLeaf: true);

  /// General Library Documentation Undocument By General Corporation & Global Corporation & General Developer
  ma_lpf2_config ma_lpf2_config_init(
    int format,
    int channels,
    int sampleRate,
    double cutoffFrequency,
    double q,
  ) {
    return _ma_lpf2_config_init(
      format,
      channels,
      sampleRate,
      cutoffFrequency,
      q,
    );
  }

  late final _ma_lpf2_config_initPtr = _lookup<
      ffi.NativeFunction<
          ma_lpf2_config Function(ffi.Int32, ma_uint32, ma_uint32, ffi.Double,
              ffi.Double)>>('ma_lpf2_config_init');
  late final _ma_lpf2_config_init = _ma_lpf2_config_initPtr
      .asFunction<ma_lpf2_config Function(int, int, int, double, double)>(
          isLeaf: true);

  /// General Library Documentation Undocument By General Corporation & Global Corporation & General Developer
  int ma_lpf1_get_heap_size(
    ffi.Pointer<ma_lpf1_config> pConfig,
    ffi.Pointer<ffi.Size> pHeapSizeInBytes,
  ) {
    return _ma_lpf1_get_heap_size(
      pConfig,
      pHeapSizeInBytes,
    );
  }

  late final _ma_lpf1_get_heap_sizePtr = _lookup<
      ffi.NativeFunction<
          ffi.Int32 Function(ffi.Pointer<ma_lpf1_config>,
              ffi.Pointer<ffi.Size>)>>('ma_lpf1_get_heap_size');
  late final _ma_lpf1_get_heap_size = _ma_lpf1_get_heap_sizePtr.asFunction<
      int Function(
          ffi.Pointer<ma_lpf1_config>, ffi.Pointer<ffi.Size>)>(isLeaf: true);

  /// General Library Documentation Undocument By General Corporation & Global Corporation & General Developer
  int ma_lpf1_init_preallocated(
    ffi.Pointer<ma_lpf1_config> pConfig,
    ffi.Pointer<ffi.Void> pHeap,
    ffi.Pointer<ma_lpf1> pLPF,
  ) {
    return _ma_lpf1_init_preallocated(
      pConfig,
      pHeap,
      pLPF,
    );
  }

  late final _ma_lpf1_init_preallocatedPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int32 Function(ffi.Pointer<ma_lpf1_config>, ffi.Pointer<ffi.Void>,
              ffi.Pointer<ma_lpf1>)>>('ma_lpf1_init_preallocated');
  late final _ma_lpf1_init_preallocated =
      _ma_lpf1_init_preallocatedPtr.asFunction<
          int Function(ffi.Pointer<ma_lpf1_config>, ffi.Pointer<ffi.Void>,
              ffi.Pointer<ma_lpf1>)>(isLeaf: true);

  /// General Library Documentation Undocument By General Corporation & Global Corporation & General Developer
  int ma_lpf1_init(
    ffi.Pointer<ma_lpf1_config> pConfig,
    ffi.Pointer<ma_allocation_callbacks> pAllocationCallbacks,
    ffi.Pointer<ma_lpf1> pLPF,
  ) {
    return _ma_lpf1_init(
      pConfig,
      pAllocationCallbacks,
      pLPF,
    );
  }

  late final _ma_lpf1_initPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int32 Function(
              ffi.Pointer<ma_lpf1_config>,
              ffi.Pointer<ma_allocation_callbacks>,
              ffi.Pointer<ma_lpf1>)>>('ma_lpf1_init');
  late final _ma_lpf1_init = _ma_lpf1_initPtr.asFunction<
      int Function(
          ffi.Pointer<ma_lpf1_config>,
          ffi.Pointer<ma_allocation_callbacks>,
          ffi.Pointer<ma_lpf1>)>(isLeaf: true);

  /// General Library Documentation Undocument By General Corporation & Global Corporation & General Developer
  void ma_lpf1_uninit(
    ffi.Pointer<ma_lpf1> pLPF,
    ffi.Pointer<ma_allocation_callbacks> pAllocationCallbacks,
  ) {
    return _ma_lpf1_uninit(
      pLPF,
      pAllocationCallbacks,
    );
  }

  late final _ma_lpf1_uninitPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Pointer<ma_lpf1>,
              ffi.Pointer<ma_allocation_callbacks>)>>('ma_lpf1_uninit');
  late final _ma_lpf1_uninit = _ma_lpf1_uninitPtr.asFunction<
      void Function(ffi.Pointer<ma_lpf1>,
          ffi.Pointer<ma_allocation_callbacks>)>(isLeaf: true);

  /// General Library Documentation Undocument By General Corporation & Global Corporation & General Developer
  int ma_lpf1_reinit(
    ffi.Pointer<ma_lpf1_config> pConfig,
    ffi.Pointer<ma_lpf1> pLPF,
  ) {
    return _ma_lpf1_reinit(
      pConfig,
      pLPF,
    );
  }

  late final _ma_lpf1_reinitPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int32 Function(ffi.Pointer<ma_lpf1_config>,
              ffi.Pointer<ma_lpf1>)>>('ma_lpf1_reinit');
  late final _ma_lpf1_reinit = _ma_lpf1_reinitPtr.asFunction<
      int Function(
          ffi.Pointer<ma_lpf1_config>, ffi.Pointer<ma_lpf1>)>(isLeaf: true);

  /// General Library Documentation Undocument By General Corporation & Global Corporation & General Developer
  int ma_lpf1_clear_cache(
    ffi.Pointer<ma_lpf1> pLPF,
  ) {
    return _ma_lpf1_clear_cache(
      pLPF,
    );
  }

  late final _ma_lpf1_clear_cachePtr =
      _lookup<ffi.NativeFunction<ffi.Int32 Function(ffi.Pointer<ma_lpf1>)>>(
          'ma_lpf1_clear_cache');
  late final _ma_lpf1_clear_cache = _ma_lpf1_clear_cachePtr
      .asFunction<int Function(ffi.Pointer<ma_lpf1>)>(isLeaf: true);

  /// General Library Documentation Undocument By General Corporation & Global Corporation & General Developer
  int ma_lpf1_process_pcm_frames(
    ffi.Pointer<ma_lpf1> pLPF,
    ffi.Pointer<ffi.Void> pFramesOut,
    ffi.Pointer<ffi.Void> pFramesIn,
    int frameCount,
  ) {
    return _ma_lpf1_process_pcm_frames(
      pLPF,
      pFramesOut,
      pFramesIn,
      frameCount,
    );
  }

  late final _ma_lpf1_process_pcm_framesPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int32 Function(ffi.Pointer<ma_lpf1>, ffi.Pointer<ffi.Void>,
              ffi.Pointer<ffi.Void>, ma_uint64)>>('ma_lpf1_process_pcm_frames');
  late final _ma_lpf1_process_pcm_frames =
      _ma_lpf1_process_pcm_framesPtr.asFunction<
          int Function(ffi.Pointer<ma_lpf1>, ffi.Pointer<ffi.Void>,
              ffi.Pointer<ffi.Void>, int)>(isLeaf: true);

  /// General Library Documentation Undocument By General Corporation & Global Corporation & General Developer
  int ma_lpf1_get_latency(
    ffi.Pointer<ma_lpf1> pLPF,
  ) {
    return _ma_lpf1_get_latency(
      pLPF,
    );
  }

  late final _ma_lpf1_get_latencyPtr =
      _lookup<ffi.NativeFunction<ma_uint32 Function(ffi.Pointer<ma_lpf1>)>>(
          'ma_lpf1_get_latency');
  late final _ma_lpf1_get_latency = _ma_lpf1_get_latencyPtr
      .asFunction<int Function(ffi.Pointer<ma_lpf1>)>(isLeaf: true);

  /// General Library Documentation Undocument By General Corporation & Global Corporation & General Developer
  int ma_lpf2_get_heap_size(
    ffi.Pointer<ma_lpf2_config> pConfig,
    ffi.Pointer<ffi.Size> pHeapSizeInBytes,
  ) {
    return _ma_lpf2_get_heap_size(
      pConfig,
      pHeapSizeInBytes,
    );
  }

  late final _ma_lpf2_get_heap_sizePtr = _lookup<
      ffi.NativeFunction<
          ffi.Int32 Function(ffi.Pointer<ma_lpf2_config>,
              ffi.Pointer<ffi.Size>)>>('ma_lpf2_get_heap_size');
  late final _ma_lpf2_get_heap_size = _ma_lpf2_get_heap_sizePtr.asFunction<
      int Function(
          ffi.Pointer<ma_lpf2_config>, ffi.Pointer<ffi.Size>)>(isLeaf: true);

  /// General Library Documentation Undocument By General Corporation & Global Corporation & General Developer
  int ma_lpf2_init_preallocated(
    ffi.Pointer<ma_lpf2_config> pConfig,
    ffi.Pointer<ffi.Void> pHeap,
    ffi.Pointer<ma_lpf2> pHPF,
  ) {
    return _ma_lpf2_init_preallocated(
      pConfig,
      pHeap,
      pHPF,
    );
  }

  late final _ma_lpf2_init_preallocatedPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int32 Function(ffi.Pointer<ma_lpf2_config>, ffi.Pointer<ffi.Void>,
              ffi.Pointer<ma_lpf2>)>>('ma_lpf2_init_preallocated');
  late final _ma_lpf2_init_preallocated =
      _ma_lpf2_init_preallocatedPtr.asFunction<
          int Function(ffi.Pointer<ma_lpf2_config>, ffi.Pointer<ffi.Void>,
              ffi.Pointer<ma_lpf2>)>(isLeaf: true);

  /// General Library Documentation Undocument By General Corporation & Global Corporation & General Developer
  int ma_lpf2_init(
    ffi.Pointer<ma_lpf2_config> pConfig,
    ffi.Pointer<ma_allocation_callbacks> pAllocationCallbacks,
    ffi.Pointer<ma_lpf2> pLPF,
  ) {
    return _ma_lpf2_init(
      pConfig,
      pAllocationCallbacks,
      pLPF,
    );
  }

  late final _ma_lpf2_initPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int32 Function(
              ffi.Pointer<ma_lpf2_config>,
              ffi.Pointer<ma_allocation_callbacks>,
              ffi.Pointer<ma_lpf2>)>>('ma_lpf2_init');
  late final _ma_lpf2_init = _ma_lpf2_initPtr.asFunction<
      int Function(
          ffi.Pointer<ma_lpf2_config>,
          ffi.Pointer<ma_allocation_callbacks>,
          ffi.Pointer<ma_lpf2>)>(isLeaf: true);

  /// General Library Documentation Undocument By General Corporation & Global Corporation & General Developer
  void ma_lpf2_uninit(
    ffi.Pointer<ma_lpf2> pLPF,
    ffi.Pointer<ma_allocation_callbacks> pAllocationCallbacks,
  ) {
    return _ma_lpf2_uninit(
      pLPF,
      pAllocationCallbacks,
    );
  }

  late final _ma_lpf2_uninitPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Pointer<ma_lpf2>,
              ffi.Pointer<ma_allocation_callbacks>)>>('ma_lpf2_uninit');
  late final _ma_lpf2_uninit = _ma_lpf2_uninitPtr.asFunction<
      void Function(ffi.Pointer<ma_lpf2>,
          ffi.Pointer<ma_allocation_callbacks>)>(isLeaf: true);

  /// General Library Documentation Undocument By General Corporation & Global Corporation & General Developer
  int ma_lpf2_reinit(
    ffi.Pointer<ma_lpf2_config> pConfig,
    ffi.Pointer<ma_lpf2> pLPF,
  ) {
    return _ma_lpf2_reinit(
      pConfig,
      pLPF,
    );
  }

  late final _ma_lpf2_reinitPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int32 Function(ffi.Pointer<ma_lpf2_config>,
              ffi.Pointer<ma_lpf2>)>>('ma_lpf2_reinit');
  late final _ma_lpf2_reinit = _ma_lpf2_reinitPtr.asFunction<
      int Function(
          ffi.Pointer<ma_lpf2_config>, ffi.Pointer<ma_lpf2>)>(isLeaf: true);

  /// General Library Documentation Undocument By General Corporation & Global Corporation & General Developer
  int ma_lpf2_clear_cache(
    ffi.Pointer<ma_lpf2> pLPF,
  ) {
    return _ma_lpf2_clear_cache(
      pLPF,
    );
  }

  late final _ma_lpf2_clear_cachePtr =
      _lookup<ffi.NativeFunction<ffi.Int32 Function(ffi.Pointer<ma_lpf2>)>>(
          'ma_lpf2_clear_cache');
  late final _ma_lpf2_clear_cache = _ma_lpf2_clear_cachePtr
      .asFunction<int Function(ffi.Pointer<ma_lpf2>)>(isLeaf: true);

  /// General Library Documentation Undocument By General Corporation & Global Corporation & General Developer
  int ma_lpf2_process_pcm_frames(
    ffi.Pointer<ma_lpf2> pLPF,
    ffi.Pointer<ffi.Void> pFramesOut,
    ffi.Pointer<ffi.Void> pFramesIn,
    int frameCount,
  ) {
    return _ma_lpf2_process_pcm_frames(
      pLPF,
      pFramesOut,
      pFramesIn,
      frameCount,
    );
  }

  late final _ma_lpf2_process_pcm_framesPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int32 Function(ffi.Pointer<ma_lpf2>, ffi.Pointer<ffi.Void>,
              ffi.Pointer<ffi.Void>, ma_uint64)>>('ma_lpf2_process_pcm_frames');
  late final _ma_lpf2_process_pcm_frames =
      _ma_lpf2_process_pcm_framesPtr.asFunction<
          int Function(ffi.Pointer<ma_lpf2>, ffi.Pointer<ffi.Void>,
              ffi.Pointer<ffi.Void>, int)>(isLeaf: true);

  /// General Library Documentation Undocument By General Corporation & Global Corporation & General Developer
  int ma_lpf2_get_latency(
    ffi.Pointer<ma_lpf2> pLPF,
  ) {
    return _ma_lpf2_get_latency(
      pLPF,
    );
  }

  late final _ma_lpf2_get_latencyPtr =
      _lookup<ffi.NativeFunction<ma_uint32 Function(ffi.Pointer<ma_lpf2>)>>(
          'ma_lpf2_get_latency');
  late final _ma_lpf2_get_latency = _ma_lpf2_get_latencyPtr
      .asFunction<int Function(ffi.Pointer<ma_lpf2>)>(isLeaf: true);

  /// General Library Documentation Undocument By General Corporation & Global Corporation & General Developer
  ma_lpf_config ma_lpf_config_init(
    int format,
    int channels,
    int sampleRate,
    double cutoffFrequency,
    int order,
  ) {
    return _ma_lpf_config_init(
      format,
      channels,
      sampleRate,
      cutoffFrequency,
      order,
    );
  }

  late final _ma_lpf_config_initPtr = _lookup<
      ffi.NativeFunction<
          ma_lpf_config Function(ffi.Int32, ma_uint32, ma_uint32, ffi.Double,
              ma_uint32)>>('ma_lpf_config_init');
  late final _ma_lpf_config_init = _ma_lpf_config_initPtr
      .asFunction<ma_lpf_config Function(int, int, int, double, int)>(
          isLeaf: true);

  /// General Library Documentation Undocument By General Corporation & Global Corporation & General Developer
  int ma_lpf_get_heap_size(
    ffi.Pointer<ma_lpf_config> pConfig,
    ffi.Pointer<ffi.Size> pHeapSizeInBytes,
  ) {
    return _ma_lpf_get_heap_size(
      pConfig,
      pHeapSizeInBytes,
    );
  }

  late final _ma_lpf_get_heap_sizePtr = _lookup<
      ffi.NativeFunction<
          ffi.Int32 Function(ffi.Pointer<ma_lpf_config>,
              ffi.Pointer<ffi.Size>)>>('ma_lpf_get_heap_size');
  late final _ma_lpf_get_heap_size = _ma_lpf_get_heap_sizePtr.asFunction<
      int Function(
          ffi.Pointer<ma_lpf_config>, ffi.Pointer<ffi.Size>)>(isLeaf: true);

  /// General Library Documentation Undocument By General Corporation & Global Corporation & General Developer
  int ma_lpf_init_preallocated(
    ffi.Pointer<ma_lpf_config> pConfig,
    ffi.Pointer<ffi.Void> pHeap,
    ffi.Pointer<ma_lpf> pLPF,
  ) {
    return _ma_lpf_init_preallocated(
      pConfig,
      pHeap,
      pLPF,
    );
  }

  late final _ma_lpf_init_preallocatedPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int32 Function(ffi.Pointer<ma_lpf_config>, ffi.Pointer<ffi.Void>,
              ffi.Pointer<ma_lpf>)>>('ma_lpf_init_preallocated');
  late final _ma_lpf_init_preallocated =
      _ma_lpf_init_preallocatedPtr.asFunction<
          int Function(ffi.Pointer<ma_lpf_config>, ffi.Pointer<ffi.Void>,
              ffi.Pointer<ma_lpf>)>(isLeaf: true);

  /// General Library Documentation Undocument By General Corporation & Global Corporation & General Developer
  int ma_lpf_init(
    ffi.Pointer<ma_lpf_config> pConfig,
    ffi.Pointer<ma_allocation_callbacks> pAllocationCallbacks,
    ffi.Pointer<ma_lpf> pLPF,
  ) {
    return _ma_lpf_init(
      pConfig,
      pAllocationCallbacks,
      pLPF,
    );
  }

  late final _ma_lpf_initPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int32 Function(
              ffi.Pointer<ma_lpf_config>,
              ffi.Pointer<ma_allocation_callbacks>,
              ffi.Pointer<ma_lpf>)>>('ma_lpf_init');
  late final _ma_lpf_init = _ma_lpf_initPtr.asFunction<
      int Function(
          ffi.Pointer<ma_lpf_config>,
          ffi.Pointer<ma_allocation_callbacks>,
          ffi.Pointer<ma_lpf>)>(isLeaf: true);

  /// General Library Documentation Undocument By General Corporation & Global Corporation & General Developer
  void ma_lpf_uninit(
    ffi.Pointer<ma_lpf> pLPF,
    ffi.Pointer<ma_allocation_callbacks> pAllocationCallbacks,
  ) {
    return _ma_lpf_uninit(
      pLPF,
      pAllocationCallbacks,
    );
  }

  late final _ma_lpf_uninitPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Pointer<ma_lpf>,
              ffi.Pointer<ma_allocation_callbacks>)>>('ma_lpf_uninit');
  late final _ma_lpf_uninit = _ma_lpf_uninitPtr.asFunction<
      void Function(ffi.Pointer<ma_lpf>,
          ffi.Pointer<ma_allocation_callbacks>)>(isLeaf: true);

  /// General Library Documentation Undocument By General Corporation & Global Corporation & General Developer
  int ma_lpf_reinit(
    ffi.Pointer<ma_lpf_config> pConfig,
    ffi.Pointer<ma_lpf> pLPF,
  ) {
    return _ma_lpf_reinit(
      pConfig,
      pLPF,
    );
  }

  late final _ma_lpf_reinitPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int32 Function(ffi.Pointer<ma_lpf_config>,
              ffi.Pointer<ma_lpf>)>>('ma_lpf_reinit');
  late final _ma_lpf_reinit = _ma_lpf_reinitPtr.asFunction<
      int Function(
          ffi.Pointer<ma_lpf_config>, ffi.Pointer<ma_lpf>)>(isLeaf: true);

  /// General Library Documentation Undocument By General Corporation & Global Corporation & General Developer
  int ma_lpf_clear_cache(
    ffi.Pointer<ma_lpf> pLPF,
  ) {
    return _ma_lpf_clear_cache(
      pLPF,
    );
  }

  late final _ma_lpf_clear_cachePtr =
      _lookup<ffi.NativeFunction<ffi.Int32 Function(ffi.Pointer<ma_lpf>)>>(
          'ma_lpf_clear_cache');
  late final _ma_lpf_clear_cache = _ma_lpf_clear_cachePtr
      .asFunction<int Function(ffi.Pointer<ma_lpf>)>(isLeaf: true);

  /// General Library Documentation Undocument By General Corporation & Global Corporation & General Developer
  int ma_lpf_process_pcm_frames(
    ffi.Pointer<ma_lpf> pLPF,
    ffi.Pointer<ffi.Void> pFramesOut,
    ffi.Pointer<ffi.Void> pFramesIn,
    int frameCount,
  ) {
    return _ma_lpf_process_pcm_frames(
      pLPF,
      pFramesOut,
      pFramesIn,
      frameCount,
    );
  }

  late final _ma_lpf_process_pcm_framesPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int32 Function(ffi.Pointer<ma_lpf>, ffi.Pointer<ffi.Void>,
              ffi.Pointer<ffi.Void>, ma_uint64)>>('ma_lpf_process_pcm_frames');
  late final _ma_lpf_process_pcm_frames =
      _ma_lpf_process_pcm_framesPtr.asFunction<
          int Function(ffi.Pointer<ma_lpf>, ffi.Pointer<ffi.Void>,
              ffi.Pointer<ffi.Void>, int)>(isLeaf: true);

  /// General Library Documentation Undocument By General Corporation & Global Corporation & General Developer
  int ma_lpf_get_latency(
    ffi.Pointer<ma_lpf> pLPF,
  ) {
    return _ma_lpf_get_latency(
      pLPF,
    );
  }

  late final _ma_lpf_get_latencyPtr =
      _lookup<ffi.NativeFunction<ma_uint32 Function(ffi.Pointer<ma_lpf>)>>(
          'ma_lpf_get_latency');
  late final _ma_lpf_get_latency = _ma_lpf_get_latencyPtr
      .asFunction<int Function(ffi.Pointer<ma_lpf>)>(isLeaf: true);

  /// General Library Documentation Undocument By General Corporation & Global Corporation & General Developer
  ma_hpf1_config ma_hpf1_config_init(
    int format,
    int channels,
    int sampleRate,
    double cutoffFrequency,
  ) {
    return _ma_hpf1_config_init(
      format,
      channels,
      sampleRate,
      cutoffFrequency,
    );
  }

  late final _ma_hpf1_config_initPtr = _lookup<
      ffi.NativeFunction<
          ma_hpf1_config Function(ffi.Int32, ma_uint32, ma_uint32,
              ffi.Double)>>('ma_hpf1_config_init');
  late final _ma_hpf1_config_init = _ma_hpf1_config_initPtr
      .asFunction<ma_hpf1_config Function(int, int, int, double)>(isLeaf: true);

  /// General Library Documentation Undocument By General Corporation & Global Corporation & General Developer
  ma_hpf2_config ma_hpf2_config_init(
    int format,
    int channels,
    int sampleRate,
    double cutoffFrequency,
    double q,
  ) {
    return _ma_hpf2_config_init(
      format,
      channels,
      sampleRate,
      cutoffFrequency,
      q,
    );
  }

  late final _ma_hpf2_config_initPtr = _lookup<
      ffi.NativeFunction<
          ma_hpf2_config Function(ffi.Int32, ma_uint32, ma_uint32, ffi.Double,
              ffi.Double)>>('ma_hpf2_config_init');
  late final _ma_hpf2_config_init = _ma_hpf2_config_initPtr
      .asFunction<ma_hpf2_config Function(int, int, int, double, double)>(
          isLeaf: true);

  /// General Library Documentation Undocument By General Corporation & Global Corporation & General Developer
  int ma_hpf1_get_heap_size(
    ffi.Pointer<ma_hpf1_config> pConfig,
    ffi.Pointer<ffi.Size> pHeapSizeInBytes,
  ) {
    return _ma_hpf1_get_heap_size(
      pConfig,
      pHeapSizeInBytes,
    );
  }

  late final _ma_hpf1_get_heap_sizePtr = _lookup<
      ffi.NativeFunction<
          ffi.Int32 Function(ffi.Pointer<ma_hpf1_config>,
              ffi.Pointer<ffi.Size>)>>('ma_hpf1_get_heap_size');
  late final _ma_hpf1_get_heap_size = _ma_hpf1_get_heap_sizePtr.asFunction<
      int Function(
          ffi.Pointer<ma_hpf1_config>, ffi.Pointer<ffi.Size>)>(isLeaf: true);

  /// General Library Documentation Undocument By General Corporation & Global Corporation & General Developer
  int ma_hpf1_init_preallocated(
    ffi.Pointer<ma_hpf1_config> pConfig,
    ffi.Pointer<ffi.Void> pHeap,
    ffi.Pointer<ma_hpf1> pLPF,
  ) {
    return _ma_hpf1_init_preallocated(
      pConfig,
      pHeap,
      pLPF,
    );
  }

  late final _ma_hpf1_init_preallocatedPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int32 Function(ffi.Pointer<ma_hpf1_config>, ffi.Pointer<ffi.Void>,
              ffi.Pointer<ma_hpf1>)>>('ma_hpf1_init_preallocated');
  late final _ma_hpf1_init_preallocated =
      _ma_hpf1_init_preallocatedPtr.asFunction<
          int Function(ffi.Pointer<ma_hpf1_config>, ffi.Pointer<ffi.Void>,
              ffi.Pointer<ma_hpf1>)>(isLeaf: true);

  /// General Library Documentation Undocument By General Corporation & Global Corporation & General Developer
  int ma_hpf1_init(
    ffi.Pointer<ma_hpf1_config> pConfig,
    ffi.Pointer<ma_allocation_callbacks> pAllocationCallbacks,
    ffi.Pointer<ma_hpf1> pHPF,
  ) {
    return _ma_hpf1_init(
      pConfig,
      pAllocationCallbacks,
      pHPF,
    );
  }

  late final _ma_hpf1_initPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int32 Function(
              ffi.Pointer<ma_hpf1_config>,
              ffi.Pointer<ma_allocation_callbacks>,
              ffi.Pointer<ma_hpf1>)>>('ma_hpf1_init');
  late final _ma_hpf1_init = _ma_hpf1_initPtr.asFunction<
      int Function(
          ffi.Pointer<ma_hpf1_config>,
          ffi.Pointer<ma_allocation_callbacks>,
          ffi.Pointer<ma_hpf1>)>(isLeaf: true);

  /// General Library Documentation Undocument By General Corporation & Global Corporation & General Developer
  void ma_hpf1_uninit(
    ffi.Pointer<ma_hpf1> pHPF,
    ffi.Pointer<ma_allocation_callbacks> pAllocationCallbacks,
  ) {
    return _ma_hpf1_uninit(
      pHPF,
      pAllocationCallbacks,
    );
  }

  late final _ma_hpf1_uninitPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Pointer<ma_hpf1>,
              ffi.Pointer<ma_allocation_callbacks>)>>('ma_hpf1_uninit');
  late final _ma_hpf1_uninit = _ma_hpf1_uninitPtr.asFunction<
      void Function(ffi.Pointer<ma_hpf1>,
          ffi.Pointer<ma_allocation_callbacks>)>(isLeaf: true);

  /// General Library Documentation Undocument By General Corporation & Global Corporation & General Developer
  int ma_hpf1_reinit(
    ffi.Pointer<ma_hpf1_config> pConfig,
    ffi.Pointer<ma_hpf1> pHPF,
  ) {
    return _ma_hpf1_reinit(
      pConfig,
      pHPF,
    );
  }

  late final _ma_hpf1_reinitPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int32 Function(ffi.Pointer<ma_hpf1_config>,
              ffi.Pointer<ma_hpf1>)>>('ma_hpf1_reinit');
  late final _ma_hpf1_reinit = _ma_hpf1_reinitPtr.asFunction<
      int Function(
          ffi.Pointer<ma_hpf1_config>, ffi.Pointer<ma_hpf1>)>(isLeaf: true);

  /// General Library Documentation Undocument By General Corporation & Global Corporation & General Developer
  int ma_hpf1_process_pcm_frames(
    ffi.Pointer<ma_hpf1> pHPF,
    ffi.Pointer<ffi.Void> pFramesOut,
    ffi.Pointer<ffi.Void> pFramesIn,
    int frameCount,
  ) {
    return _ma_hpf1_process_pcm_frames(
      pHPF,
      pFramesOut,
      pFramesIn,
      frameCount,
    );
  }

  late final _ma_hpf1_process_pcm_framesPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int32 Function(ffi.Pointer<ma_hpf1>, ffi.Pointer<ffi.Void>,
              ffi.Pointer<ffi.Void>, ma_uint64)>>('ma_hpf1_process_pcm_frames');
  late final _ma_hpf1_process_pcm_frames =
      _ma_hpf1_process_pcm_framesPtr.asFunction<
          int Function(ffi.Pointer<ma_hpf1>, ffi.Pointer<ffi.Void>,
              ffi.Pointer<ffi.Void>, int)>(isLeaf: true);

  /// General Library Documentation Undocument By General Corporation & Global Corporation & General Developer
  int ma_hpf1_get_latency(
    ffi.Pointer<ma_hpf1> pHPF,
  ) {
    return _ma_hpf1_get_latency(
      pHPF,
    );
  }

  late final _ma_hpf1_get_latencyPtr =
      _lookup<ffi.NativeFunction<ma_uint32 Function(ffi.Pointer<ma_hpf1>)>>(
          'ma_hpf1_get_latency');
  late final _ma_hpf1_get_latency = _ma_hpf1_get_latencyPtr
      .asFunction<int Function(ffi.Pointer<ma_hpf1>)>(isLeaf: true);

  /// General Library Documentation Undocument By General Corporation & Global Corporation & General Developer
  int ma_hpf2_get_heap_size(
    ffi.Pointer<ma_hpf2_config> pConfig,
    ffi.Pointer<ffi.Size> pHeapSizeInBytes,
  ) {
    return _ma_hpf2_get_heap_size(
      pConfig,
      pHeapSizeInBytes,
    );
  }

  late final _ma_hpf2_get_heap_sizePtr = _lookup<
      ffi.NativeFunction<
          ffi.Int32 Function(ffi.Pointer<ma_hpf2_config>,
              ffi.Pointer<ffi.Size>)>>('ma_hpf2_get_heap_size');
  late final _ma_hpf2_get_heap_size = _ma_hpf2_get_heap_sizePtr.asFunction<
      int Function(
          ffi.Pointer<ma_hpf2_config>, ffi.Pointer<ffi.Size>)>(isLeaf: true);

  /// General Library Documentation Undocument By General Corporation & Global Corporation & General Developer
  int ma_hpf2_init_preallocated(
    ffi.Pointer<ma_hpf2_config> pConfig,
    ffi.Pointer<ffi.Void> pHeap,
    ffi.Pointer<ma_hpf2> pHPF,
  ) {
    return _ma_hpf2_init_preallocated(
      pConfig,
      pHeap,
      pHPF,
    );
  }

  late final _ma_hpf2_init_preallocatedPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int32 Function(ffi.Pointer<ma_hpf2_config>, ffi.Pointer<ffi.Void>,
              ffi.Pointer<ma_hpf2>)>>('ma_hpf2_init_preallocated');
  late final _ma_hpf2_init_preallocated =
      _ma_hpf2_init_preallocatedPtr.asFunction<
          int Function(ffi.Pointer<ma_hpf2_config>, ffi.Pointer<ffi.Void>,
              ffi.Pointer<ma_hpf2>)>(isLeaf: true);

  /// General Library Documentation Undocument By General Corporation & Global Corporation & General Developer
  int ma_hpf2_init(
    ffi.Pointer<ma_hpf2_config> pConfig,
    ffi.Pointer<ma_allocation_callbacks> pAllocationCallbacks,
    ffi.Pointer<ma_hpf2> pHPF,
  ) {
    return _ma_hpf2_init(
      pConfig,
      pAllocationCallbacks,
      pHPF,
    );
  }

  late final _ma_hpf2_initPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int32 Function(
              ffi.Pointer<ma_hpf2_config>,
              ffi.Pointer<ma_allocation_callbacks>,
              ffi.Pointer<ma_hpf2>)>>('ma_hpf2_init');
  late final _ma_hpf2_init = _ma_hpf2_initPtr.asFunction<
      int Function(
          ffi.Pointer<ma_hpf2_config>,
          ffi.Pointer<ma_allocation_callbacks>,
          ffi.Pointer<ma_hpf2>)>(isLeaf: true);

  /// General Library Documentation Undocument By General Corporation & Global Corporation & General Developer
  void ma_hpf2_uninit(
    ffi.Pointer<ma_hpf2> pHPF,
    ffi.Pointer<ma_allocation_callbacks> pAllocationCallbacks,
  ) {
    return _ma_hpf2_uninit(
      pHPF,
      pAllocationCallbacks,
    );
  }

  late final _ma_hpf2_uninitPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Pointer<ma_hpf2>,
              ffi.Pointer<ma_allocation_callbacks>)>>('ma_hpf2_uninit');
  late final _ma_hpf2_uninit = _ma_hpf2_uninitPtr.asFunction<
      void Function(ffi.Pointer<ma_hpf2>,
          ffi.Pointer<ma_allocation_callbacks>)>(isLeaf: true);

  /// General Library Documentation Undocument By General Corporation & Global Corporation & General Developer
  int ma_hpf2_reinit(
    ffi.Pointer<ma_hpf2_config> pConfig,
    ffi.Pointer<ma_hpf2> pHPF,
  ) {
    return _ma_hpf2_reinit(
      pConfig,
      pHPF,
    );
  }

  late final _ma_hpf2_reinitPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int32 Function(ffi.Pointer<ma_hpf2_config>,
              ffi.Pointer<ma_hpf2>)>>('ma_hpf2_reinit');
  late final _ma_hpf2_reinit = _ma_hpf2_reinitPtr.asFunction<
      int Function(
          ffi.Pointer<ma_hpf2_config>, ffi.Pointer<ma_hpf2>)>(isLeaf: true);

  /// General Library Documentation Undocument By General Corporation & Global Corporation & General Developer
  int ma_hpf2_process_pcm_frames(
    ffi.Pointer<ma_hpf2> pHPF,
    ffi.Pointer<ffi.Void> pFramesOut,
    ffi.Pointer<ffi.Void> pFramesIn,
    int frameCount,
  ) {
    return _ma_hpf2_process_pcm_frames(
      pHPF,
      pFramesOut,
      pFramesIn,
      frameCount,
    );
  }

  late final _ma_hpf2_process_pcm_framesPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int32 Function(ffi.Pointer<ma_hpf2>, ffi.Pointer<ffi.Void>,
              ffi.Pointer<ffi.Void>, ma_uint64)>>('ma_hpf2_process_pcm_frames');
  late final _ma_hpf2_process_pcm_frames =
      _ma_hpf2_process_pcm_framesPtr.asFunction<
          int Function(ffi.Pointer<ma_hpf2>, ffi.Pointer<ffi.Void>,
              ffi.Pointer<ffi.Void>, int)>(isLeaf: true);

  /// General Library Documentation Undocument By General Corporation & Global Corporation & General Developer
  int ma_hpf2_get_latency(
    ffi.Pointer<ma_hpf2> pHPF,
  ) {
    return _ma_hpf2_get_latency(
      pHPF,
    );
  }

  late final _ma_hpf2_get_latencyPtr =
      _lookup<ffi.NativeFunction<ma_uint32 Function(ffi.Pointer<ma_hpf2>)>>(
          'ma_hpf2_get_latency');
  late final _ma_hpf2_get_latency = _ma_hpf2_get_latencyPtr
      .asFunction<int Function(ffi.Pointer<ma_hpf2>)>(isLeaf: true);

  /// General Library Documentation Undocument By General Corporation & Global Corporation & General Developer
  ma_hpf_config ma_hpf_config_init(
    int format,
    int channels,
    int sampleRate,
    double cutoffFrequency,
    int order,
  ) {
    return _ma_hpf_config_init(
      format,
      channels,
      sampleRate,
      cutoffFrequency,
      order,
    );
  }

  late final _ma_hpf_config_initPtr = _lookup<
      ffi.NativeFunction<
          ma_hpf_config Function(ffi.Int32, ma_uint32, ma_uint32, ffi.Double,
              ma_uint32)>>('ma_hpf_config_init');
  late final _ma_hpf_config_init = _ma_hpf_config_initPtr
      .asFunction<ma_hpf_config Function(int, int, int, double, int)>(
          isLeaf: true);

  /// General Library Documentation Undocument By General Corporation & Global Corporation & General Developer
  int ma_hpf_get_heap_size(
    ffi.Pointer<ma_hpf_config> pConfig,
    ffi.Pointer<ffi.Size> pHeapSizeInBytes,
  ) {
    return _ma_hpf_get_heap_size(
      pConfig,
      pHeapSizeInBytes,
    );
  }

  late final _ma_hpf_get_heap_sizePtr = _lookup<
      ffi.NativeFunction<
          ffi.Int32 Function(ffi.Pointer<ma_hpf_config>,
              ffi.Pointer<ffi.Size>)>>('ma_hpf_get_heap_size');
  late final _ma_hpf_get_heap_size = _ma_hpf_get_heap_sizePtr.asFunction<
      int Function(
          ffi.Pointer<ma_hpf_config>, ffi.Pointer<ffi.Size>)>(isLeaf: true);

  /// General Library Documentation Undocument By General Corporation & Global Corporation & General Developer
  int ma_hpf_init_preallocated(
    ffi.Pointer<ma_hpf_config> pConfig,
    ffi.Pointer<ffi.Void> pHeap,
    ffi.Pointer<ma_hpf> pLPF,
  ) {
    return _ma_hpf_init_preallocated(
      pConfig,
      pHeap,
      pLPF,
    );
  }

  late final _ma_hpf_init_preallocatedPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int32 Function(ffi.Pointer<ma_hpf_config>, ffi.Pointer<ffi.Void>,
              ffi.Pointer<ma_hpf>)>>('ma_hpf_init_preallocated');
  late final _ma_hpf_init_preallocated =
      _ma_hpf_init_preallocatedPtr.asFunction<
          int Function(ffi.Pointer<ma_hpf_config>, ffi.Pointer<ffi.Void>,
              ffi.Pointer<ma_hpf>)>(isLeaf: true);

  /// General Library Documentation Undocument By General Corporation & Global Corporation & General Developer
  int ma_hpf_init(
    ffi.Pointer<ma_hpf_config> pConfig,
    ffi.Pointer<ma_allocation_callbacks> pAllocationCallbacks,
    ffi.Pointer<ma_hpf> pHPF,
  ) {
    return _ma_hpf_init(
      pConfig,
      pAllocationCallbacks,
      pHPF,
    );
  }

  late final _ma_hpf_initPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int32 Function(
              ffi.Pointer<ma_hpf_config>,
              ffi.Pointer<ma_allocation_callbacks>,
              ffi.Pointer<ma_hpf>)>>('ma_hpf_init');
  late final _ma_hpf_init = _ma_hpf_initPtr.asFunction<
      int Function(
          ffi.Pointer<ma_hpf_config>,
          ffi.Pointer<ma_allocation_callbacks>,
          ffi.Pointer<ma_hpf>)>(isLeaf: true);

  /// General Library Documentation Undocument By General Corporation & Global Corporation & General Developer
  void ma_hpf_uninit(
    ffi.Pointer<ma_hpf> pHPF,
    ffi.Pointer<ma_allocation_callbacks> pAllocationCallbacks,
  ) {
    return _ma_hpf_uninit(
      pHPF,
      pAllocationCallbacks,
    );
  }

  late final _ma_hpf_uninitPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Pointer<ma_hpf>,
              ffi.Pointer<ma_allocation_callbacks>)>>('ma_hpf_uninit');
  late final _ma_hpf_uninit = _ma_hpf_uninitPtr.asFunction<
      void Function(ffi.Pointer<ma_hpf>,
          ffi.Pointer<ma_allocation_callbacks>)>(isLeaf: true);

  /// General Library Documentation Undocument By General Corporation & Global Corporation & General Developer
  int ma_hpf_reinit(
    ffi.Pointer<ma_hpf_config> pConfig,
    ffi.Pointer<ma_hpf> pHPF,
  ) {
    return _ma_hpf_reinit(
      pConfig,
      pHPF,
    );
  }

  late final _ma_hpf_reinitPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int32 Function(ffi.Pointer<ma_hpf_config>,
              ffi.Pointer<ma_hpf>)>>('ma_hpf_reinit');
  late final _ma_hpf_reinit = _ma_hpf_reinitPtr.asFunction<
      int Function(
          ffi.Pointer<ma_hpf_config>, ffi.Pointer<ma_hpf>)>(isLeaf: true);

  /// General Library Documentation Undocument By General Corporation & Global Corporation & General Developer
  int ma_hpf_process_pcm_frames(
    ffi.Pointer<ma_hpf> pHPF,
    ffi.Pointer<ffi.Void> pFramesOut,
    ffi.Pointer<ffi.Void> pFramesIn,
    int frameCount,
  ) {
    return _ma_hpf_process_pcm_frames(
      pHPF,
      pFramesOut,
      pFramesIn,
      frameCount,
    );
  }

  late final _ma_hpf_process_pcm_framesPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int32 Function(ffi.Pointer<ma_hpf>, ffi.Pointer<ffi.Void>,
              ffi.Pointer<ffi.Void>, ma_uint64)>>('ma_hpf_process_pcm_frames');
  late final _ma_hpf_process_pcm_frames =
      _ma_hpf_process_pcm_framesPtr.asFunction<
          int Function(ffi.Pointer<ma_hpf>, ffi.Pointer<ffi.Void>,
              ffi.Pointer<ffi.Void>, int)>(isLeaf: true);

  /// General Library Documentation Undocument By General Corporation & Global Corporation & General Developer
  int ma_hpf_get_latency(
    ffi.Pointer<ma_hpf> pHPF,
  ) {
    return _ma_hpf_get_latency(
      pHPF,
    );
  }

  late final _ma_hpf_get_latencyPtr =
      _lookup<ffi.NativeFunction<ma_uint32 Function(ffi.Pointer<ma_hpf>)>>(
          'ma_hpf_get_latency');
  late final _ma_hpf_get_latency = _ma_hpf_get_latencyPtr
      .asFunction<int Function(ffi.Pointer<ma_hpf>)>(isLeaf: true);

  /// General Library Documentation Undocument By General Corporation & Global Corporation & General Developer
  ma_bpf2_config ma_bpf2_config_init(
    int format,
    int channels,
    int sampleRate,
    double cutoffFrequency,
    double q,
  ) {
    return _ma_bpf2_config_init(
      format,
      channels,
      sampleRate,
      cutoffFrequency,
      q,
    );
  }

  late final _ma_bpf2_config_initPtr = _lookup<
      ffi.NativeFunction<
          ma_bpf2_config Function(ffi.Int32, ma_uint32, ma_uint32, ffi.Double,
              ffi.Double)>>('ma_bpf2_config_init');
  late final _ma_bpf2_config_init = _ma_bpf2_config_initPtr
      .asFunction<ma_bpf2_config Function(int, int, int, double, double)>(
          isLeaf: true);

  /// General Library Documentation Undocument By General Corporation & Global Corporation & General Developer
  int ma_bpf2_get_heap_size(
    ffi.Pointer<ma_bpf2_config> pConfig,
    ffi.Pointer<ffi.Size> pHeapSizeInBytes,
  ) {
    return _ma_bpf2_get_heap_size(
      pConfig,
      pHeapSizeInBytes,
    );
  }

  late final _ma_bpf2_get_heap_sizePtr = _lookup<
      ffi.NativeFunction<
          ffi.Int32 Function(ffi.Pointer<ma_bpf2_config>,
              ffi.Pointer<ffi.Size>)>>('ma_bpf2_get_heap_size');
  late final _ma_bpf2_get_heap_size = _ma_bpf2_get_heap_sizePtr.asFunction<
      int Function(
          ffi.Pointer<ma_bpf2_config>, ffi.Pointer<ffi.Size>)>(isLeaf: true);

  /// General Library Documentation Undocument By General Corporation & Global Corporation & General Developer
  int ma_bpf2_init_preallocated(
    ffi.Pointer<ma_bpf2_config> pConfig,
    ffi.Pointer<ffi.Void> pHeap,
    ffi.Pointer<ma_bpf2> pBPF,
  ) {
    return _ma_bpf2_init_preallocated(
      pConfig,
      pHeap,
      pBPF,
    );
  }

  late final _ma_bpf2_init_preallocatedPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int32 Function(ffi.Pointer<ma_bpf2_config>, ffi.Pointer<ffi.Void>,
              ffi.Pointer<ma_bpf2>)>>('ma_bpf2_init_preallocated');
  late final _ma_bpf2_init_preallocated =
      _ma_bpf2_init_preallocatedPtr.asFunction<
          int Function(ffi.Pointer<ma_bpf2_config>, ffi.Pointer<ffi.Void>,
              ffi.Pointer<ma_bpf2>)>(isLeaf: true);

  /// General Library Documentation Undocument By General Corporation & Global Corporation & General Developer
  int ma_bpf2_init(
    ffi.Pointer<ma_bpf2_config> pConfig,
    ffi.Pointer<ma_allocation_callbacks> pAllocationCallbacks,
    ffi.Pointer<ma_bpf2> pBPF,
  ) {
    return _ma_bpf2_init(
      pConfig,
      pAllocationCallbacks,
      pBPF,
    );
  }

  late final _ma_bpf2_initPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int32 Function(
              ffi.Pointer<ma_bpf2_config>,
              ffi.Pointer<ma_allocation_callbacks>,
              ffi.Pointer<ma_bpf2>)>>('ma_bpf2_init');
  late final _ma_bpf2_init = _ma_bpf2_initPtr.asFunction<
      int Function(
          ffi.Pointer<ma_bpf2_config>,
          ffi.Pointer<ma_allocation_callbacks>,
          ffi.Pointer<ma_bpf2>)>(isLeaf: true);

  /// General Library Documentation Undocument By General Corporation & Global Corporation & General Developer
  void ma_bpf2_uninit(
    ffi.Pointer<ma_bpf2> pBPF,
    ffi.Pointer<ma_allocation_callbacks> pAllocationCallbacks,
  ) {
    return _ma_bpf2_uninit(
      pBPF,
      pAllocationCallbacks,
    );
  }

  late final _ma_bpf2_uninitPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Pointer<ma_bpf2>,
              ffi.Pointer<ma_allocation_callbacks>)>>('ma_bpf2_uninit');
  late final _ma_bpf2_uninit = _ma_bpf2_uninitPtr.asFunction<
      void Function(ffi.Pointer<ma_bpf2>,
          ffi.Pointer<ma_allocation_callbacks>)>(isLeaf: true);

  /// General Library Documentation Undocument By General Corporation & Global Corporation & General Developer
  int ma_bpf2_reinit(
    ffi.Pointer<ma_bpf2_config> pConfig,
    ffi.Pointer<ma_bpf2> pBPF,
  ) {
    return _ma_bpf2_reinit(
      pConfig,
      pBPF,
    );
  }

  late final _ma_bpf2_reinitPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int32 Function(ffi.Pointer<ma_bpf2_config>,
              ffi.Pointer<ma_bpf2>)>>('ma_bpf2_reinit');
  late final _ma_bpf2_reinit = _ma_bpf2_reinitPtr.asFunction<
      int Function(
          ffi.Pointer<ma_bpf2_config>, ffi.Pointer<ma_bpf2>)>(isLeaf: true);

  /// General Library Documentation Undocument By General Corporation & Global Corporation & General Developer
  int ma_bpf2_process_pcm_frames(
    ffi.Pointer<ma_bpf2> pBPF,
    ffi.Pointer<ffi.Void> pFramesOut,
    ffi.Pointer<ffi.Void> pFramesIn,
    int frameCount,
  ) {
    return _ma_bpf2_process_pcm_frames(
      pBPF,
      pFramesOut,
      pFramesIn,
      frameCount,
    );
  }

  late final _ma_bpf2_process_pcm_framesPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int32 Function(ffi.Pointer<ma_bpf2>, ffi.Pointer<ffi.Void>,
              ffi.Pointer<ffi.Void>, ma_uint64)>>('ma_bpf2_process_pcm_frames');
  late final _ma_bpf2_process_pcm_frames =
      _ma_bpf2_process_pcm_framesPtr.asFunction<
          int Function(ffi.Pointer<ma_bpf2>, ffi.Pointer<ffi.Void>,
              ffi.Pointer<ffi.Void>, int)>(isLeaf: true);

  /// General Library Documentation Undocument By General Corporation & Global Corporation & General Developer
  int ma_bpf2_get_latency(
    ffi.Pointer<ma_bpf2> pBPF,
  ) {
    return _ma_bpf2_get_latency(
      pBPF,
    );
  }

  late final _ma_bpf2_get_latencyPtr =
      _lookup<ffi.NativeFunction<ma_uint32 Function(ffi.Pointer<ma_bpf2>)>>(
          'ma_bpf2_get_latency');
  late final _ma_bpf2_get_latency = _ma_bpf2_get_latencyPtr
      .asFunction<int Function(ffi.Pointer<ma_bpf2>)>(isLeaf: true);

  /// General Library Documentation Undocument By General Corporation & Global Corporation & General Developer
  ma_bpf_config ma_bpf_config_init(
    int format,
    int channels,
    int sampleRate,
    double cutoffFrequency,
    int order,
  ) {
    return _ma_bpf_config_init(
      format,
      channels,
      sampleRate,
      cutoffFrequency,
      order,
    );
  }

  late final _ma_bpf_config_initPtr = _lookup<
      ffi.NativeFunction<
          ma_bpf_config Function(ffi.Int32, ma_uint32, ma_uint32, ffi.Double,
              ma_uint32)>>('ma_bpf_config_init');
  late final _ma_bpf_config_init = _ma_bpf_config_initPtr
      .asFunction<ma_bpf_config Function(int, int, int, double, int)>(
          isLeaf: true);

  /// General Library Documentation Undocument By General Corporation & Global Corporation & General Developer
  int ma_bpf_get_heap_size(
    ffi.Pointer<ma_bpf_config> pConfig,
    ffi.Pointer<ffi.Size> pHeapSizeInBytes,
  ) {
    return _ma_bpf_get_heap_size(
      pConfig,
      pHeapSizeInBytes,
    );
  }

  late final _ma_bpf_get_heap_sizePtr = _lookup<
      ffi.NativeFunction<
          ffi.Int32 Function(ffi.Pointer<ma_bpf_config>,
              ffi.Pointer<ffi.Size>)>>('ma_bpf_get_heap_size');
  late final _ma_bpf_get_heap_size = _ma_bpf_get_heap_sizePtr.asFunction<
      int Function(
          ffi.Pointer<ma_bpf_config>, ffi.Pointer<ffi.Size>)>(isLeaf: true);

  /// General Library Documentation Undocument By General Corporation & Global Corporation & General Developer
  int ma_bpf_init_preallocated(
    ffi.Pointer<ma_bpf_config> pConfig,
    ffi.Pointer<ffi.Void> pHeap,
    ffi.Pointer<ma_bpf> pBPF,
  ) {
    return _ma_bpf_init_preallocated(
      pConfig,
      pHeap,
      pBPF,
    );
  }

  late final _ma_bpf_init_preallocatedPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int32 Function(ffi.Pointer<ma_bpf_config>, ffi.Pointer<ffi.Void>,
              ffi.Pointer<ma_bpf>)>>('ma_bpf_init_preallocated');
  late final _ma_bpf_init_preallocated =
      _ma_bpf_init_preallocatedPtr.asFunction<
          int Function(ffi.Pointer<ma_bpf_config>, ffi.Pointer<ffi.Void>,
              ffi.Pointer<ma_bpf>)>(isLeaf: true);

  /// General Library Documentation Undocument By General Corporation & Global Corporation & General Developer
  int ma_bpf_init(
    ffi.Pointer<ma_bpf_config> pConfig,
    ffi.Pointer<ma_allocation_callbacks> pAllocationCallbacks,
    ffi.Pointer<ma_bpf> pBPF,
  ) {
    return _ma_bpf_init(
      pConfig,
      pAllocationCallbacks,
      pBPF,
    );
  }

  late final _ma_bpf_initPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int32 Function(
              ffi.Pointer<ma_bpf_config>,
              ffi.Pointer<ma_allocation_callbacks>,
              ffi.Pointer<ma_bpf>)>>('ma_bpf_init');
  late final _ma_bpf_init = _ma_bpf_initPtr.asFunction<
      int Function(
          ffi.Pointer<ma_bpf_config>,
          ffi.Pointer<ma_allocation_callbacks>,
          ffi.Pointer<ma_bpf>)>(isLeaf: true);

  /// General Library Documentation Undocument By General Corporation & Global Corporation & General Developer
  void ma_bpf_uninit(
    ffi.Pointer<ma_bpf> pBPF,
    ffi.Pointer<ma_allocation_callbacks> pAllocationCallbacks,
  ) {
    return _ma_bpf_uninit(
      pBPF,
      pAllocationCallbacks,
    );
  }

  late final _ma_bpf_uninitPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Pointer<ma_bpf>,
              ffi.Pointer<ma_allocation_callbacks>)>>('ma_bpf_uninit');
  late final _ma_bpf_uninit = _ma_bpf_uninitPtr.asFunction<
      void Function(ffi.Pointer<ma_bpf>,
          ffi.Pointer<ma_allocation_callbacks>)>(isLeaf: true);

  /// General Library Documentation Undocument By General Corporation & Global Corporation & General Developer
  int ma_bpf_reinit(
    ffi.Pointer<ma_bpf_config> pConfig,
    ffi.Pointer<ma_bpf> pBPF,
  ) {
    return _ma_bpf_reinit(
      pConfig,
      pBPF,
    );
  }

  late final _ma_bpf_reinitPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int32 Function(ffi.Pointer<ma_bpf_config>,
              ffi.Pointer<ma_bpf>)>>('ma_bpf_reinit');
  late final _ma_bpf_reinit = _ma_bpf_reinitPtr.asFunction<
      int Function(
          ffi.Pointer<ma_bpf_config>, ffi.Pointer<ma_bpf>)>(isLeaf: true);

  /// General Library Documentation Undocument By General Corporation & Global Corporation & General Developer
  int ma_bpf_process_pcm_frames(
    ffi.Pointer<ma_bpf> pBPF,
    ffi.Pointer<ffi.Void> pFramesOut,
    ffi.Pointer<ffi.Void> pFramesIn,
    int frameCount,
  ) {
    return _ma_bpf_process_pcm_frames(
      pBPF,
      pFramesOut,
      pFramesIn,
      frameCount,
    );
  }

  late final _ma_bpf_process_pcm_framesPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int32 Function(ffi.Pointer<ma_bpf>, ffi.Pointer<ffi.Void>,
              ffi.Pointer<ffi.Void>, ma_uint64)>>('ma_bpf_process_pcm_frames');
  late final _ma_bpf_process_pcm_frames =
      _ma_bpf_process_pcm_framesPtr.asFunction<
          int Function(ffi.Pointer<ma_bpf>, ffi.Pointer<ffi.Void>,
              ffi.Pointer<ffi.Void>, int)>(isLeaf: true);

  /// General Library Documentation Undocument By General Corporation & Global Corporation & General Developer
  int ma_bpf_get_latency(
    ffi.Pointer<ma_bpf> pBPF,
  ) {
    return _ma_bpf_get_latency(
      pBPF,
    );
  }

  late final _ma_bpf_get_latencyPtr =
      _lookup<ffi.NativeFunction<ma_uint32 Function(ffi.Pointer<ma_bpf>)>>(
          'ma_bpf_get_latency');
  late final _ma_bpf_get_latency = _ma_bpf_get_latencyPtr
      .asFunction<int Function(ffi.Pointer<ma_bpf>)>(isLeaf: true);

  /// General Library Documentation Undocument By General Corporation & Global Corporation & General Developer
  ma_notch2_config ma_notch2_config_init(
    int format,
    int channels,
    int sampleRate,
    double q,
    double frequency,
  ) {
    return _ma_notch2_config_init(
      format,
      channels,
      sampleRate,
      q,
      frequency,
    );
  }

  late final _ma_notch2_config_initPtr = _lookup<
      ffi.NativeFunction<
          ma_notch2_config Function(ffi.Int32, ma_uint32, ma_uint32, ffi.Double,
              ffi.Double)>>('ma_notch2_config_init');
  late final _ma_notch2_config_init = _ma_notch2_config_initPtr
      .asFunction<ma_notch2_config Function(int, int, int, double, double)>(
          isLeaf: true);

  /// General Library Documentation Undocument By General Corporation & Global Corporation & General Developer
  int ma_notch2_get_heap_size(
    ffi.Pointer<ma_notch2_config> pConfig,
    ffi.Pointer<ffi.Size> pHeapSizeInBytes,
  ) {
    return _ma_notch2_get_heap_size(
      pConfig,
      pHeapSizeInBytes,
    );
  }

  late final _ma_notch2_get_heap_sizePtr = _lookup<
      ffi.NativeFunction<
          ffi.Int32 Function(ffi.Pointer<ma_notch2_config>,
              ffi.Pointer<ffi.Size>)>>('ma_notch2_get_heap_size');
  late final _ma_notch2_get_heap_size = _ma_notch2_get_heap_sizePtr.asFunction<
      int Function(
          ffi.Pointer<ma_notch2_config>, ffi.Pointer<ffi.Size>)>(isLeaf: true);

  /// General Library Documentation Undocument By General Corporation & Global Corporation & General Developer
  int ma_notch2_init_preallocated(
    ffi.Pointer<ma_notch2_config> pConfig,
    ffi.Pointer<ffi.Void> pHeap,
    ffi.Pointer<ma_notch2> pFilter,
  ) {
    return _ma_notch2_init_preallocated(
      pConfig,
      pHeap,
      pFilter,
    );
  }

  late final _ma_notch2_init_preallocatedPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int32 Function(
              ffi.Pointer<ma_notch2_config>,
              ffi.Pointer<ffi.Void>,
              ffi.Pointer<ma_notch2>)>>('ma_notch2_init_preallocated');
  late final _ma_notch2_init_preallocated =
      _ma_notch2_init_preallocatedPtr.asFunction<
          int Function(ffi.Pointer<ma_notch2_config>, ffi.Pointer<ffi.Void>,
              ffi.Pointer<ma_notch2>)>(isLeaf: true);

  /// General Library Documentation Undocument By General Corporation & Global Corporation & General Developer
  int ma_notch2_init(
    ffi.Pointer<ma_notch2_config> pConfig,
    ffi.Pointer<ma_allocation_callbacks> pAllocationCallbacks,
    ffi.Pointer<ma_notch2> pFilter,
  ) {
    return _ma_notch2_init(
      pConfig,
      pAllocationCallbacks,
      pFilter,
    );
  }

  late final _ma_notch2_initPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int32 Function(
              ffi.Pointer<ma_notch2_config>,
              ffi.Pointer<ma_allocation_callbacks>,
              ffi.Pointer<ma_notch2>)>>('ma_notch2_init');
  late final _ma_notch2_init = _ma_notch2_initPtr.asFunction<
      int Function(
          ffi.Pointer<ma_notch2_config>,
          ffi.Pointer<ma_allocation_callbacks>,
          ffi.Pointer<ma_notch2>)>(isLeaf: true);

  /// General Library Documentation Undocument By General Corporation & Global Corporation & General Developer
  void ma_notch2_uninit(
    ffi.Pointer<ma_notch2> pFilter,
    ffi.Pointer<ma_allocation_callbacks> pAllocationCallbacks,
  ) {
    return _ma_notch2_uninit(
      pFilter,
      pAllocationCallbacks,
    );
  }

  late final _ma_notch2_uninitPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Pointer<ma_notch2>,
              ffi.Pointer<ma_allocation_callbacks>)>>('ma_notch2_uninit');
  late final _ma_notch2_uninit = _ma_notch2_uninitPtr.asFunction<
      void Function(ffi.Pointer<ma_notch2>,
          ffi.Pointer<ma_allocation_callbacks>)>(isLeaf: true);

  /// General Library Documentation Undocument By General Corporation & Global Corporation & General Developer
  int ma_notch2_reinit(
    ffi.Pointer<ma_notch2_config> pConfig,
    ffi.Pointer<ma_notch2> pFilter,
  ) {
    return _ma_notch2_reinit(
      pConfig,
      pFilter,
    );
  }

  late final _ma_notch2_reinitPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int32 Function(ffi.Pointer<ma_notch2_config>,
              ffi.Pointer<ma_notch2>)>>('ma_notch2_reinit');
  late final _ma_notch2_reinit = _ma_notch2_reinitPtr.asFunction<
      int Function(
          ffi.Pointer<ma_notch2_config>, ffi.Pointer<ma_notch2>)>(isLeaf: true);

  /// General Library Documentation Undocument By General Corporation & Global Corporation & General Developer
  int ma_notch2_process_pcm_frames(
    ffi.Pointer<ma_notch2> pFilter,
    ffi.Pointer<ffi.Void> pFramesOut,
    ffi.Pointer<ffi.Void> pFramesIn,
    int frameCount,
  ) {
    return _ma_notch2_process_pcm_frames(
      pFilter,
      pFramesOut,
      pFramesIn,
      frameCount,
    );
  }

  late final _ma_notch2_process_pcm_framesPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int32 Function(
              ffi.Pointer<ma_notch2>,
              ffi.Pointer<ffi.Void>,
              ffi.Pointer<ffi.Void>,
              ma_uint64)>>('ma_notch2_process_pcm_frames');
  late final _ma_notch2_process_pcm_frames =
      _ma_notch2_process_pcm_framesPtr.asFunction<
          int Function(ffi.Pointer<ma_notch2>, ffi.Pointer<ffi.Void>,
              ffi.Pointer<ffi.Void>, int)>(isLeaf: true);

  /// General Library Documentation Undocument By General Corporation & Global Corporation & General Developer
  int ma_notch2_get_latency(
    ffi.Pointer<ma_notch2> pFilter,
  ) {
    return _ma_notch2_get_latency(
      pFilter,
    );
  }

  late final _ma_notch2_get_latencyPtr =
      _lookup<ffi.NativeFunction<ma_uint32 Function(ffi.Pointer<ma_notch2>)>>(
          'ma_notch2_get_latency');
  late final _ma_notch2_get_latency = _ma_notch2_get_latencyPtr
      .asFunction<int Function(ffi.Pointer<ma_notch2>)>(isLeaf: true);

  /// General Library Documentation Undocument By General Corporation & Global Corporation & General Developer
  ma_peak2_config ma_peak2_config_init(
    int format,
    int channels,
    int sampleRate,
    double gainDB,
    double q,
    double frequency,
  ) {
    return _ma_peak2_config_init(
      format,
      channels,
      sampleRate,
      gainDB,
      q,
      frequency,
    );
  }

  late final _ma_peak2_config_initPtr = _lookup<
      ffi.NativeFunction<
          ma_peak2_config Function(ffi.Int32, ma_uint32, ma_uint32, ffi.Double,
              ffi.Double, ffi.Double)>>('ma_peak2_config_init');
  late final _ma_peak2_config_init = _ma_peak2_config_initPtr.asFunction<
      ma_peak2_config Function(
          int, int, int, double, double, double)>(isLeaf: true);

  /// General Library Documentation Undocument By General Corporation & Global Corporation & General Developer
  int ma_peak2_get_heap_size(
    ffi.Pointer<ma_peak2_config> pConfig,
    ffi.Pointer<ffi.Size> pHeapSizeInBytes,
  ) {
    return _ma_peak2_get_heap_size(
      pConfig,
      pHeapSizeInBytes,
    );
  }

  late final _ma_peak2_get_heap_sizePtr = _lookup<
      ffi.NativeFunction<
          ffi.Int32 Function(ffi.Pointer<ma_peak2_config>,
              ffi.Pointer<ffi.Size>)>>('ma_peak2_get_heap_size');
  late final _ma_peak2_get_heap_size = _ma_peak2_get_heap_sizePtr.asFunction<
      int Function(
          ffi.Pointer<ma_peak2_config>, ffi.Pointer<ffi.Size>)>(isLeaf: true);

  /// General Library Documentation Undocument By General Corporation & Global Corporation & General Developer
  int ma_peak2_init_preallocated(
    ffi.Pointer<ma_peak2_config> pConfig,
    ffi.Pointer<ffi.Void> pHeap,
    ffi.Pointer<ma_peak2> pFilter,
  ) {
    return _ma_peak2_init_preallocated(
      pConfig,
      pHeap,
      pFilter,
    );
  }

  late final _ma_peak2_init_preallocatedPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int32 Function(
              ffi.Pointer<ma_peak2_config>,
              ffi.Pointer<ffi.Void>,
              ffi.Pointer<ma_peak2>)>>('ma_peak2_init_preallocated');
  late final _ma_peak2_init_preallocated =
      _ma_peak2_init_preallocatedPtr.asFunction<
          int Function(ffi.Pointer<ma_peak2_config>, ffi.Pointer<ffi.Void>,
              ffi.Pointer<ma_peak2>)>(isLeaf: true);

  /// General Library Documentation Undocument By General Corporation & Global Corporation & General Developer
  int ma_peak2_init(
    ffi.Pointer<ma_peak2_config> pConfig,
    ffi.Pointer<ma_allocation_callbacks> pAllocationCallbacks,
    ffi.Pointer<ma_peak2> pFilter,
  ) {
    return _ma_peak2_init(
      pConfig,
      pAllocationCallbacks,
      pFilter,
    );
  }

  late final _ma_peak2_initPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int32 Function(
              ffi.Pointer<ma_peak2_config>,
              ffi.Pointer<ma_allocation_callbacks>,
              ffi.Pointer<ma_peak2>)>>('ma_peak2_init');
  late final _ma_peak2_init = _ma_peak2_initPtr.asFunction<
      int Function(
          ffi.Pointer<ma_peak2_config>,
          ffi.Pointer<ma_allocation_callbacks>,
          ffi.Pointer<ma_peak2>)>(isLeaf: true);

  /// General Library Documentation Undocument By General Corporation & Global Corporation & General Developer
  void ma_peak2_uninit(
    ffi.Pointer<ma_peak2> pFilter,
    ffi.Pointer<ma_allocation_callbacks> pAllocationCallbacks,
  ) {
    return _ma_peak2_uninit(
      pFilter,
      pAllocationCallbacks,
    );
  }

  late final _ma_peak2_uninitPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Pointer<ma_peak2>,
              ffi.Pointer<ma_allocation_callbacks>)>>('ma_peak2_uninit');
  late final _ma_peak2_uninit = _ma_peak2_uninitPtr.asFunction<
      void Function(ffi.Pointer<ma_peak2>,
          ffi.Pointer<ma_allocation_callbacks>)>(isLeaf: true);

  /// General Library Documentation Undocument By General Corporation & Global Corporation & General Developer
  int ma_peak2_reinit(
    ffi.Pointer<ma_peak2_config> pConfig,
    ffi.Pointer<ma_peak2> pFilter,
  ) {
    return _ma_peak2_reinit(
      pConfig,
      pFilter,
    );
  }

  late final _ma_peak2_reinitPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int32 Function(ffi.Pointer<ma_peak2_config>,
              ffi.Pointer<ma_peak2>)>>('ma_peak2_reinit');
  late final _ma_peak2_reinit = _ma_peak2_reinitPtr.asFunction<
      int Function(
          ffi.Pointer<ma_peak2_config>, ffi.Pointer<ma_peak2>)>(isLeaf: true);

  /// General Library Documentation Undocument By General Corporation & Global Corporation & General Developer
  int ma_peak2_process_pcm_frames(
    ffi.Pointer<ma_peak2> pFilter,
    ffi.Pointer<ffi.Void> pFramesOut,
    ffi.Pointer<ffi.Void> pFramesIn,
    int frameCount,
  ) {
    return _ma_peak2_process_pcm_frames(
      pFilter,
      pFramesOut,
      pFramesIn,
      frameCount,
    );
  }

  late final _ma_peak2_process_pcm_framesPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int32 Function(
              ffi.Pointer<ma_peak2>,
              ffi.Pointer<ffi.Void>,
              ffi.Pointer<ffi.Void>,
              ma_uint64)>>('ma_peak2_process_pcm_frames');
  late final _ma_peak2_process_pcm_frames =
      _ma_peak2_process_pcm_framesPtr.asFunction<
          int Function(ffi.Pointer<ma_peak2>, ffi.Pointer<ffi.Void>,
              ffi.Pointer<ffi.Void>, int)>(isLeaf: true);

  /// General Library Documentation Undocument By General Corporation & Global Corporation & General Developer
  int ma_peak2_get_latency(
    ffi.Pointer<ma_peak2> pFilter,
  ) {
    return _ma_peak2_get_latency(
      pFilter,
    );
  }

  late final _ma_peak2_get_latencyPtr =
      _lookup<ffi.NativeFunction<ma_uint32 Function(ffi.Pointer<ma_peak2>)>>(
          'ma_peak2_get_latency');
  late final _ma_peak2_get_latency = _ma_peak2_get_latencyPtr
      .asFunction<int Function(ffi.Pointer<ma_peak2>)>(isLeaf: true);

  /// General Library Documentation Undocument By General Corporation & Global Corporation & General Developer
  ma_loshelf2_config ma_loshelf2_config_init(
    int format,
    int channels,
    int sampleRate,
    double gainDB,
    double shelfSlope,
    double frequency,
  ) {
    return _ma_loshelf2_config_init(
      format,
      channels,
      sampleRate,
      gainDB,
      shelfSlope,
      frequency,
    );
  }

  late final _ma_loshelf2_config_initPtr = _lookup<
      ffi.NativeFunction<
          ma_loshelf2_config Function(ffi.Int32, ma_uint32, ma_uint32,
              ffi.Double, ffi.Double, ffi.Double)>>('ma_loshelf2_config_init');
  late final _ma_loshelf2_config_init = _ma_loshelf2_config_initPtr.asFunction<
      ma_loshelf2_config Function(
          int, int, int, double, double, double)>(isLeaf: true);

  /// General Library Documentation Undocument By General Corporation & Global Corporation & General Developer
  int ma_loshelf2_get_heap_size(
    ffi.Pointer<ma_loshelf2_config> pConfig,
    ffi.Pointer<ffi.Size> pHeapSizeInBytes,
  ) {
    return _ma_loshelf2_get_heap_size(
      pConfig,
      pHeapSizeInBytes,
    );
  }

  late final _ma_loshelf2_get_heap_sizePtr = _lookup<
      ffi.NativeFunction<
          ffi.Int32 Function(ffi.Pointer<ma_loshelf2_config>,
              ffi.Pointer<ffi.Size>)>>('ma_loshelf2_get_heap_size');
  late final _ma_loshelf2_get_heap_size =
      _ma_loshelf2_get_heap_sizePtr.asFunction<
          int Function(ffi.Pointer<ma_loshelf2_config>,
              ffi.Pointer<ffi.Size>)>(isLeaf: true);

  /// General Library Documentation Undocument By General Corporation & Global Corporation & General Developer
  int ma_loshelf2_init_preallocated(
    ffi.Pointer<ma_loshelf2_config> pConfig,
    ffi.Pointer<ffi.Void> pHeap,
    ffi.Pointer<ma_loshelf2> pFilter,
  ) {
    return _ma_loshelf2_init_preallocated(
      pConfig,
      pHeap,
      pFilter,
    );
  }

  late final _ma_loshelf2_init_preallocatedPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int32 Function(
              ffi.Pointer<ma_loshelf2_config>,
              ffi.Pointer<ffi.Void>,
              ffi.Pointer<ma_loshelf2>)>>('ma_loshelf2_init_preallocated');
  late final _ma_loshelf2_init_preallocated =
      _ma_loshelf2_init_preallocatedPtr.asFunction<
          int Function(ffi.Pointer<ma_loshelf2_config>, ffi.Pointer<ffi.Void>,
              ffi.Pointer<ma_loshelf2>)>(isLeaf: true);

  /// General Library Documentation Undocument By General Corporation & Global Corporation & General Developer
  int ma_loshelf2_init(
    ffi.Pointer<ma_loshelf2_config> pConfig,
    ffi.Pointer<ma_allocation_callbacks> pAllocationCallbacks,
    ffi.Pointer<ma_loshelf2> pFilter,
  ) {
    return _ma_loshelf2_init(
      pConfig,
      pAllocationCallbacks,
      pFilter,
    );
  }

  late final _ma_loshelf2_initPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int32 Function(
              ffi.Pointer<ma_loshelf2_config>,
              ffi.Pointer<ma_allocation_callbacks>,
              ffi.Pointer<ma_loshelf2>)>>('ma_loshelf2_init');
  late final _ma_loshelf2_init = _ma_loshelf2_initPtr.asFunction<
      int Function(
          ffi.Pointer<ma_loshelf2_config>,
          ffi.Pointer<ma_allocation_callbacks>,
          ffi.Pointer<ma_loshelf2>)>(isLeaf: true);

  /// General Library Documentation Undocument By General Corporation & Global Corporation & General Developer
  void ma_loshelf2_uninit(
    ffi.Pointer<ma_loshelf2> pFilter,
    ffi.Pointer<ma_allocation_callbacks> pAllocationCallbacks,
  ) {
    return _ma_loshelf2_uninit(
      pFilter,
      pAllocationCallbacks,
    );
  }

  late final _ma_loshelf2_uninitPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Pointer<ma_loshelf2>,
              ffi.Pointer<ma_allocation_callbacks>)>>('ma_loshelf2_uninit');
  late final _ma_loshelf2_uninit = _ma_loshelf2_uninitPtr.asFunction<
      void Function(ffi.Pointer<ma_loshelf2>,
          ffi.Pointer<ma_allocation_callbacks>)>(isLeaf: true);

  /// General Library Documentation Undocument By General Corporation & Global Corporation & General Developer
  int ma_loshelf2_reinit(
    ffi.Pointer<ma_loshelf2_config> pConfig,
    ffi.Pointer<ma_loshelf2> pFilter,
  ) {
    return _ma_loshelf2_reinit(
      pConfig,
      pFilter,
    );
  }

  late final _ma_loshelf2_reinitPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int32 Function(ffi.Pointer<ma_loshelf2_config>,
              ffi.Pointer<ma_loshelf2>)>>('ma_loshelf2_reinit');
  late final _ma_loshelf2_reinit = _ma_loshelf2_reinitPtr.asFunction<
      int Function(ffi.Pointer<ma_loshelf2_config>,
          ffi.Pointer<ma_loshelf2>)>(isLeaf: true);

  /// General Library Documentation Undocument By General Corporation & Global Corporation & General Developer
  int ma_loshelf2_process_pcm_frames(
    ffi.Pointer<ma_loshelf2> pFilter,
    ffi.Pointer<ffi.Void> pFramesOut,
    ffi.Pointer<ffi.Void> pFramesIn,
    int frameCount,
  ) {
    return _ma_loshelf2_process_pcm_frames(
      pFilter,
      pFramesOut,
      pFramesIn,
      frameCount,
    );
  }

  late final _ma_loshelf2_process_pcm_framesPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int32 Function(
              ffi.Pointer<ma_loshelf2>,
              ffi.Pointer<ffi.Void>,
              ffi.Pointer<ffi.Void>,
              ma_uint64)>>('ma_loshelf2_process_pcm_frames');
  late final _ma_loshelf2_process_pcm_frames =
      _ma_loshelf2_process_pcm_framesPtr.asFunction<
          int Function(ffi.Pointer<ma_loshelf2>, ffi.Pointer<ffi.Void>,
              ffi.Pointer<ffi.Void>, int)>(isLeaf: true);

  /// General Library Documentation Undocument By General Corporation & Global Corporation & General Developer
  int ma_loshelf2_get_latency(
    ffi.Pointer<ma_loshelf2> pFilter,
  ) {
    return _ma_loshelf2_get_latency(
      pFilter,
    );
  }

  late final _ma_loshelf2_get_latencyPtr =
      _lookup<ffi.NativeFunction<ma_uint32 Function(ffi.Pointer<ma_loshelf2>)>>(
          'ma_loshelf2_get_latency');
  late final _ma_loshelf2_get_latency = _ma_loshelf2_get_latencyPtr
      .asFunction<int Function(ffi.Pointer<ma_loshelf2>)>(isLeaf: true);

  /// General Library Documentation Undocument By General Corporation & Global Corporation & General Developer
  ma_hishelf2_config ma_hishelf2_config_init(
    int format,
    int channels,
    int sampleRate,
    double gainDB,
    double shelfSlope,
    double frequency,
  ) {
    return _ma_hishelf2_config_init(
      format,
      channels,
      sampleRate,
      gainDB,
      shelfSlope,
      frequency,
    );
  }

  late final _ma_hishelf2_config_initPtr = _lookup<
      ffi.NativeFunction<
          ma_hishelf2_config Function(ffi.Int32, ma_uint32, ma_uint32,
              ffi.Double, ffi.Double, ffi.Double)>>('ma_hishelf2_config_init');
  late final _ma_hishelf2_config_init = _ma_hishelf2_config_initPtr.asFunction<
      ma_hishelf2_config Function(
          int, int, int, double, double, double)>(isLeaf: true);

  /// General Library Documentation Undocument By General Corporation & Global Corporation & General Developer
  int ma_hishelf2_get_heap_size(
    ffi.Pointer<ma_hishelf2_config> pConfig,
    ffi.Pointer<ffi.Size> pHeapSizeInBytes,
  ) {
    return _ma_hishelf2_get_heap_size(
      pConfig,
      pHeapSizeInBytes,
    );
  }

  late final _ma_hishelf2_get_heap_sizePtr = _lookup<
      ffi.NativeFunction<
          ffi.Int32 Function(ffi.Pointer<ma_hishelf2_config>,
              ffi.Pointer<ffi.Size>)>>('ma_hishelf2_get_heap_size');
  late final _ma_hishelf2_get_heap_size =
      _ma_hishelf2_get_heap_sizePtr.asFunction<
          int Function(ffi.Pointer<ma_hishelf2_config>,
              ffi.Pointer<ffi.Size>)>(isLeaf: true);

  /// General Library Documentation Undocument By General Corporation & Global Corporation & General Developer
  int ma_hishelf2_init_preallocated(
    ffi.Pointer<ma_hishelf2_config> pConfig,
    ffi.Pointer<ffi.Void> pHeap,
    ffi.Pointer<ma_hishelf2> pFilter,
  ) {
    return _ma_hishelf2_init_preallocated(
      pConfig,
      pHeap,
      pFilter,
    );
  }

  late final _ma_hishelf2_init_preallocatedPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int32 Function(
              ffi.Pointer<ma_hishelf2_config>,
              ffi.Pointer<ffi.Void>,
              ffi.Pointer<ma_hishelf2>)>>('ma_hishelf2_init_preallocated');
  late final _ma_hishelf2_init_preallocated =
      _ma_hishelf2_init_preallocatedPtr.asFunction<
          int Function(ffi.Pointer<ma_hishelf2_config>, ffi.Pointer<ffi.Void>,
              ffi.Pointer<ma_hishelf2>)>(isLeaf: true);

  /// General Library Documentation Undocument By General Corporation & Global Corporation & General Developer
  int ma_hishelf2_init(
    ffi.Pointer<ma_hishelf2_config> pConfig,
    ffi.Pointer<ma_allocation_callbacks> pAllocationCallbacks,
    ffi.Pointer<ma_hishelf2> pFilter,
  ) {
    return _ma_hishelf2_init(
      pConfig,
      pAllocationCallbacks,
      pFilter,
    );
  }

  late final _ma_hishelf2_initPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int32 Function(
              ffi.Pointer<ma_hishelf2_config>,
              ffi.Pointer<ma_allocation_callbacks>,
              ffi.Pointer<ma_hishelf2>)>>('ma_hishelf2_init');
  late final _ma_hishelf2_init = _ma_hishelf2_initPtr.asFunction<
      int Function(
          ffi.Pointer<ma_hishelf2_config>,
          ffi.Pointer<ma_allocation_callbacks>,
          ffi.Pointer<ma_hishelf2>)>(isLeaf: true);

  /// General Library Documentation Undocument By General Corporation & Global Corporation & General Developer
  void ma_hishelf2_uninit(
    ffi.Pointer<ma_hishelf2> pFilter,
    ffi.Pointer<ma_allocation_callbacks> pAllocationCallbacks,
  ) {
    return _ma_hishelf2_uninit(
      pFilter,
      pAllocationCallbacks,
    );
  }

  late final _ma_hishelf2_uninitPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Pointer<ma_hishelf2>,
              ffi.Pointer<ma_allocation_callbacks>)>>('ma_hishelf2_uninit');
  late final _ma_hishelf2_uninit = _ma_hishelf2_uninitPtr.asFunction<
      void Function(ffi.Pointer<ma_hishelf2>,
          ffi.Pointer<ma_allocation_callbacks>)>(isLeaf: true);

  /// General Library Documentation Undocument By General Corporation & Global Corporation & General Developer
  int ma_hishelf2_reinit(
    ffi.Pointer<ma_hishelf2_config> pConfig,
    ffi.Pointer<ma_hishelf2> pFilter,
  ) {
    return _ma_hishelf2_reinit(
      pConfig,
      pFilter,
    );
  }

  late final _ma_hishelf2_reinitPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int32 Function(ffi.Pointer<ma_hishelf2_config>,
              ffi.Pointer<ma_hishelf2>)>>('ma_hishelf2_reinit');
  late final _ma_hishelf2_reinit = _ma_hishelf2_reinitPtr.asFunction<
      int Function(ffi.Pointer<ma_hishelf2_config>,
          ffi.Pointer<ma_hishelf2>)>(isLeaf: true);

  /// General Library Documentation Undocument By General Corporation & Global Corporation & General Developer
  int ma_hishelf2_process_pcm_frames(
    ffi.Pointer<ma_hishelf2> pFilter,
    ffi.Pointer<ffi.Void> pFramesOut,
    ffi.Pointer<ffi.Void> pFramesIn,
    int frameCount,
  ) {
    return _ma_hishelf2_process_pcm_frames(
      pFilter,
      pFramesOut,
      pFramesIn,
      frameCount,
    );
  }

  late final _ma_hishelf2_process_pcm_framesPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int32 Function(
              ffi.Pointer<ma_hishelf2>,
              ffi.Pointer<ffi.Void>,
              ffi.Pointer<ffi.Void>,
              ma_uint64)>>('ma_hishelf2_process_pcm_frames');
  late final _ma_hishelf2_process_pcm_frames =
      _ma_hishelf2_process_pcm_framesPtr.asFunction<
          int Function(ffi.Pointer<ma_hishelf2>, ffi.Pointer<ffi.Void>,
              ffi.Pointer<ffi.Void>, int)>(isLeaf: true);

  /// General Library Documentation Undocument By General Corporation & Global Corporation & General Developer
  int ma_hishelf2_get_latency(
    ffi.Pointer<ma_hishelf2> pFilter,
  ) {
    return _ma_hishelf2_get_latency(
      pFilter,
    );
  }

  late final _ma_hishelf2_get_latencyPtr =
      _lookup<ffi.NativeFunction<ma_uint32 Function(ffi.Pointer<ma_hishelf2>)>>(
          'ma_hishelf2_get_latency');
  late final _ma_hishelf2_get_latency = _ma_hishelf2_get_latencyPtr
      .asFunction<int Function(ffi.Pointer<ma_hishelf2>)>(isLeaf: true);

  /// General Library Documentation Undocument By General Corporation & Global Corporation & General Developer
  ma_delay_config ma_delay_config_init(
    int channels,
    int sampleRate,
    int delayInFrames,
    double decay,
  ) {
    return _ma_delay_config_init(
      channels,
      sampleRate,
      delayInFrames,
      decay,
    );
  }

  late final _ma_delay_config_initPtr = _lookup<
      ffi.NativeFunction<
          ma_delay_config Function(ma_uint32, ma_uint32, ma_uint32,
              ffi.Float)>>('ma_delay_config_init');
  late final _ma_delay_config_init = _ma_delay_config_initPtr
      .asFunction<ma_delay_config Function(int, int, int, double)>(
          isLeaf: true);

  /// General Library Documentation Undocument By General Corporation & Global Corporation & General Developer
  int ma_delay_init(
    ffi.Pointer<ma_delay_config> pConfig,
    ffi.Pointer<ma_allocation_callbacks> pAllocationCallbacks,
    ffi.Pointer<ma_delay> pDelay,
  ) {
    return _ma_delay_init(
      pConfig,
      pAllocationCallbacks,
      pDelay,
    );
  }

  late final _ma_delay_initPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int32 Function(
              ffi.Pointer<ma_delay_config>,
              ffi.Pointer<ma_allocation_callbacks>,
              ffi.Pointer<ma_delay>)>>('ma_delay_init');
  late final _ma_delay_init = _ma_delay_initPtr.asFunction<
      int Function(
          ffi.Pointer<ma_delay_config>,
          ffi.Pointer<ma_allocation_callbacks>,
          ffi.Pointer<ma_delay>)>(isLeaf: true);

  /// General Library Documentation Undocument By General Corporation & Global Corporation & General Developer
  void ma_delay_uninit(
    ffi.Pointer<ma_delay> pDelay,
    ffi.Pointer<ma_allocation_callbacks> pAllocationCallbacks,
  ) {
    return _ma_delay_uninit(
      pDelay,
      pAllocationCallbacks,
    );
  }

  late final _ma_delay_uninitPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Pointer<ma_delay>,
              ffi.Pointer<ma_allocation_callbacks>)>>('ma_delay_uninit');
  late final _ma_delay_uninit = _ma_delay_uninitPtr.asFunction<
      void Function(ffi.Pointer<ma_delay>,
          ffi.Pointer<ma_allocation_callbacks>)>(isLeaf: true);

  /// General Library Documentation Undocument By General Corporation & Global Corporation & General Developer
  int ma_delay_process_pcm_frames(
    ffi.Pointer<ma_delay> pDelay,
    ffi.Pointer<ffi.Void> pFramesOut,
    ffi.Pointer<ffi.Void> pFramesIn,
    int frameCount,
  ) {
    return _ma_delay_process_pcm_frames(
      pDelay,
      pFramesOut,
      pFramesIn,
      frameCount,
    );
  }

  late final _ma_delay_process_pcm_framesPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int32 Function(
              ffi.Pointer<ma_delay>,
              ffi.Pointer<ffi.Void>,
              ffi.Pointer<ffi.Void>,
              ma_uint32)>>('ma_delay_process_pcm_frames');
  late final _ma_delay_process_pcm_frames =
      _ma_delay_process_pcm_framesPtr.asFunction<
          int Function(ffi.Pointer<ma_delay>, ffi.Pointer<ffi.Void>,
              ffi.Pointer<ffi.Void>, int)>(isLeaf: true);

  /// General Library Documentation Undocument By General Corporation & Global Corporation & General Developer
  void ma_delay_set_wet(
    ffi.Pointer<ma_delay> pDelay,
    double value,
  ) {
    return _ma_delay_set_wet(
      pDelay,
      value,
    );
  }

  late final _ma_delay_set_wetPtr = _lookup<
          ffi
          .NativeFunction<ffi.Void Function(ffi.Pointer<ma_delay>, ffi.Float)>>(
      'ma_delay_set_wet');
  late final _ma_delay_set_wet = _ma_delay_set_wetPtr
      .asFunction<void Function(ffi.Pointer<ma_delay>, double)>(isLeaf: true);

  /// General Library Documentation Undocument By General Corporation & Global Corporation & General Developer
  double ma_delay_get_wet(
    ffi.Pointer<ma_delay> pDelay,
  ) {
    return _ma_delay_get_wet(
      pDelay,
    );
  }

  late final _ma_delay_get_wetPtr =
      _lookup<ffi.NativeFunction<ffi.Float Function(ffi.Pointer<ma_delay>)>>(
          'ma_delay_get_wet');
  late final _ma_delay_get_wet = _ma_delay_get_wetPtr
      .asFunction<double Function(ffi.Pointer<ma_delay>)>(isLeaf: true);

  /// General Library Documentation Undocument By General Corporation & Global Corporation & General Developer
  void ma_delay_set_dry(
    ffi.Pointer<ma_delay> pDelay,
    double value,
  ) {
    return _ma_delay_set_dry(
      pDelay,
      value,
    );
  }

  late final _ma_delay_set_dryPtr = _lookup<
          ffi
          .NativeFunction<ffi.Void Function(ffi.Pointer<ma_delay>, ffi.Float)>>(
      'ma_delay_set_dry');
  late final _ma_delay_set_dry = _ma_delay_set_dryPtr
      .asFunction<void Function(ffi.Pointer<ma_delay>, double)>(isLeaf: true);

  /// General Library Documentation Undocument By General Corporation & Global Corporation & General Developer
  double ma_delay_get_dry(
    ffi.Pointer<ma_delay> pDelay,
  ) {
    return _ma_delay_get_dry(
      pDelay,
    );
  }

  late final _ma_delay_get_dryPtr =
      _lookup<ffi.NativeFunction<ffi.Float Function(ffi.Pointer<ma_delay>)>>(
          'ma_delay_get_dry');
  late final _ma_delay_get_dry = _ma_delay_get_dryPtr
      .asFunction<double Function(ffi.Pointer<ma_delay>)>(isLeaf: true);

  /// General Library Documentation Undocument By General Corporation & Global Corporation & General Developer
  void ma_delay_set_decay(
    ffi.Pointer<ma_delay> pDelay,
    double value,
  ) {
    return _ma_delay_set_decay(
      pDelay,
      value,
    );
  }

  late final _ma_delay_set_decayPtr = _lookup<
          ffi
          .NativeFunction<ffi.Void Function(ffi.Pointer<ma_delay>, ffi.Float)>>(
      'ma_delay_set_decay');
  late final _ma_delay_set_decay = _ma_delay_set_decayPtr
      .asFunction<void Function(ffi.Pointer<ma_delay>, double)>(isLeaf: true);

  /// General Library Documentation Undocument By General Corporation & Global Corporation & General Developer
  double ma_delay_get_decay(
    ffi.Pointer<ma_delay> pDelay,
  ) {
    return _ma_delay_get_decay(
      pDelay,
    );
  }

  late final _ma_delay_get_decayPtr =
      _lookup<ffi.NativeFunction<ffi.Float Function(ffi.Pointer<ma_delay>)>>(
          'ma_delay_get_decay');
  late final _ma_delay_get_decay = _ma_delay_get_decayPtr
      .asFunction<double Function(ffi.Pointer<ma_delay>)>(isLeaf: true);

  /// General Library Documentation Undocument By General Corporation & Global Corporation & General Developer
  ma_gainer_config ma_gainer_config_init(
    int channels,
    int smoothTimeInFrames,
  ) {
    return _ma_gainer_config_init(
      channels,
      smoothTimeInFrames,
    );
  }

  late final _ma_gainer_config_initPtr = _lookup<
          ffi.NativeFunction<ma_gainer_config Function(ma_uint32, ma_uint32)>>(
      'ma_gainer_config_init');
  late final _ma_gainer_config_init = _ma_gainer_config_initPtr
      .asFunction<ma_gainer_config Function(int, int)>(isLeaf: true);

  /// General Library Documentation Undocument By General Corporation & Global Corporation & General Developer
  int ma_gainer_get_heap_size(
    ffi.Pointer<ma_gainer_config> pConfig,
    ffi.Pointer<ffi.Size> pHeapSizeInBytes,
  ) {
    return _ma_gainer_get_heap_size(
      pConfig,
      pHeapSizeInBytes,
    );
  }

  late final _ma_gainer_get_heap_sizePtr = _lookup<
      ffi.NativeFunction<
          ffi.Int32 Function(ffi.Pointer<ma_gainer_config>,
              ffi.Pointer<ffi.Size>)>>('ma_gainer_get_heap_size');
  late final _ma_gainer_get_heap_size = _ma_gainer_get_heap_sizePtr.asFunction<
      int Function(
          ffi.Pointer<ma_gainer_config>, ffi.Pointer<ffi.Size>)>(isLeaf: true);

  /// General Library Documentation Undocument By General Corporation & Global Corporation & General Developer
  int ma_gainer_init_preallocated(
    ffi.Pointer<ma_gainer_config> pConfig,
    ffi.Pointer<ffi.Void> pHeap,
    ffi.Pointer<ma_gainer> pGainer,
  ) {
    return _ma_gainer_init_preallocated(
      pConfig,
      pHeap,
      pGainer,
    );
  }

  late final _ma_gainer_init_preallocatedPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int32 Function(
              ffi.Pointer<ma_gainer_config>,
              ffi.Pointer<ffi.Void>,
              ffi.Pointer<ma_gainer>)>>('ma_gainer_init_preallocated');
  late final _ma_gainer_init_preallocated =
      _ma_gainer_init_preallocatedPtr.asFunction<
          int Function(ffi.Pointer<ma_gainer_config>, ffi.Pointer<ffi.Void>,
              ffi.Pointer<ma_gainer>)>(isLeaf: true);

  /// General Library Documentation Undocument By General Corporation & Global Corporation & General Developer
  int ma_gainer_init(
    ffi.Pointer<ma_gainer_config> pConfig,
    ffi.Pointer<ma_allocation_callbacks> pAllocationCallbacks,
    ffi.Pointer<ma_gainer> pGainer,
  ) {
    return _ma_gainer_init(
      pConfig,
      pAllocationCallbacks,
      pGainer,
    );
  }

  late final _ma_gainer_initPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int32 Function(
              ffi.Pointer<ma_gainer_config>,
              ffi.Pointer<ma_allocation_callbacks>,
              ffi.Pointer<ma_gainer>)>>('ma_gainer_init');
  late final _ma_gainer_init = _ma_gainer_initPtr.asFunction<
      int Function(
          ffi.Pointer<ma_gainer_config>,
          ffi.Pointer<ma_allocation_callbacks>,
          ffi.Pointer<ma_gainer>)>(isLeaf: true);

  /// General Library Documentation Undocument By General Corporation & Global Corporation & General Developer
  void ma_gainer_uninit(
    ffi.Pointer<ma_gainer> pGainer,
    ffi.Pointer<ma_allocation_callbacks> pAllocationCallbacks,
  ) {
    return _ma_gainer_uninit(
      pGainer,
      pAllocationCallbacks,
    );
  }

  late final _ma_gainer_uninitPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Pointer<ma_gainer>,
              ffi.Pointer<ma_allocation_callbacks>)>>('ma_gainer_uninit');
  late final _ma_gainer_uninit = _ma_gainer_uninitPtr.asFunction<
      void Function(ffi.Pointer<ma_gainer>,
          ffi.Pointer<ma_allocation_callbacks>)>(isLeaf: true);

  /// General Library Documentation Undocument By General Corporation & Global Corporation & General Developer
  int ma_gainer_process_pcm_frames(
    ffi.Pointer<ma_gainer> pGainer,
    ffi.Pointer<ffi.Void> pFramesOut,
    ffi.Pointer<ffi.Void> pFramesIn,
    int frameCount,
  ) {
    return _ma_gainer_process_pcm_frames(
      pGainer,
      pFramesOut,
      pFramesIn,
      frameCount,
    );
  }

  late final _ma_gainer_process_pcm_framesPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int32 Function(
              ffi.Pointer<ma_gainer>,
              ffi.Pointer<ffi.Void>,
              ffi.Pointer<ffi.Void>,
              ma_uint64)>>('ma_gainer_process_pcm_frames');
  late final _ma_gainer_process_pcm_frames =
      _ma_gainer_process_pcm_framesPtr.asFunction<
          int Function(ffi.Pointer<ma_gainer>, ffi.Pointer<ffi.Void>,
              ffi.Pointer<ffi.Void>, int)>(isLeaf: true);

  /// General Library Documentation Undocument By General Corporation & Global Corporation & General Developer
  int ma_gainer_set_gain(
    ffi.Pointer<ma_gainer> pGainer,
    double newGain,
  ) {
    return _ma_gainer_set_gain(
      pGainer,
      newGain,
    );
  }

  late final _ma_gainer_set_gainPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int32 Function(
              ffi.Pointer<ma_gainer>, ffi.Float)>>('ma_gainer_set_gain');
  late final _ma_gainer_set_gain = _ma_gainer_set_gainPtr
      .asFunction<int Function(ffi.Pointer<ma_gainer>, double)>(isLeaf: true);

  /// General Library Documentation Undocument By General Corporation & Global Corporation & General Developer
  int ma_gainer_set_gains(
    ffi.Pointer<ma_gainer> pGainer,
    ffi.Pointer<ffi.Float> pNewGains,
  ) {
    return _ma_gainer_set_gains(
      pGainer,
      pNewGains,
    );
  }

  late final _ma_gainer_set_gainsPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int32 Function(ffi.Pointer<ma_gainer>,
              ffi.Pointer<ffi.Float>)>>('ma_gainer_set_gains');
  late final _ma_gainer_set_gains = _ma_gainer_set_gainsPtr
      .asFunction<int Function(ffi.Pointer<ma_gainer>, ffi.Pointer<ffi.Float>)>(
          isLeaf: true);

  /// General Library Documentation Undocument By General Corporation & Global Corporation & General Developer
  int ma_gainer_set_master_volume(
    ffi.Pointer<ma_gainer> pGainer,
    double volume,
  ) {
    return _ma_gainer_set_master_volume(
      pGainer,
      volume,
    );
  }

  late final _ma_gainer_set_master_volumePtr = _lookup<
      ffi.NativeFunction<
          ffi.Int32 Function(ffi.Pointer<ma_gainer>,
              ffi.Float)>>('ma_gainer_set_master_volume');
  late final _ma_gainer_set_master_volume = _ma_gainer_set_master_volumePtr
      .asFunction<int Function(ffi.Pointer<ma_gainer>, double)>(isLeaf: true);

  /// General Library Documentation Undocument By General Corporation & Global Corporation & General Developer
  int ma_gainer_get_master_volume(
    ffi.Pointer<ma_gainer> pGainer,
    ffi.Pointer<ffi.Float> pVolume,
  ) {
    return _ma_gainer_get_master_volume(
      pGainer,
      pVolume,
    );
  }

  late final _ma_gainer_get_master_volumePtr = _lookup<
      ffi.NativeFunction<
          ffi.Int32 Function(ffi.Pointer<ma_gainer>,
              ffi.Pointer<ffi.Float>)>>('ma_gainer_get_master_volume');
  late final _ma_gainer_get_master_volume = _ma_gainer_get_master_volumePtr
      .asFunction<int Function(ffi.Pointer<ma_gainer>, ffi.Pointer<ffi.Float>)>(
          isLeaf: true);

  /// General Library Documentation Undocument By General Corporation & Global Corporation & General Developer
  ma_panner_config ma_panner_config_init(
    int format,
    int channels,
  ) {
    return _ma_panner_config_init(
      format,
      channels,
    );
  }

  late final _ma_panner_config_initPtr = _lookup<
          ffi.NativeFunction<ma_panner_config Function(ffi.Int32, ma_uint32)>>(
      'ma_panner_config_init');
  late final _ma_panner_config_init = _ma_panner_config_initPtr
      .asFunction<ma_panner_config Function(int, int)>(isLeaf: true);

  /// General Library Documentation Undocument By General Corporation & Global Corporation & General Developer
  int ma_panner_init(
    ffi.Pointer<ma_panner_config> pConfig,
    ffi.Pointer<ma_panner> pPanner,
  ) {
    return _ma_panner_init(
      pConfig,
      pPanner,
    );
  }

  late final _ma_panner_initPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int32 Function(ffi.Pointer<ma_panner_config>,
              ffi.Pointer<ma_panner>)>>('ma_panner_init');
  late final _ma_panner_init = _ma_panner_initPtr.asFunction<
      int Function(
          ffi.Pointer<ma_panner_config>, ffi.Pointer<ma_panner>)>(isLeaf: true);

  /// General Library Documentation Undocument By General Corporation & Global Corporation & General Developer
  int ma_panner_process_pcm_frames(
    ffi.Pointer<ma_panner> pPanner,
    ffi.Pointer<ffi.Void> pFramesOut,
    ffi.Pointer<ffi.Void> pFramesIn,
    int frameCount,
  ) {
    return _ma_panner_process_pcm_frames(
      pPanner,
      pFramesOut,
      pFramesIn,
      frameCount,
    );
  }

  late final _ma_panner_process_pcm_framesPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int32 Function(
              ffi.Pointer<ma_panner>,
              ffi.Pointer<ffi.Void>,
              ffi.Pointer<ffi.Void>,
              ma_uint64)>>('ma_panner_process_pcm_frames');
  late final _ma_panner_process_pcm_frames =
      _ma_panner_process_pcm_framesPtr.asFunction<
          int Function(ffi.Pointer<ma_panner>, ffi.Pointer<ffi.Void>,
              ffi.Pointer<ffi.Void>, int)>(isLeaf: true);

  /// General Library Documentation Undocument By General Corporation & Global Corporation & General Developer
  void ma_panner_set_mode(
    ffi.Pointer<ma_panner> pPanner,
    int mode,
  ) {
    return _ma_panner_set_mode(
      pPanner,
      mode,
    );
  }

  late final _ma_panner_set_modePtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(
              ffi.Pointer<ma_panner>, ffi.Int32)>>('ma_panner_set_mode');
  late final _ma_panner_set_mode = _ma_panner_set_modePtr
      .asFunction<void Function(ffi.Pointer<ma_panner>, int)>(isLeaf: true);

  /// General Library Documentation Undocument By General Corporation & Global Corporation & General Developer
  int ma_panner_get_mode(
    ffi.Pointer<ma_panner> pPanner,
  ) {
    return _ma_panner_get_mode(
      pPanner,
    );
  }

  late final _ma_panner_get_modePtr =
      _lookup<ffi.NativeFunction<ffi.Int32 Function(ffi.Pointer<ma_panner>)>>(
          'ma_panner_get_mode');
  late final _ma_panner_get_mode = _ma_panner_get_modePtr
      .asFunction<int Function(ffi.Pointer<ma_panner>)>(isLeaf: true);

  /// General Library Documentation Undocument By General Corporation & Global Corporation & General Developer
  void ma_panner_set_pan(
    ffi.Pointer<ma_panner> pPanner,
    double pan,
  ) {
    return _ma_panner_set_pan(
      pPanner,
      pan,
    );
  }

  late final _ma_panner_set_panPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(
              ffi.Pointer<ma_panner>, ffi.Float)>>('ma_panner_set_pan');
  late final _ma_panner_set_pan = _ma_panner_set_panPtr
      .asFunction<void Function(ffi.Pointer<ma_panner>, double)>(isLeaf: true);

  /// General Library Documentation Undocument By General Corporation & Global Corporation & General Developer
  double ma_panner_get_pan(
    ffi.Pointer<ma_panner> pPanner,
  ) {
    return _ma_panner_get_pan(
      pPanner,
    );
  }

  late final _ma_panner_get_panPtr =
      _lookup<ffi.NativeFunction<ffi.Float Function(ffi.Pointer<ma_panner>)>>(
          'ma_panner_get_pan');
  late final _ma_panner_get_pan = _ma_panner_get_panPtr
      .asFunction<double Function(ffi.Pointer<ma_panner>)>(isLeaf: true);

  /// General Library Documentation Undocument By General Corporation & Global Corporation & General Developer
  ma_fader_config ma_fader_config_init(
    int format,
    int channels,
    int sampleRate,
  ) {
    return _ma_fader_config_init(
      format,
      channels,
      sampleRate,
    );
  }

  late final _ma_fader_config_initPtr = _lookup<
      ffi.NativeFunction<
          ma_fader_config Function(
              ffi.Int32, ma_uint32, ma_uint32)>>('ma_fader_config_init');
  late final _ma_fader_config_init = _ma_fader_config_initPtr
      .asFunction<ma_fader_config Function(int, int, int)>(isLeaf: true);

  /// General Library Documentation Undocument By General Corporation & Global Corporation & General Developer
  int ma_fader_init(
    ffi.Pointer<ma_fader_config> pConfig,
    ffi.Pointer<ma_fader> pFader,
  ) {
    return _ma_fader_init(
      pConfig,
      pFader,
    );
  }

  late final _ma_fader_initPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int32 Function(ffi.Pointer<ma_fader_config>,
              ffi.Pointer<ma_fader>)>>('ma_fader_init');
  late final _ma_fader_init = _ma_fader_initPtr.asFunction<
      int Function(
          ffi.Pointer<ma_fader_config>, ffi.Pointer<ma_fader>)>(isLeaf: true);

  /// General Library Documentation Undocument By General Corporation & Global Corporation & General Developer
  int ma_fader_process_pcm_frames(
    ffi.Pointer<ma_fader> pFader,
    ffi.Pointer<ffi.Void> pFramesOut,
    ffi.Pointer<ffi.Void> pFramesIn,
    int frameCount,
  ) {
    return _ma_fader_process_pcm_frames(
      pFader,
      pFramesOut,
      pFramesIn,
      frameCount,
    );
  }

  late final _ma_fader_process_pcm_framesPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int32 Function(
              ffi.Pointer<ma_fader>,
              ffi.Pointer<ffi.Void>,
              ffi.Pointer<ffi.Void>,
              ma_uint64)>>('ma_fader_process_pcm_frames');
  late final _ma_fader_process_pcm_frames =
      _ma_fader_process_pcm_framesPtr.asFunction<
          int Function(ffi.Pointer<ma_fader>, ffi.Pointer<ffi.Void>,
              ffi.Pointer<ffi.Void>, int)>(isLeaf: true);

  /// General Library Documentation Undocument By General Corporation & Global Corporation & General Developer
  void ma_fader_get_data_format(
    ffi.Pointer<ma_fader> pFader,
    ffi.Pointer<ffi.Int32> pFormat,
    ffi.Pointer<ma_uint32> pChannels,
    ffi.Pointer<ma_uint32> pSampleRate,
  ) {
    return _ma_fader_get_data_format(
      pFader,
      pFormat,
      pChannels,
      pSampleRate,
    );
  }

  late final _ma_fader_get_data_formatPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(
              ffi.Pointer<ma_fader>,
              ffi.Pointer<ffi.Int32>,
              ffi.Pointer<ma_uint32>,
              ffi.Pointer<ma_uint32>)>>('ma_fader_get_data_format');
  late final _ma_fader_get_data_format =
      _ma_fader_get_data_formatPtr.asFunction<
          void Function(ffi.Pointer<ma_fader>, ffi.Pointer<ffi.Int32>,
              ffi.Pointer<ma_uint32>, ffi.Pointer<ma_uint32>)>(isLeaf: true);

  /// General Library Documentation Undocument By General Corporation & Global Corporation & General Developer
  void ma_fader_set_fade(
    ffi.Pointer<ma_fader> pFader,
    double volumeBeg,
    double volumeEnd,
    int lengthInFrames,
  ) {
    return _ma_fader_set_fade(
      pFader,
      volumeBeg,
      volumeEnd,
      lengthInFrames,
    );
  }

  late final _ma_fader_set_fadePtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Pointer<ma_fader>, ffi.Float, ffi.Float,
              ma_uint64)>>('ma_fader_set_fade');
  late final _ma_fader_set_fade = _ma_fader_set_fadePtr
      .asFunction<void Function(ffi.Pointer<ma_fader>, double, double, int)>(
          isLeaf: true);

  /// General Library Documentation Undocument By General Corporation & Global Corporation & General Developer
  void ma_fader_set_fade_ex(
    ffi.Pointer<ma_fader> pFader,
    double volumeBeg,
    double volumeEnd,
    int lengthInFrames,
    int startOffsetInFrames,
  ) {
    return _ma_fader_set_fade_ex(
      pFader,
      volumeBeg,
      volumeEnd,
      lengthInFrames,
      startOffsetInFrames,
    );
  }

  late final _ma_fader_set_fade_exPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Pointer<ma_fader>, ffi.Float, ffi.Float,
              ma_uint64, ma_int64)>>('ma_fader_set_fade_ex');
  late final _ma_fader_set_fade_ex = _ma_fader_set_fade_exPtr.asFunction<
      void Function(
          ffi.Pointer<ma_fader>, double, double, int, int)>(isLeaf: true);

  /// General Library Documentation Undocument By General Corporation & Global Corporation & General Developer
  double ma_fader_get_current_volume(
    ffi.Pointer<ma_fader> pFader,
  ) {
    return _ma_fader_get_current_volume(
      pFader,
    );
  }

  late final _ma_fader_get_current_volumePtr =
      _lookup<ffi.NativeFunction<ffi.Float Function(ffi.Pointer<ma_fader>)>>(
          'ma_fader_get_current_volume');
  late final _ma_fader_get_current_volume = _ma_fader_get_current_volumePtr
      .asFunction<double Function(ffi.Pointer<ma_fader>)>(isLeaf: true);

  /// General Library Documentation Undocument By General Corporation & Global Corporation & General Developer
  ma_spatializer_listener_config ma_spatializer_listener_config_init(
    int channelsOut,
  ) {
    return _ma_spatializer_listener_config_init(
      channelsOut,
    );
  }

  late final _ma_spatializer_listener_config_initPtr = _lookup<
          ffi
          .NativeFunction<ma_spatializer_listener_config Function(ma_uint32)>>(
      'ma_spatializer_listener_config_init');
  late final _ma_spatializer_listener_config_init =
      _ma_spatializer_listener_config_initPtr
          .asFunction<ma_spatializer_listener_config Function(int)>(
              isLeaf: true);

  /// General Library Documentation Undocument By General Corporation & Global Corporation & General Developer
  int ma_spatializer_listener_get_heap_size(
    ffi.Pointer<ma_spatializer_listener_config> pConfig,
    ffi.Pointer<ffi.Size> pHeapSizeInBytes,
  ) {
    return _ma_spatializer_listener_get_heap_size(
      pConfig,
      pHeapSizeInBytes,
    );
  }

  late final _ma_spatializer_listener_get_heap_sizePtr = _lookup<
      ffi.NativeFunction<
          ffi.Int32 Function(ffi.Pointer<ma_spatializer_listener_config>,
              ffi.Pointer<ffi.Size>)>>('ma_spatializer_listener_get_heap_size');
  late final _ma_spatializer_listener_get_heap_size =
      _ma_spatializer_listener_get_heap_sizePtr.asFunction<
          int Function(ffi.Pointer<ma_spatializer_listener_config>,
              ffi.Pointer<ffi.Size>)>(isLeaf: true);

  /// General Library Documentation Undocument By General Corporation & Global Corporation & General Developer
  int ma_spatializer_listener_init_preallocated(
    ffi.Pointer<ma_spatializer_listener_config> pConfig,
    ffi.Pointer<ffi.Void> pHeap,
    ffi.Pointer<ma_spatializer_listener> pListener,
  ) {
    return _ma_spatializer_listener_init_preallocated(
      pConfig,
      pHeap,
      pListener,
    );
  }

  late final _ma_spatializer_listener_init_preallocatedPtr = _lookup<
          ffi.NativeFunction<
              ffi.Int32 Function(
                  ffi.Pointer<ma_spatializer_listener_config>,
                  ffi.Pointer<ffi.Void>,
                  ffi.Pointer<ma_spatializer_listener>)>>(
      'ma_spatializer_listener_init_preallocated');
  late final _ma_spatializer_listener_init_preallocated =
      _ma_spatializer_listener_init_preallocatedPtr.asFunction<
          int Function(
              ffi.Pointer<ma_spatializer_listener_config>,
              ffi.Pointer<ffi.Void>,
              ffi.Pointer<ma_spatializer_listener>)>(isLeaf: true);

  /// General Library Documentation Undocument By General Corporation & Global Corporation & General Developer
  int ma_spatializer_listener_init(
    ffi.Pointer<ma_spatializer_listener_config> pConfig,
    ffi.Pointer<ma_allocation_callbacks> pAllocationCallbacks,
    ffi.Pointer<ma_spatializer_listener> pListener,
  ) {
    return _ma_spatializer_listener_init(
      pConfig,
      pAllocationCallbacks,
      pListener,
    );
  }

  late final _ma_spatializer_listener_initPtr = _lookup<
          ffi.NativeFunction<
              ffi.Int32 Function(
                  ffi.Pointer<ma_spatializer_listener_config>,
                  ffi.Pointer<ma_allocation_callbacks>,
                  ffi.Pointer<ma_spatializer_listener>)>>(
      'ma_spatializer_listener_init');
  late final _ma_spatializer_listener_init =
      _ma_spatializer_listener_initPtr.asFunction<
          int Function(
              ffi.Pointer<ma_spatializer_listener_config>,
              ffi.Pointer<ma_allocation_callbacks>,
              ffi.Pointer<ma_spatializer_listener>)>(isLeaf: true);

  /// General Library Documentation Undocument By General Corporation & Global Corporation & General Developer
  void ma_spatializer_listener_uninit(
    ffi.Pointer<ma_spatializer_listener> pListener,
    ffi.Pointer<ma_allocation_callbacks> pAllocationCallbacks,
  ) {
    return _ma_spatializer_listener_uninit(
      pListener,
      pAllocationCallbacks,
    );
  }

  late final _ma_spatializer_listener_uninitPtr = _lookup<
          ffi.NativeFunction<
              ffi.Void Function(ffi.Pointer<ma_spatializer_listener>,
                  ffi.Pointer<ma_allocation_callbacks>)>>(
      'ma_spatializer_listener_uninit');
  late final _ma_spatializer_listener_uninit =
      _ma_spatializer_listener_uninitPtr.asFunction<
          void Function(ffi.Pointer<ma_spatializer_listener>,
              ffi.Pointer<ma_allocation_callbacks>)>(isLeaf: true);

  /// General Library Documentation Undocument By General Corporation & Global Corporation & General Developer
  ffi.Pointer<ma_channel> ma_spatializer_listener_get_channel_map(
    ffi.Pointer<ma_spatializer_listener> pListener,
  ) {
    return _ma_spatializer_listener_get_channel_map(
      pListener,
    );
  }

  late final _ma_spatializer_listener_get_channel_mapPtr = _lookup<
          ffi.NativeFunction<
              ffi.Pointer<ma_channel> Function(
                  ffi.Pointer<ma_spatializer_listener>)>>(
      'ma_spatializer_listener_get_channel_map');
  late final _ma_spatializer_listener_get_channel_map =
      _ma_spatializer_listener_get_channel_mapPtr.asFunction<
          ffi.Pointer<ma_channel> Function(
              ffi.Pointer<ma_spatializer_listener>)>(isLeaf: true);

  /// General Library Documentation Undocument By General Corporation & Global Corporation & General Developer
  void ma_spatializer_listener_set_cone(
    ffi.Pointer<ma_spatializer_listener> pListener,
    double innerAngleInRadians,
    double outerAngleInRadians,
    double outerGain,
  ) {
    return _ma_spatializer_listener_set_cone(
      pListener,
      innerAngleInRadians,
      outerAngleInRadians,
      outerGain,
    );
  }

  late final _ma_spatializer_listener_set_conePtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Pointer<ma_spatializer_listener>, ffi.Float,
              ffi.Float, ffi.Float)>>('ma_spatializer_listener_set_cone');
  late final _ma_spatializer_listener_set_cone =
      _ma_spatializer_listener_set_conePtr.asFunction<
          void Function(ffi.Pointer<ma_spatializer_listener>, double, double,
              double)>(isLeaf: true);

  /// General Library Documentation Undocument By General Corporation & Global Corporation & General Developer
  void ma_spatializer_listener_get_cone(
    ffi.Pointer<ma_spatializer_listener> pListener,
    ffi.Pointer<ffi.Float> pInnerAngleInRadians,
    ffi.Pointer<ffi.Float> pOuterAngleInRadians,
    ffi.Pointer<ffi.Float> pOuterGain,
  ) {
    return _ma_spatializer_listener_get_cone(
      pListener,
      pInnerAngleInRadians,
      pOuterAngleInRadians,
      pOuterGain,
    );
  }

  late final _ma_spatializer_listener_get_conePtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(
              ffi.Pointer<ma_spatializer_listener>,
              ffi.Pointer<ffi.Float>,
              ffi.Pointer<ffi.Float>,
              ffi.Pointer<ffi.Float>)>>('ma_spatializer_listener_get_cone');
  late final _ma_spatializer_listener_get_cone =
      _ma_spatializer_listener_get_conePtr.asFunction<
          void Function(
              ffi.Pointer<ma_spatializer_listener>,
              ffi.Pointer<ffi.Float>,
              ffi.Pointer<ffi.Float>,
              ffi.Pointer<ffi.Float>)>(isLeaf: true);

  /// General Library Documentation Undocument By General Corporation & Global Corporation & General Developer
  void ma_spatializer_listener_set_position(
    ffi.Pointer<ma_spatializer_listener> pListener,
    double x,
    double y,
    double z,
  ) {
    return _ma_spatializer_listener_set_position(
      pListener,
      x,
      y,
      z,
    );
  }

  late final _ma_spatializer_listener_set_positionPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Pointer<ma_spatializer_listener>, ffi.Float,
              ffi.Float, ffi.Float)>>('ma_spatializer_listener_set_position');
  late final _ma_spatializer_listener_set_position =
      _ma_spatializer_listener_set_positionPtr.asFunction<
          void Function(ffi.Pointer<ma_spatializer_listener>, double, double,
              double)>(isLeaf: true);

  /// General Library Documentation Undocument By General Corporation & Global Corporation & General Developer
  ma_vec3f ma_spatializer_listener_get_position(
    ffi.Pointer<ma_spatializer_listener> pListener,
  ) {
    return _ma_spatializer_listener_get_position(
      pListener,
    );
  }

  late final _ma_spatializer_listener_get_positionPtr = _lookup<
          ffi.NativeFunction<
              ma_vec3f Function(ffi.Pointer<ma_spatializer_listener>)>>(
      'ma_spatializer_listener_get_position');
  late final _ma_spatializer_listener_get_position =
      _ma_spatializer_listener_get_positionPtr
          .asFunction<ma_vec3f Function(ffi.Pointer<ma_spatializer_listener>)>(
              isLeaf: true);

  /// General Library Documentation Undocument By General Corporation & Global Corporation & General Developer
  void ma_spatializer_listener_set_direction(
    ffi.Pointer<ma_spatializer_listener> pListener,
    double x,
    double y,
    double z,
  ) {
    return _ma_spatializer_listener_set_direction(
      pListener,
      x,
      y,
      z,
    );
  }

  late final _ma_spatializer_listener_set_directionPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Pointer<ma_spatializer_listener>, ffi.Float,
              ffi.Float, ffi.Float)>>('ma_spatializer_listener_set_direction');
  late final _ma_spatializer_listener_set_direction =
      _ma_spatializer_listener_set_directionPtr.asFunction<
          void Function(ffi.Pointer<ma_spatializer_listener>, double, double,
              double)>(isLeaf: true);

  /// General Library Documentation Undocument By General Corporation & Global Corporation & General Developer
  ma_vec3f ma_spatializer_listener_get_direction(
    ffi.Pointer<ma_spatializer_listener> pListener,
  ) {
    return _ma_spatializer_listener_get_direction(
      pListener,
    );
  }

  late final _ma_spatializer_listener_get_directionPtr = _lookup<
          ffi.NativeFunction<
              ma_vec3f Function(ffi.Pointer<ma_spatializer_listener>)>>(
      'ma_spatializer_listener_get_direction');
  late final _ma_spatializer_listener_get_direction =
      _ma_spatializer_listener_get_directionPtr
          .asFunction<ma_vec3f Function(ffi.Pointer<ma_spatializer_listener>)>(
              isLeaf: true);

  /// General Library Documentation Undocument By General Corporation & Global Corporation & General Developer
  void ma_spatializer_listener_set_velocity(
    ffi.Pointer<ma_spatializer_listener> pListener,
    double x,
    double y,
    double z,
  ) {
    return _ma_spatializer_listener_set_velocity(
      pListener,
      x,
      y,
      z,
    );
  }

  late final _ma_spatializer_listener_set_velocityPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Pointer<ma_spatializer_listener>, ffi.Float,
              ffi.Float, ffi.Float)>>('ma_spatializer_listener_set_velocity');
  late final _ma_spatializer_listener_set_velocity =
      _ma_spatializer_listener_set_velocityPtr.asFunction<
          void Function(ffi.Pointer<ma_spatializer_listener>, double, double,
              double)>(isLeaf: true);

  /// General Library Documentation Undocument By General Corporation & Global Corporation & General Developer
  ma_vec3f ma_spatializer_listener_get_velocity(
    ffi.Pointer<ma_spatializer_listener> pListener,
  ) {
    return _ma_spatializer_listener_get_velocity(
      pListener,
    );
  }

  late final _ma_spatializer_listener_get_velocityPtr = _lookup<
          ffi.NativeFunction<
              ma_vec3f Function(ffi.Pointer<ma_spatializer_listener>)>>(
      'ma_spatializer_listener_get_velocity');
  late final _ma_spatializer_listener_get_velocity =
      _ma_spatializer_listener_get_velocityPtr
          .asFunction<ma_vec3f Function(ffi.Pointer<ma_spatializer_listener>)>(
              isLeaf: true);

  /// General Library Documentation Undocument By General Corporation & Global Corporation & General Developer
  void ma_spatializer_listener_set_speed_of_sound(
    ffi.Pointer<ma_spatializer_listener> pListener,
    double speedOfSound,
  ) {
    return _ma_spatializer_listener_set_speed_of_sound(
      pListener,
      speedOfSound,
    );
  }

  late final _ma_spatializer_listener_set_speed_of_soundPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Pointer<ma_spatializer_listener>,
              ffi.Float)>>('ma_spatializer_listener_set_speed_of_sound');
  late final _ma_spatializer_listener_set_speed_of_sound =
      _ma_spatializer_listener_set_speed_of_soundPtr.asFunction<
          void Function(
              ffi.Pointer<ma_spatializer_listener>, double)>(isLeaf: true);

  /// General Library Documentation Undocument By General Corporation & Global Corporation & General Developer
  double ma_spatializer_listener_get_speed_of_sound(
    ffi.Pointer<ma_spatializer_listener> pListener,
  ) {
    return _ma_spatializer_listener_get_speed_of_sound(
      pListener,
    );
  }

  late final _ma_spatializer_listener_get_speed_of_soundPtr = _lookup<
          ffi.NativeFunction<
              ffi.Float Function(ffi.Pointer<ma_spatializer_listener>)>>(
      'ma_spatializer_listener_get_speed_of_sound');
  late final _ma_spatializer_listener_get_speed_of_sound =
      _ma_spatializer_listener_get_speed_of_soundPtr
          .asFunction<double Function(ffi.Pointer<ma_spatializer_listener>)>(
              isLeaf: true);

  /// General Library Documentation Undocument By General Corporation & Global Corporation & General Developer
  void ma_spatializer_listener_set_world_up(
    ffi.Pointer<ma_spatializer_listener> pListener,
    double x,
    double y,
    double z,
  ) {
    return _ma_spatializer_listener_set_world_up(
      pListener,
      x,
      y,
      z,
    );
  }

  late final _ma_spatializer_listener_set_world_upPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Pointer<ma_spatializer_listener>, ffi.Float,
              ffi.Float, ffi.Float)>>('ma_spatializer_listener_set_world_up');
  late final _ma_spatializer_listener_set_world_up =
      _ma_spatializer_listener_set_world_upPtr.asFunction<
          void Function(ffi.Pointer<ma_spatializer_listener>, double, double,
              double)>(isLeaf: true);

  /// General Library Documentation Undocument By General Corporation & Global Corporation & General Developer
  ma_vec3f ma_spatializer_listener_get_world_up(
    ffi.Pointer<ma_spatializer_listener> pListener,
  ) {
    return _ma_spatializer_listener_get_world_up(
      pListener,
    );
  }

  late final _ma_spatializer_listener_get_world_upPtr = _lookup<
          ffi.NativeFunction<
              ma_vec3f Function(ffi.Pointer<ma_spatializer_listener>)>>(
      'ma_spatializer_listener_get_world_up');
  late final _ma_spatializer_listener_get_world_up =
      _ma_spatializer_listener_get_world_upPtr
          .asFunction<ma_vec3f Function(ffi.Pointer<ma_spatializer_listener>)>(
              isLeaf: true);

  /// General Library Documentation Undocument By General Corporation & Global Corporation & General Developer
  void ma_spatializer_listener_set_enabled(
    ffi.Pointer<ma_spatializer_listener> pListener,
    int isEnabled,
  ) {
    return _ma_spatializer_listener_set_enabled(
      pListener,
      isEnabled,
    );
  }

  late final _ma_spatializer_listener_set_enabledPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Pointer<ma_spatializer_listener>,
              ma_bool32)>>('ma_spatializer_listener_set_enabled');
  late final _ma_spatializer_listener_set_enabled =
      _ma_spatializer_listener_set_enabledPtr
          .asFunction<void Function(ffi.Pointer<ma_spatializer_listener>, int)>(
              isLeaf: true);

  /// General Library Documentation Undocument By General Corporation & Global Corporation & General Developer
  int ma_spatializer_listener_is_enabled(
    ffi.Pointer<ma_spatializer_listener> pListener,
  ) {
    return _ma_spatializer_listener_is_enabled(
      pListener,
    );
  }

  late final _ma_spatializer_listener_is_enabledPtr = _lookup<
          ffi.NativeFunction<
              ma_bool32 Function(ffi.Pointer<ma_spatializer_listener>)>>(
      'ma_spatializer_listener_is_enabled');
  late final _ma_spatializer_listener_is_enabled =
      _ma_spatializer_listener_is_enabledPtr
          .asFunction<int Function(ffi.Pointer<ma_spatializer_listener>)>(
              isLeaf: true);

  /// General Library Documentation Undocument By General Corporation & Global Corporation & General Developer
  ma_spatializer_config ma_spatializer_config_init(
    int channelsIn,
    int channelsOut,
  ) {
    return _ma_spatializer_config_init(
      channelsIn,
      channelsOut,
    );
  }

  late final _ma_spatializer_config_initPtr = _lookup<
      ffi.NativeFunction<
          ma_spatializer_config Function(
              ma_uint32, ma_uint32)>>('ma_spatializer_config_init');
  late final _ma_spatializer_config_init = _ma_spatializer_config_initPtr
      .asFunction<ma_spatializer_config Function(int, int)>(isLeaf: true);

  /// General Library Documentation Undocument By General Corporation & Global Corporation & General Developer
  int ma_spatializer_get_heap_size(
    ffi.Pointer<ma_spatializer_config> pConfig,
    ffi.Pointer<ffi.Size> pHeapSizeInBytes,
  ) {
    return _ma_spatializer_get_heap_size(
      pConfig,
      pHeapSizeInBytes,
    );
  }

  late final _ma_spatializer_get_heap_sizePtr = _lookup<
      ffi.NativeFunction<
          ffi.Int32 Function(ffi.Pointer<ma_spatializer_config>,
              ffi.Pointer<ffi.Size>)>>('ma_spatializer_get_heap_size');
  late final _ma_spatializer_get_heap_size =
      _ma_spatializer_get_heap_sizePtr.asFunction<
          int Function(ffi.Pointer<ma_spatializer_config>,
              ffi.Pointer<ffi.Size>)>(isLeaf: true);

  /// General Library Documentation Undocument By General Corporation & Global Corporation & General Developer
  int ma_spatializer_init_preallocated(
    ffi.Pointer<ma_spatializer_config> pConfig,
    ffi.Pointer<ffi.Void> pHeap,
    ffi.Pointer<ma_spatializer> pSpatializer,
  ) {
    return _ma_spatializer_init_preallocated(
      pConfig,
      pHeap,
      pSpatializer,
    );
  }

  late final _ma_spatializer_init_preallocatedPtr = _lookup<
          ffi.NativeFunction<
              ffi.Int32 Function(ffi.Pointer<ma_spatializer_config>,
                  ffi.Pointer<ffi.Void>, ffi.Pointer<ma_spatializer>)>>(
      'ma_spatializer_init_preallocated');
  late final _ma_spatializer_init_preallocated =
      _ma_spatializer_init_preallocatedPtr.asFunction<
          int Function(
              ffi.Pointer<ma_spatializer_config>,
              ffi.Pointer<ffi.Void>,
              ffi.Pointer<ma_spatializer>)>(isLeaf: true);

  /// General Library Documentation Undocument By General Corporation & Global Corporation & General Developer
  int ma_spatializer_init(
    ffi.Pointer<ma_spatializer_config> pConfig,
    ffi.Pointer<ma_allocation_callbacks> pAllocationCallbacks,
    ffi.Pointer<ma_spatializer> pSpatializer,
  ) {
    return _ma_spatializer_init(
      pConfig,
      pAllocationCallbacks,
      pSpatializer,
    );
  }

  late final _ma_spatializer_initPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int32 Function(
              ffi.Pointer<ma_spatializer_config>,
              ffi.Pointer<ma_allocation_callbacks>,
              ffi.Pointer<ma_spatializer>)>>('ma_spatializer_init');
  late final _ma_spatializer_init = _ma_spatializer_initPtr.asFunction<
      int Function(
          ffi.Pointer<ma_spatializer_config>,
          ffi.Pointer<ma_allocation_callbacks>,
          ffi.Pointer<ma_spatializer>)>(isLeaf: true);

  /// General Library Documentation Undocument By General Corporation & Global Corporation & General Developer
  void ma_spatializer_uninit(
    ffi.Pointer<ma_spatializer> pSpatializer,
    ffi.Pointer<ma_allocation_callbacks> pAllocationCallbacks,
  ) {
    return _ma_spatializer_uninit(
      pSpatializer,
      pAllocationCallbacks,
    );
  }

  late final _ma_spatializer_uninitPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Pointer<ma_spatializer>,
              ffi.Pointer<ma_allocation_callbacks>)>>('ma_spatializer_uninit');
  late final _ma_spatializer_uninit = _ma_spatializer_uninitPtr.asFunction<
      void Function(ffi.Pointer<ma_spatializer>,
          ffi.Pointer<ma_allocation_callbacks>)>(isLeaf: true);

  /// General Library Documentation Undocument By General Corporation & Global Corporation & General Developer
  int ma_spatializer_process_pcm_frames(
    ffi.Pointer<ma_spatializer> pSpatializer,
    ffi.Pointer<ma_spatializer_listener> pListener,
    ffi.Pointer<ffi.Void> pFramesOut,
    ffi.Pointer<ffi.Void> pFramesIn,
    int frameCount,
  ) {
    return _ma_spatializer_process_pcm_frames(
      pSpatializer,
      pListener,
      pFramesOut,
      pFramesIn,
      frameCount,
    );
  }

  late final _ma_spatializer_process_pcm_framesPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int32 Function(
              ffi.Pointer<ma_spatializer>,
              ffi.Pointer<ma_spatializer_listener>,
              ffi.Pointer<ffi.Void>,
              ffi.Pointer<ffi.Void>,
              ma_uint64)>>('ma_spatializer_process_pcm_frames');
  late final _ma_spatializer_process_pcm_frames =
      _ma_spatializer_process_pcm_framesPtr.asFunction<
          int Function(
              ffi.Pointer<ma_spatializer>,
              ffi.Pointer<ma_spatializer_listener>,
              ffi.Pointer<ffi.Void>,
              ffi.Pointer<ffi.Void>,
              int)>(isLeaf: true);

  /// General Library Documentation Undocument By General Corporation & Global Corporation & General Developer
  int ma_spatializer_set_master_volume(
    ffi.Pointer<ma_spatializer> pSpatializer,
    double volume,
  ) {
    return _ma_spatializer_set_master_volume(
      pSpatializer,
      volume,
    );
  }

  late final _ma_spatializer_set_master_volumePtr = _lookup<
      ffi.NativeFunction<
          ffi.Int32 Function(ffi.Pointer<ma_spatializer>,
              ffi.Float)>>('ma_spatializer_set_master_volume');
  late final _ma_spatializer_set_master_volume =
      _ma_spatializer_set_master_volumePtr
          .asFunction<int Function(ffi.Pointer<ma_spatializer>, double)>(
              isLeaf: true);

  /// General Library Documentation Undocument By General Corporation & Global Corporation & General Developer
  int ma_spatializer_get_master_volume(
    ffi.Pointer<ma_spatializer> pSpatializer,
    ffi.Pointer<ffi.Float> pVolume,
  ) {
    return _ma_spatializer_get_master_volume(
      pSpatializer,
      pVolume,
    );
  }

  late final _ma_spatializer_get_master_volumePtr = _lookup<
      ffi.NativeFunction<
          ffi.Int32 Function(ffi.Pointer<ma_spatializer>,
              ffi.Pointer<ffi.Float>)>>('ma_spatializer_get_master_volume');
  late final _ma_spatializer_get_master_volume =
      _ma_spatializer_get_master_volumePtr.asFunction<
          int Function(ffi.Pointer<ma_spatializer>,
              ffi.Pointer<ffi.Float>)>(isLeaf: true);

  /// General Library Documentation Undocument By General Corporation & Global Corporation & General Developer
  int ma_spatializer_get_input_channels(
    ffi.Pointer<ma_spatializer> pSpatializer,
  ) {
    return _ma_spatializer_get_input_channels(
      pSpatializer,
    );
  }

  late final _ma_spatializer_get_input_channelsPtr = _lookup<
          ffi.NativeFunction<ma_uint32 Function(ffi.Pointer<ma_spatializer>)>>(
      'ma_spatializer_get_input_channels');
  late final _ma_spatializer_get_input_channels =
      _ma_spatializer_get_input_channelsPtr
          .asFunction<int Function(ffi.Pointer<ma_spatializer>)>(isLeaf: true);

  /// General Library Documentation Undocument By General Corporation & Global Corporation & General Developer
  int ma_spatializer_get_output_channels(
    ffi.Pointer<ma_spatializer> pSpatializer,
  ) {
    return _ma_spatializer_get_output_channels(
      pSpatializer,
    );
  }

  late final _ma_spatializer_get_output_channelsPtr = _lookup<
          ffi.NativeFunction<ma_uint32 Function(ffi.Pointer<ma_spatializer>)>>(
      'ma_spatializer_get_output_channels');
  late final _ma_spatializer_get_output_channels =
      _ma_spatializer_get_output_channelsPtr
          .asFunction<int Function(ffi.Pointer<ma_spatializer>)>(isLeaf: true);

  /// General Library Documentation Undocument By General Corporation & Global Corporation & General Developer
  void ma_spatializer_set_attenuation_model(
    ffi.Pointer<ma_spatializer> pSpatializer,
    int attenuationModel,
  ) {
    return _ma_spatializer_set_attenuation_model(
      pSpatializer,
      attenuationModel,
    );
  }

  late final _ma_spatializer_set_attenuation_modelPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Pointer<ma_spatializer>,
              ffi.Int32)>>('ma_spatializer_set_attenuation_model');
  late final _ma_spatializer_set_attenuation_model =
      _ma_spatializer_set_attenuation_modelPtr
          .asFunction<void Function(ffi.Pointer<ma_spatializer>, int)>(
              isLeaf: true);

  /// General Library Documentation Undocument By General Corporation & Global Corporation & General Developer
  int ma_spatializer_get_attenuation_model(
    ffi.Pointer<ma_spatializer> pSpatializer,
  ) {
    return _ma_spatializer_get_attenuation_model(
      pSpatializer,
    );
  }

  late final _ma_spatializer_get_attenuation_modelPtr = _lookup<
          ffi.NativeFunction<ffi.Int32 Function(ffi.Pointer<ma_spatializer>)>>(
      'ma_spatializer_get_attenuation_model');
  late final _ma_spatializer_get_attenuation_model =
      _ma_spatializer_get_attenuation_modelPtr
          .asFunction<int Function(ffi.Pointer<ma_spatializer>)>(isLeaf: true);

  /// General Library Documentation Undocument By General Corporation & Global Corporation & General Developer
  void ma_spatializer_set_positioning(
    ffi.Pointer<ma_spatializer> pSpatializer,
    int positioning,
  ) {
    return _ma_spatializer_set_positioning(
      pSpatializer,
      positioning,
    );
  }

  late final _ma_spatializer_set_positioningPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Pointer<ma_spatializer>,
              ffi.Int32)>>('ma_spatializer_set_positioning');
  late final _ma_spatializer_set_positioning =
      _ma_spatializer_set_positioningPtr
          .asFunction<void Function(ffi.Pointer<ma_spatializer>, int)>(
              isLeaf: true);

  /// General Library Documentation Undocument By General Corporation & Global Corporation & General Developer
  int ma_spatializer_get_positioning(
    ffi.Pointer<ma_spatializer> pSpatializer,
  ) {
    return _ma_spatializer_get_positioning(
      pSpatializer,
    );
  }

  late final _ma_spatializer_get_positioningPtr = _lookup<
          ffi.NativeFunction<ffi.Int32 Function(ffi.Pointer<ma_spatializer>)>>(
      'ma_spatializer_get_positioning');
  late final _ma_spatializer_get_positioning =
      _ma_spatializer_get_positioningPtr
          .asFunction<int Function(ffi.Pointer<ma_spatializer>)>(isLeaf: true);

  /// General Library Documentation Undocument By General Corporation & Global Corporation & General Developer
  void ma_spatializer_set_rolloff(
    ffi.Pointer<ma_spatializer> pSpatializer,
    double rolloff,
  ) {
    return _ma_spatializer_set_rolloff(
      pSpatializer,
      rolloff,
    );
  }

  late final _ma_spatializer_set_rolloffPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Pointer<ma_spatializer>,
              ffi.Float)>>('ma_spatializer_set_rolloff');
  late final _ma_spatializer_set_rolloff = _ma_spatializer_set_rolloffPtr
      .asFunction<void Function(ffi.Pointer<ma_spatializer>, double)>(
          isLeaf: true);

  /// General Library Documentation Undocument By General Corporation & Global Corporation & General Developer
  double ma_spatializer_get_rolloff(
    ffi.Pointer<ma_spatializer> pSpatializer,
  ) {
    return _ma_spatializer_get_rolloff(
      pSpatializer,
    );
  }

  late final _ma_spatializer_get_rolloffPtr = _lookup<
          ffi.NativeFunction<ffi.Float Function(ffi.Pointer<ma_spatializer>)>>(
      'ma_spatializer_get_rolloff');
  late final _ma_spatializer_get_rolloff = _ma_spatializer_get_rolloffPtr
      .asFunction<double Function(ffi.Pointer<ma_spatializer>)>(isLeaf: true);

  /// General Library Documentation Undocument By General Corporation & Global Corporation & General Developer
  void ma_spatializer_set_min_gain(
    ffi.Pointer<ma_spatializer> pSpatializer,
    double minGain,
  ) {
    return _ma_spatializer_set_min_gain(
      pSpatializer,
      minGain,
    );
  }

  late final _ma_spatializer_set_min_gainPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Pointer<ma_spatializer>,
              ffi.Float)>>('ma_spatializer_set_min_gain');
  late final _ma_spatializer_set_min_gain = _ma_spatializer_set_min_gainPtr
      .asFunction<void Function(ffi.Pointer<ma_spatializer>, double)>(
          isLeaf: true);

  /// General Library Documentation Undocument By General Corporation & Global Corporation & General Developer
  double ma_spatializer_get_min_gain(
    ffi.Pointer<ma_spatializer> pSpatializer,
  ) {
    return _ma_spatializer_get_min_gain(
      pSpatializer,
    );
  }

  late final _ma_spatializer_get_min_gainPtr = _lookup<
          ffi.NativeFunction<ffi.Float Function(ffi.Pointer<ma_spatializer>)>>(
      'ma_spatializer_get_min_gain');
  late final _ma_spatializer_get_min_gain = _ma_spatializer_get_min_gainPtr
      .asFunction<double Function(ffi.Pointer<ma_spatializer>)>(isLeaf: true);

  /// General Library Documentation Undocument By General Corporation & Global Corporation & General Developer
  void ma_spatializer_set_max_gain(
    ffi.Pointer<ma_spatializer> pSpatializer,
    double maxGain,
  ) {
    return _ma_spatializer_set_max_gain(
      pSpatializer,
      maxGain,
    );
  }

  late final _ma_spatializer_set_max_gainPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Pointer<ma_spatializer>,
              ffi.Float)>>('ma_spatializer_set_max_gain');
  late final _ma_spatializer_set_max_gain = _ma_spatializer_set_max_gainPtr
      .asFunction<void Function(ffi.Pointer<ma_spatializer>, double)>(
          isLeaf: true);

  /// General Library Documentation Undocument By General Corporation & Global Corporation & General Developer
  double ma_spatializer_get_max_gain(
    ffi.Pointer<ma_spatializer> pSpatializer,
  ) {
    return _ma_spatializer_get_max_gain(
      pSpatializer,
    );
  }

  late final _ma_spatializer_get_max_gainPtr = _lookup<
          ffi.NativeFunction<ffi.Float Function(ffi.Pointer<ma_spatializer>)>>(
      'ma_spatializer_get_max_gain');
  late final _ma_spatializer_get_max_gain = _ma_spatializer_get_max_gainPtr
      .asFunction<double Function(ffi.Pointer<ma_spatializer>)>(isLeaf: true);

  /// General Library Documentation Undocument By General Corporation & Global Corporation & General Developer
  void ma_spatializer_set_min_distance(
    ffi.Pointer<ma_spatializer> pSpatializer,
    double minDistance,
  ) {
    return _ma_spatializer_set_min_distance(
      pSpatializer,
      minDistance,
    );
  }

  late final _ma_spatializer_set_min_distancePtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Pointer<ma_spatializer>,
              ffi.Float)>>('ma_spatializer_set_min_distance');
  late final _ma_spatializer_set_min_distance =
      _ma_spatializer_set_min_distancePtr
          .asFunction<void Function(ffi.Pointer<ma_spatializer>, double)>(
              isLeaf: true);

  /// General Library Documentation Undocument By General Corporation & Global Corporation & General Developer
  double ma_spatializer_get_min_distance(
    ffi.Pointer<ma_spatializer> pSpatializer,
  ) {
    return _ma_spatializer_get_min_distance(
      pSpatializer,
    );
  }

  late final _ma_spatializer_get_min_distancePtr = _lookup<
          ffi.NativeFunction<ffi.Float Function(ffi.Pointer<ma_spatializer>)>>(
      'ma_spatializer_get_min_distance');
  late final _ma_spatializer_get_min_distance =
      _ma_spatializer_get_min_distancePtr
          .asFunction<double Function(ffi.Pointer<ma_spatializer>)>(
              isLeaf: true);

  /// General Library Documentation Undocument By General Corporation & Global Corporation & General Developer
  void ma_spatializer_set_max_distance(
    ffi.Pointer<ma_spatializer> pSpatializer,
    double maxDistance,
  ) {
    return _ma_spatializer_set_max_distance(
      pSpatializer,
      maxDistance,
    );
  }

  late final _ma_spatializer_set_max_distancePtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Pointer<ma_spatializer>,
              ffi.Float)>>('ma_spatializer_set_max_distance');
  late final _ma_spatializer_set_max_distance =
      _ma_spatializer_set_max_distancePtr
          .asFunction<void Function(ffi.Pointer<ma_spatializer>, double)>(
              isLeaf: true);

  /// General Library Documentation Undocument By General Corporation & Global Corporation & General Developer
  double ma_spatializer_get_max_distance(
    ffi.Pointer<ma_spatializer> pSpatializer,
  ) {
    return _ma_spatializer_get_max_distance(
      pSpatializer,
    );
  }

  late final _ma_spatializer_get_max_distancePtr = _lookup<
          ffi.NativeFunction<ffi.Float Function(ffi.Pointer<ma_spatializer>)>>(
      'ma_spatializer_get_max_distance');
  late final _ma_spatializer_get_max_distance =
      _ma_spatializer_get_max_distancePtr
          .asFunction<double Function(ffi.Pointer<ma_spatializer>)>(
              isLeaf: true);

  /// General Library Documentation Undocument By General Corporation & Global Corporation & General Developer
  void ma_spatializer_set_cone(
    ffi.Pointer<ma_spatializer> pSpatializer,
    double innerAngleInRadians,
    double outerAngleInRadians,
    double outerGain,
  ) {
    return _ma_spatializer_set_cone(
      pSpatializer,
      innerAngleInRadians,
      outerAngleInRadians,
      outerGain,
    );
  }

  late final _ma_spatializer_set_conePtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Pointer<ma_spatializer>, ffi.Float, ffi.Float,
              ffi.Float)>>('ma_spatializer_set_cone');
  late final _ma_spatializer_set_cone = _ma_spatializer_set_conePtr.asFunction<
      void Function(
          ffi.Pointer<ma_spatializer>, double, double, double)>(isLeaf: true);

  /// General Library Documentation Undocument By General Corporation & Global Corporation & General Developer
  void ma_spatializer_get_cone(
    ffi.Pointer<ma_spatializer> pSpatializer,
    ffi.Pointer<ffi.Float> pInnerAngleInRadians,
    ffi.Pointer<ffi.Float> pOuterAngleInRadians,
    ffi.Pointer<ffi.Float> pOuterGain,
  ) {
    return _ma_spatializer_get_cone(
      pSpatializer,
      pInnerAngleInRadians,
      pOuterAngleInRadians,
      pOuterGain,
    );
  }

  late final _ma_spatializer_get_conePtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(
              ffi.Pointer<ma_spatializer>,
              ffi.Pointer<ffi.Float>,
              ffi.Pointer<ffi.Float>,
              ffi.Pointer<ffi.Float>)>>('ma_spatializer_get_cone');
  late final _ma_spatializer_get_cone = _ma_spatializer_get_conePtr.asFunction<
      void Function(ffi.Pointer<ma_spatializer>, ffi.Pointer<ffi.Float>,
          ffi.Pointer<ffi.Float>, ffi.Pointer<ffi.Float>)>(isLeaf: true);

  /// General Library Documentation Undocument By General Corporation & Global Corporation & General Developer
  void ma_spatializer_set_doppler_factor(
    ffi.Pointer<ma_spatializer> pSpatializer,
    double dopplerFactor,
  ) {
    return _ma_spatializer_set_doppler_factor(
      pSpatializer,
      dopplerFactor,
    );
  }

  late final _ma_spatializer_set_doppler_factorPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Pointer<ma_spatializer>,
              ffi.Float)>>('ma_spatializer_set_doppler_factor');
  late final _ma_spatializer_set_doppler_factor =
      _ma_spatializer_set_doppler_factorPtr
          .asFunction<void Function(ffi.Pointer<ma_spatializer>, double)>(
              isLeaf: true);

  /// General Library Documentation Undocument By General Corporation & Global Corporation & General Developer
  double ma_spatializer_get_doppler_factor(
    ffi.Pointer<ma_spatializer> pSpatializer,
  ) {
    return _ma_spatializer_get_doppler_factor(
      pSpatializer,
    );
  }

  late final _ma_spatializer_get_doppler_factorPtr = _lookup<
          ffi.NativeFunction<ffi.Float Function(ffi.Pointer<ma_spatializer>)>>(
      'ma_spatializer_get_doppler_factor');
  late final _ma_spatializer_get_doppler_factor =
      _ma_spatializer_get_doppler_factorPtr
          .asFunction<double Function(ffi.Pointer<ma_spatializer>)>(
              isLeaf: true);

  /// General Library Documentation Undocument By General Corporation & Global Corporation & General Developer
  void ma_spatializer_set_directional_attenuation_factor(
    ffi.Pointer<ma_spatializer> pSpatializer,
    double directionalAttenuationFactor,
  ) {
    return _ma_spatializer_set_directional_attenuation_factor(
      pSpatializer,
      directionalAttenuationFactor,
    );
  }

  late final _ma_spatializer_set_directional_attenuation_factorPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Pointer<ma_spatializer>,
              ffi.Float)>>('ma_spatializer_set_directional_attenuation_factor');
  late final _ma_spatializer_set_directional_attenuation_factor =
      _ma_spatializer_set_directional_attenuation_factorPtr
          .asFunction<void Function(ffi.Pointer<ma_spatializer>, double)>(
              isLeaf: true);

  /// General Library Documentation Undocument By General Corporation & Global Corporation & General Developer
  double ma_spatializer_get_directional_attenuation_factor(
    ffi.Pointer<ma_spatializer> pSpatializer,
  ) {
    return _ma_spatializer_get_directional_attenuation_factor(
      pSpatializer,
    );
  }

  late final _ma_spatializer_get_directional_attenuation_factorPtr = _lookup<
          ffi.NativeFunction<ffi.Float Function(ffi.Pointer<ma_spatializer>)>>(
      'ma_spatializer_get_directional_attenuation_factor');
  late final _ma_spatializer_get_directional_attenuation_factor =
      _ma_spatializer_get_directional_attenuation_factorPtr
          .asFunction<double Function(ffi.Pointer<ma_spatializer>)>(
              isLeaf: true);

  /// General Library Documentation Undocument By General Corporation & Global Corporation & General Developer
  void ma_spatializer_set_position(
    ffi.Pointer<ma_spatializer> pSpatializer,
    double x,
    double y,
    double z,
  ) {
    return _ma_spatializer_set_position(
      pSpatializer,
      x,
      y,
      z,
    );
  }

  late final _ma_spatializer_set_positionPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Pointer<ma_spatializer>, ffi.Float, ffi.Float,
              ffi.Float)>>('ma_spatializer_set_position');
  late final _ma_spatializer_set_position =
      _ma_spatializer_set_positionPtr.asFunction<
          void Function(ffi.Pointer<ma_spatializer>, double, double,
              double)>(isLeaf: true);

  /// General Library Documentation Undocument By General Corporation & Global Corporation & General Developer
  ma_vec3f ma_spatializer_get_position(
    ffi.Pointer<ma_spatializer> pSpatializer,
  ) {
    return _ma_spatializer_get_position(
      pSpatializer,
    );
  }

  late final _ma_spatializer_get_positionPtr = _lookup<
          ffi.NativeFunction<ma_vec3f Function(ffi.Pointer<ma_spatializer>)>>(
      'ma_spatializer_get_position');
  late final _ma_spatializer_get_position = _ma_spatializer_get_positionPtr
      .asFunction<ma_vec3f Function(ffi.Pointer<ma_spatializer>)>(isLeaf: true);

  /// General Library Documentation Undocument By General Corporation & Global Corporation & General Developer
  void ma_spatializer_set_direction(
    ffi.Pointer<ma_spatializer> pSpatializer,
    double x,
    double y,
    double z,
  ) {
    return _ma_spatializer_set_direction(
      pSpatializer,
      x,
      y,
      z,
    );
  }

  late final _ma_spatializer_set_directionPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Pointer<ma_spatializer>, ffi.Float, ffi.Float,
              ffi.Float)>>('ma_spatializer_set_direction');
  late final _ma_spatializer_set_direction =
      _ma_spatializer_set_directionPtr.asFunction<
          void Function(ffi.Pointer<ma_spatializer>, double, double,
              double)>(isLeaf: true);

  /// General Library Documentation Undocument By General Corporation & Global Corporation & General Developer
  ma_vec3f ma_spatializer_get_direction(
    ffi.Pointer<ma_spatializer> pSpatializer,
  ) {
    return _ma_spatializer_get_direction(
      pSpatializer,
    );
  }

  late final _ma_spatializer_get_directionPtr = _lookup<
          ffi.NativeFunction<ma_vec3f Function(ffi.Pointer<ma_spatializer>)>>(
      'ma_spatializer_get_direction');
  late final _ma_spatializer_get_direction = _ma_spatializer_get_directionPtr
      .asFunction<ma_vec3f Function(ffi.Pointer<ma_spatializer>)>(isLeaf: true);

  /// General Library Documentation Undocument By General Corporation & Global Corporation & General Developer
  void ma_spatializer_set_velocity(
    ffi.Pointer<ma_spatializer> pSpatializer,
    double x,
    double y,
    double z,
  ) {
    return _ma_spatializer_set_velocity(
      pSpatializer,
      x,
      y,
      z,
    );
  }

  late final _ma_spatializer_set_velocityPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Pointer<ma_spatializer>, ffi.Float, ffi.Float,
              ffi.Float)>>('ma_spatializer_set_velocity');
  late final _ma_spatializer_set_velocity =
      _ma_spatializer_set_velocityPtr.asFunction<
          void Function(ffi.Pointer<ma_spatializer>, double, double,
              double)>(isLeaf: true);

  /// General Library Documentation Undocument By General Corporation & Global Corporation & General Developer
  ma_vec3f ma_spatializer_get_velocity(
    ffi.Pointer<ma_spatializer> pSpatializer,
  ) {
    return _ma_spatializer_get_velocity(
      pSpatializer,
    );
  }

  late final _ma_spatializer_get_velocityPtr = _lookup<
          ffi.NativeFunction<ma_vec3f Function(ffi.Pointer<ma_spatializer>)>>(
      'ma_spatializer_get_velocity');
  late final _ma_spatializer_get_velocity = _ma_spatializer_get_velocityPtr
      .asFunction<ma_vec3f Function(ffi.Pointer<ma_spatializer>)>(isLeaf: true);

  /// General Library Documentation Undocument By General Corporation & Global Corporation & General Developer
  void ma_spatializer_get_relative_position_and_direction(
    ffi.Pointer<ma_spatializer> pSpatializer,
    ffi.Pointer<ma_spatializer_listener> pListener,
    ffi.Pointer<ma_vec3f> pRelativePos,
    ffi.Pointer<ma_vec3f> pRelativeDir,
  ) {
    return _ma_spatializer_get_relative_position_and_direction(
      pSpatializer,
      pListener,
      pRelativePos,
      pRelativeDir,
    );
  }

  late final _ma_spatializer_get_relative_position_and_directionPtr = _lookup<
          ffi.NativeFunction<
              ffi.Void Function(
                  ffi.Pointer<ma_spatializer>,
                  ffi.Pointer<ma_spatializer_listener>,
                  ffi.Pointer<ma_vec3f>,
                  ffi.Pointer<ma_vec3f>)>>(
      'ma_spatializer_get_relative_position_and_direction');
  late final _ma_spatializer_get_relative_position_and_direction =
      _ma_spatializer_get_relative_position_and_directionPtr.asFunction<
          void Function(
              ffi.Pointer<ma_spatializer>,
              ffi.Pointer<ma_spatializer_listener>,
              ffi.Pointer<ma_vec3f>,
              ffi.Pointer<ma_vec3f>)>(isLeaf: true);

  /// General Library Documentation Undocument By General Corporation & Global Corporation & General Developer
  ma_linear_resampler_config ma_linear_resampler_config_init(
    int format,
    int channels,
    int sampleRateIn,
    int sampleRateOut,
  ) {
    return _ma_linear_resampler_config_init(
      format,
      channels,
      sampleRateIn,
      sampleRateOut,
    );
  }

  late final _ma_linear_resampler_config_initPtr = _lookup<
      ffi.NativeFunction<
          ma_linear_resampler_config Function(ffi.Int32, ma_uint32, ma_uint32,
              ma_uint32)>>('ma_linear_resampler_config_init');
  late final _ma_linear_resampler_config_init =
      _ma_linear_resampler_config_initPtr
          .asFunction<ma_linear_resampler_config Function(int, int, int, int)>(
              isLeaf: true);

  /// General Library Documentation Undocument By General Corporation & Global Corporation & General Developer
  int ma_linear_resampler_get_heap_size(
    ffi.Pointer<ma_linear_resampler_config> pConfig,
    ffi.Pointer<ffi.Size> pHeapSizeInBytes,
  ) {
    return _ma_linear_resampler_get_heap_size(
      pConfig,
      pHeapSizeInBytes,
    );
  }

  late final _ma_linear_resampler_get_heap_sizePtr = _lookup<
      ffi.NativeFunction<
          ffi.Int32 Function(ffi.Pointer<ma_linear_resampler_config>,
              ffi.Pointer<ffi.Size>)>>('ma_linear_resampler_get_heap_size');
  late final _ma_linear_resampler_get_heap_size =
      _ma_linear_resampler_get_heap_sizePtr.asFunction<
          int Function(ffi.Pointer<ma_linear_resampler_config>,
              ffi.Pointer<ffi.Size>)>(isLeaf: true);

  /// General Library Documentation Undocument By General Corporation & Global Corporation & General Developer
  int ma_linear_resampler_init_preallocated(
    ffi.Pointer<ma_linear_resampler_config> pConfig,
    ffi.Pointer<ffi.Void> pHeap,
    ffi.Pointer<ma_linear_resampler> pResampler,
  ) {
    return _ma_linear_resampler_init_preallocated(
      pConfig,
      pHeap,
      pResampler,
    );
  }

  late final _ma_linear_resampler_init_preallocatedPtr = _lookup<
          ffi.NativeFunction<
              ffi.Int32 Function(ffi.Pointer<ma_linear_resampler_config>,
                  ffi.Pointer<ffi.Void>, ffi.Pointer<ma_linear_resampler>)>>(
      'ma_linear_resampler_init_preallocated');
  late final _ma_linear_resampler_init_preallocated =
      _ma_linear_resampler_init_preallocatedPtr.asFunction<
          int Function(
              ffi.Pointer<ma_linear_resampler_config>,
              ffi.Pointer<ffi.Void>,
              ffi.Pointer<ma_linear_resampler>)>(isLeaf: true);

  /// General Library Documentation Undocument By General Corporation & Global Corporation & General Developer
  int ma_linear_resampler_init(
    ffi.Pointer<ma_linear_resampler_config> pConfig,
    ffi.Pointer<ma_allocation_callbacks> pAllocationCallbacks,
    ffi.Pointer<ma_linear_resampler> pResampler,
  ) {
    return _ma_linear_resampler_init(
      pConfig,
      pAllocationCallbacks,
      pResampler,
    );
  }

  late final _ma_linear_resampler_initPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int32 Function(
              ffi.Pointer<ma_linear_resampler_config>,
              ffi.Pointer<ma_allocation_callbacks>,
              ffi.Pointer<ma_linear_resampler>)>>('ma_linear_resampler_init');
  late final _ma_linear_resampler_init =
      _ma_linear_resampler_initPtr.asFunction<
          int Function(
              ffi.Pointer<ma_linear_resampler_config>,
              ffi.Pointer<ma_allocation_callbacks>,
              ffi.Pointer<ma_linear_resampler>)>(isLeaf: true);

  /// General Library Documentation Undocument By General Corporation & Global Corporation & General Developer
  void ma_linear_resampler_uninit(
    ffi.Pointer<ma_linear_resampler> pResampler,
    ffi.Pointer<ma_allocation_callbacks> pAllocationCallbacks,
  ) {
    return _ma_linear_resampler_uninit(
      pResampler,
      pAllocationCallbacks,
    );
  }

  late final _ma_linear_resampler_uninitPtr = _lookup<
          ffi.NativeFunction<
              ffi.Void Function(ffi.Pointer<ma_linear_resampler>,
                  ffi.Pointer<ma_allocation_callbacks>)>>(
      'ma_linear_resampler_uninit');
  late final _ma_linear_resampler_uninit =
      _ma_linear_resampler_uninitPtr.asFunction<
          void Function(ffi.Pointer<ma_linear_resampler>,
              ffi.Pointer<ma_allocation_callbacks>)>(isLeaf: true);

  /// General Library Documentation Undocument By General Corporation & Global Corporation & General Developer
  int ma_linear_resampler_process_pcm_frames(
    ffi.Pointer<ma_linear_resampler> pResampler,
    ffi.Pointer<ffi.Void> pFramesIn,
    ffi.Pointer<ma_uint64> pFrameCountIn,
    ffi.Pointer<ffi.Void> pFramesOut,
    ffi.Pointer<ma_uint64> pFrameCountOut,
  ) {
    return _ma_linear_resampler_process_pcm_frames(
      pResampler,
      pFramesIn,
      pFrameCountIn,
      pFramesOut,
      pFrameCountOut,
    );
  }

  late final _ma_linear_resampler_process_pcm_framesPtr = _lookup<
          ffi.NativeFunction<
              ffi.Int32 Function(
                  ffi.Pointer<ma_linear_resampler>,
                  ffi.Pointer<ffi.Void>,
                  ffi.Pointer<ma_uint64>,
                  ffi.Pointer<ffi.Void>,
                  ffi.Pointer<ma_uint64>)>>(
      'ma_linear_resampler_process_pcm_frames');
  late final _ma_linear_resampler_process_pcm_frames =
      _ma_linear_resampler_process_pcm_framesPtr.asFunction<
          int Function(
              ffi.Pointer<ma_linear_resampler>,
              ffi.Pointer<ffi.Void>,
              ffi.Pointer<ma_uint64>,
              ffi.Pointer<ffi.Void>,
              ffi.Pointer<ma_uint64>)>(isLeaf: true);

  /// General Library Documentation Undocument By General Corporation & Global Corporation & General Developer
  int ma_linear_resampler_set_rate(
    ffi.Pointer<ma_linear_resampler> pResampler,
    int sampleRateIn,
    int sampleRateOut,
  ) {
    return _ma_linear_resampler_set_rate(
      pResampler,
      sampleRateIn,
      sampleRateOut,
    );
  }

  late final _ma_linear_resampler_set_ratePtr = _lookup<
      ffi.NativeFunction<
          ffi.Int32 Function(ffi.Pointer<ma_linear_resampler>, ma_uint32,
              ma_uint32)>>('ma_linear_resampler_set_rate');
  late final _ma_linear_resampler_set_rate = _ma_linear_resampler_set_ratePtr
      .asFunction<int Function(ffi.Pointer<ma_linear_resampler>, int, int)>(
          isLeaf: true);

  /// General Library Documentation Undocument By General Corporation & Global Corporation & General Developer
  int ma_linear_resampler_set_rate_ratio(
    ffi.Pointer<ma_linear_resampler> pResampler,
    double ratioInOut,
  ) {
    return _ma_linear_resampler_set_rate_ratio(
      pResampler,
      ratioInOut,
    );
  }

  late final _ma_linear_resampler_set_rate_ratioPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int32 Function(ffi.Pointer<ma_linear_resampler>,
              ffi.Float)>>('ma_linear_resampler_set_rate_ratio');
  late final _ma_linear_resampler_set_rate_ratio =
      _ma_linear_resampler_set_rate_ratioPtr
          .asFunction<int Function(ffi.Pointer<ma_linear_resampler>, double)>(
              isLeaf: true);

  /// General Library Documentation Undocument By General Corporation & Global Corporation & General Developer
  int ma_linear_resampler_get_input_latency(
    ffi.Pointer<ma_linear_resampler> pResampler,
  ) {
    return _ma_linear_resampler_get_input_latency(
      pResampler,
    );
  }

  late final _ma_linear_resampler_get_input_latencyPtr = _lookup<
          ffi.NativeFunction<
              ma_uint64 Function(ffi.Pointer<ma_linear_resampler>)>>(
      'ma_linear_resampler_get_input_latency');
  late final _ma_linear_resampler_get_input_latency =
      _ma_linear_resampler_get_input_latencyPtr
          .asFunction<int Function(ffi.Pointer<ma_linear_resampler>)>(
              isLeaf: true);

  /// General Library Documentation Undocument By General Corporation & Global Corporation & General Developer
  int ma_linear_resampler_get_output_latency(
    ffi.Pointer<ma_linear_resampler> pResampler,
  ) {
    return _ma_linear_resampler_get_output_latency(
      pResampler,
    );
  }

  late final _ma_linear_resampler_get_output_latencyPtr = _lookup<
          ffi.NativeFunction<
              ma_uint64 Function(ffi.Pointer<ma_linear_resampler>)>>(
      'ma_linear_resampler_get_output_latency');
  late final _ma_linear_resampler_get_output_latency =
      _ma_linear_resampler_get_output_latencyPtr
          .asFunction<int Function(ffi.Pointer<ma_linear_resampler>)>(
              isLeaf: true);

  /// General Library Documentation Undocument By General Corporation & Global Corporation & General Developer
  int ma_linear_resampler_get_required_input_frame_count(
    ffi.Pointer<ma_linear_resampler> pResampler,
    int outputFrameCount,
    ffi.Pointer<ma_uint64> pInputFrameCount,
  ) {
    return _ma_linear_resampler_get_required_input_frame_count(
      pResampler,
      outputFrameCount,
      pInputFrameCount,
    );
  }

  late final _ma_linear_resampler_get_required_input_frame_countPtr = _lookup<
          ffi.NativeFunction<
              ffi.Int32 Function(ffi.Pointer<ma_linear_resampler>, ma_uint64,
                  ffi.Pointer<ma_uint64>)>>(
      'ma_linear_resampler_get_required_input_frame_count');
  late final _ma_linear_resampler_get_required_input_frame_count =
      _ma_linear_resampler_get_required_input_frame_countPtr.asFunction<
          int Function(ffi.Pointer<ma_linear_resampler>, int,
              ffi.Pointer<ma_uint64>)>(isLeaf: true);

  /// General Library Documentation Undocument By General Corporation & Global Corporation & General Developer
  int ma_linear_resampler_get_expected_output_frame_count(
    ffi.Pointer<ma_linear_resampler> pResampler,
    int inputFrameCount,
    ffi.Pointer<ma_uint64> pOutputFrameCount,
  ) {
    return _ma_linear_resampler_get_expected_output_frame_count(
      pResampler,
      inputFrameCount,
      pOutputFrameCount,
    );
  }

  late final _ma_linear_resampler_get_expected_output_frame_countPtr = _lookup<
          ffi.NativeFunction<
              ffi.Int32 Function(ffi.Pointer<ma_linear_resampler>, ma_uint64,
                  ffi.Pointer<ma_uint64>)>>(
      'ma_linear_resampler_get_expected_output_frame_count');
  late final _ma_linear_resampler_get_expected_output_frame_count =
      _ma_linear_resampler_get_expected_output_frame_countPtr.asFunction<
          int Function(ffi.Pointer<ma_linear_resampler>, int,
              ffi.Pointer<ma_uint64>)>(isLeaf: true);

  /// General Library Documentation Undocument By General Corporation & Global Corporation & General Developer
  int ma_linear_resampler_reset(
    ffi.Pointer<ma_linear_resampler> pResampler,
  ) {
    return _ma_linear_resampler_reset(
      pResampler,
    );
  }

  late final _ma_linear_resampler_resetPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int32 Function(
              ffi.Pointer<ma_linear_resampler>)>>('ma_linear_resampler_reset');
  late final _ma_linear_resampler_reset = _ma_linear_resampler_resetPtr
      .asFunction<int Function(ffi.Pointer<ma_linear_resampler>)>(isLeaf: true);

  /// General Library Documentation Undocument By General Corporation & Global Corporation & General Developer
  ma_resampler_config ma_resampler_config_init(
    int format,
    int channels,
    int sampleRateIn,
    int sampleRateOut,
    int algorithm,
  ) {
    return _ma_resampler_config_init(
      format,
      channels,
      sampleRateIn,
      sampleRateOut,
      algorithm,
    );
  }

  late final _ma_resampler_config_initPtr = _lookup<
      ffi.NativeFunction<
          ma_resampler_config Function(ffi.Int32, ma_uint32, ma_uint32,
              ma_uint32, ffi.Int32)>>('ma_resampler_config_init');
  late final _ma_resampler_config_init = _ma_resampler_config_initPtr
      .asFunction<ma_resampler_config Function(int, int, int, int, int)>(
          isLeaf: true);

  /// General Library Documentation Undocument By General Corporation & Global Corporation & General Developer
  int ma_resampler_get_heap_size(
    ffi.Pointer<ma_resampler_config> pConfig,
    ffi.Pointer<ffi.Size> pHeapSizeInBytes,
  ) {
    return _ma_resampler_get_heap_size(
      pConfig,
      pHeapSizeInBytes,
    );
  }

  late final _ma_resampler_get_heap_sizePtr = _lookup<
      ffi.NativeFunction<
          ffi.Int32 Function(ffi.Pointer<ma_resampler_config>,
              ffi.Pointer<ffi.Size>)>>('ma_resampler_get_heap_size');
  late final _ma_resampler_get_heap_size =
      _ma_resampler_get_heap_sizePtr.asFunction<
          int Function(ffi.Pointer<ma_resampler_config>,
              ffi.Pointer<ffi.Size>)>(isLeaf: true);

  /// General Library Documentation Undocument By General Corporation & Global Corporation & General Developer
  int ma_resampler_init_preallocated(
    ffi.Pointer<ma_resampler_config> pConfig,
    ffi.Pointer<ffi.Void> pHeap,
    ffi.Pointer<ma_resampler> pResampler,
  ) {
    return _ma_resampler_init_preallocated(
      pConfig,
      pHeap,
      pResampler,
    );
  }

  late final _ma_resampler_init_preallocatedPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int32 Function(
              ffi.Pointer<ma_resampler_config>,
              ffi.Pointer<ffi.Void>,
              ffi.Pointer<ma_resampler>)>>('ma_resampler_init_preallocated');
  late final _ma_resampler_init_preallocated =
      _ma_resampler_init_preallocatedPtr.asFunction<
          int Function(ffi.Pointer<ma_resampler_config>, ffi.Pointer<ffi.Void>,
              ffi.Pointer<ma_resampler>)>(isLeaf: true);

  /// General Library Documentation Undocument By General Corporation & Global Corporation & General Developer
  int ma_resampler_init(
    ffi.Pointer<ma_resampler_config> pConfig,
    ffi.Pointer<ma_allocation_callbacks> pAllocationCallbacks,
    ffi.Pointer<ma_resampler> pResampler,
  ) {
    return _ma_resampler_init(
      pConfig,
      pAllocationCallbacks,
      pResampler,
    );
  }

  late final _ma_resampler_initPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int32 Function(
              ffi.Pointer<ma_resampler_config>,
              ffi.Pointer<ma_allocation_callbacks>,
              ffi.Pointer<ma_resampler>)>>('ma_resampler_init');
  late final _ma_resampler_init = _ma_resampler_initPtr.asFunction<
      int Function(
          ffi.Pointer<ma_resampler_config>,
          ffi.Pointer<ma_allocation_callbacks>,
          ffi.Pointer<ma_resampler>)>(isLeaf: true);

  /// General Library Documentation Undocument By General Corporation & Global Corporation & General Developer
  void ma_resampler_uninit(
    ffi.Pointer<ma_resampler> pResampler,
    ffi.Pointer<ma_allocation_callbacks> pAllocationCallbacks,
  ) {
    return _ma_resampler_uninit(
      pResampler,
      pAllocationCallbacks,
    );
  }

  late final _ma_resampler_uninitPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Pointer<ma_resampler>,
              ffi.Pointer<ma_allocation_callbacks>)>>('ma_resampler_uninit');
  late final _ma_resampler_uninit = _ma_resampler_uninitPtr.asFunction<
      void Function(ffi.Pointer<ma_resampler>,
          ffi.Pointer<ma_allocation_callbacks>)>(isLeaf: true);

  /// General Library Documentation Undocument By General Corporation & Global Corporation & General Developer
  int ma_resampler_process_pcm_frames(
    ffi.Pointer<ma_resampler> pResampler,
    ffi.Pointer<ffi.Void> pFramesIn,
    ffi.Pointer<ma_uint64> pFrameCountIn,
    ffi.Pointer<ffi.Void> pFramesOut,
    ffi.Pointer<ma_uint64> pFrameCountOut,
  ) {
    return _ma_resampler_process_pcm_frames(
      pResampler,
      pFramesIn,
      pFrameCountIn,
      pFramesOut,
      pFrameCountOut,
    );
  }

  late final _ma_resampler_process_pcm_framesPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int32 Function(
              ffi.Pointer<ma_resampler>,
              ffi.Pointer<ffi.Void>,
              ffi.Pointer<ma_uint64>,
              ffi.Pointer<ffi.Void>,
              ffi.Pointer<ma_uint64>)>>('ma_resampler_process_pcm_frames');
  late final _ma_resampler_process_pcm_frames =
      _ma_resampler_process_pcm_framesPtr.asFunction<
          int Function(
              ffi.Pointer<ma_resampler>,
              ffi.Pointer<ffi.Void>,
              ffi.Pointer<ma_uint64>,
              ffi.Pointer<ffi.Void>,
              ffi.Pointer<ma_uint64>)>(isLeaf: true);

  /// General Library Documentation Undocument By General Corporation & Global Corporation & General Developer
  int ma_resampler_set_rate(
    ffi.Pointer<ma_resampler> pResampler,
    int sampleRateIn,
    int sampleRateOut,
  ) {
    return _ma_resampler_set_rate(
      pResampler,
      sampleRateIn,
      sampleRateOut,
    );
  }

  late final _ma_resampler_set_ratePtr = _lookup<
      ffi.NativeFunction<
          ffi.Int32 Function(ffi.Pointer<ma_resampler>, ma_uint32,
              ma_uint32)>>('ma_resampler_set_rate');
  late final _ma_resampler_set_rate = _ma_resampler_set_ratePtr
      .asFunction<int Function(ffi.Pointer<ma_resampler>, int, int)>(
          isLeaf: true);

  /// General Library Documentation Undocument By General Corporation & Global Corporation & General Developer
  int ma_resampler_set_rate_ratio(
    ffi.Pointer<ma_resampler> pResampler,
    double ratio,
  ) {
    return _ma_resampler_set_rate_ratio(
      pResampler,
      ratio,
    );
  }

  late final _ma_resampler_set_rate_ratioPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int32 Function(ffi.Pointer<ma_resampler>,
              ffi.Float)>>('ma_resampler_set_rate_ratio');
  late final _ma_resampler_set_rate_ratio = _ma_resampler_set_rate_ratioPtr
      .asFunction<int Function(ffi.Pointer<ma_resampler>, double)>(
          isLeaf: true);

  /// General Library Documentation Undocument By General Corporation & Global Corporation & General Developer
  int ma_resampler_get_input_latency(
    ffi.Pointer<ma_resampler> pResampler,
  ) {
    return _ma_resampler_get_input_latency(
      pResampler,
    );
  }

  late final _ma_resampler_get_input_latencyPtr = _lookup<
          ffi.NativeFunction<ma_uint64 Function(ffi.Pointer<ma_resampler>)>>(
      'ma_resampler_get_input_latency');
  late final _ma_resampler_get_input_latency =
      _ma_resampler_get_input_latencyPtr
          .asFunction<int Function(ffi.Pointer<ma_resampler>)>(isLeaf: true);

  /// General Library Documentation Undocument By General Corporation & Global Corporation & General Developer
  int ma_resampler_get_output_latency(
    ffi.Pointer<ma_resampler> pResampler,
  ) {
    return _ma_resampler_get_output_latency(
      pResampler,
    );
  }

  late final _ma_resampler_get_output_latencyPtr = _lookup<
          ffi.NativeFunction<ma_uint64 Function(ffi.Pointer<ma_resampler>)>>(
      'ma_resampler_get_output_latency');
  late final _ma_resampler_get_output_latency =
      _ma_resampler_get_output_latencyPtr
          .asFunction<int Function(ffi.Pointer<ma_resampler>)>(isLeaf: true);

  /// General Library Documentation Undocument By General Corporation & Global Corporation & General Developer
  int ma_resampler_get_required_input_frame_count(
    ffi.Pointer<ma_resampler> pResampler,
    int outputFrameCount,
    ffi.Pointer<ma_uint64> pInputFrameCount,
  ) {
    return _ma_resampler_get_required_input_frame_count(
      pResampler,
      outputFrameCount,
      pInputFrameCount,
    );
  }

  late final _ma_resampler_get_required_input_frame_countPtr = _lookup<
          ffi.NativeFunction<
              ffi.Int32 Function(ffi.Pointer<ma_resampler>, ma_uint64,
                  ffi.Pointer<ma_uint64>)>>(
      'ma_resampler_get_required_input_frame_count');
  late final _ma_resampler_get_required_input_frame_count =
      _ma_resampler_get_required_input_frame_countPtr.asFunction<
          int Function(ffi.Pointer<ma_resampler>, int,
              ffi.Pointer<ma_uint64>)>(isLeaf: true);

  /// General Library Documentation Undocument By General Corporation & Global Corporation & General Developer
  int ma_resampler_get_expected_output_frame_count(
    ffi.Pointer<ma_resampler> pResampler,
    int inputFrameCount,
    ffi.Pointer<ma_uint64> pOutputFrameCount,
  ) {
    return _ma_resampler_get_expected_output_frame_count(
      pResampler,
      inputFrameCount,
      pOutputFrameCount,
    );
  }

  late final _ma_resampler_get_expected_output_frame_countPtr = _lookup<
          ffi.NativeFunction<
              ffi.Int32 Function(ffi.Pointer<ma_resampler>, ma_uint64,
                  ffi.Pointer<ma_uint64>)>>(
      'ma_resampler_get_expected_output_frame_count');
  late final _ma_resampler_get_expected_output_frame_count =
      _ma_resampler_get_expected_output_frame_countPtr.asFunction<
          int Function(ffi.Pointer<ma_resampler>, int,
              ffi.Pointer<ma_uint64>)>(isLeaf: true);

  /// General Library Documentation Undocument By General Corporation & Global Corporation & General Developer
  int ma_resampler_reset(
    ffi.Pointer<ma_resampler> pResampler,
  ) {
    return _ma_resampler_reset(
      pResampler,
    );
  }

  late final _ma_resampler_resetPtr = _lookup<
          ffi.NativeFunction<ffi.Int32 Function(ffi.Pointer<ma_resampler>)>>(
      'ma_resampler_reset');
  late final _ma_resampler_reset = _ma_resampler_resetPtr
      .asFunction<int Function(ffi.Pointer<ma_resampler>)>(isLeaf: true);

  /// General Library Documentation Undocument By General Corporation & Global Corporation & General Developer
  ma_channel_converter_config ma_channel_converter_config_init(
    int format,
    int channelsIn,
    ffi.Pointer<ma_channel> pChannelMapIn,
    int channelsOut,
    ffi.Pointer<ma_channel> pChannelMapOut,
    int mixingMode,
  ) {
    return _ma_channel_converter_config_init(
      format,
      channelsIn,
      pChannelMapIn,
      channelsOut,
      pChannelMapOut,
      mixingMode,
    );
  }

  late final _ma_channel_converter_config_initPtr = _lookup<
      ffi.NativeFunction<
          ma_channel_converter_config Function(
              ffi.Int32,
              ma_uint32,
              ffi.Pointer<ma_channel>,
              ma_uint32,
              ffi.Pointer<ma_channel>,
              ffi.Int32)>>('ma_channel_converter_config_init');
  late final _ma_channel_converter_config_init =
      _ma_channel_converter_config_initPtr.asFunction<
          ma_channel_converter_config Function(
              int,
              int,
              ffi.Pointer<ma_channel>,
              int,
              ffi.Pointer<ma_channel>,
              int)>(isLeaf: true);

  /// General Library Documentation Undocument By General Corporation & Global Corporation & General Developer
  int ma_channel_converter_get_heap_size(
    ffi.Pointer<ma_channel_converter_config> pConfig,
    ffi.Pointer<ffi.Size> pHeapSizeInBytes,
  ) {
    return _ma_channel_converter_get_heap_size(
      pConfig,
      pHeapSizeInBytes,
    );
  }

  late final _ma_channel_converter_get_heap_sizePtr = _lookup<
      ffi.NativeFunction<
          ffi.Int32 Function(ffi.Pointer<ma_channel_converter_config>,
              ffi.Pointer<ffi.Size>)>>('ma_channel_converter_get_heap_size');
  late final _ma_channel_converter_get_heap_size =
      _ma_channel_converter_get_heap_sizePtr.asFunction<
          int Function(ffi.Pointer<ma_channel_converter_config>,
              ffi.Pointer<ffi.Size>)>(isLeaf: true);

  /// General Library Documentation Undocument By General Corporation & Global Corporation & General Developer
  int ma_channel_converter_init_preallocated(
    ffi.Pointer<ma_channel_converter_config> pConfig,
    ffi.Pointer<ffi.Void> pHeap,
    ffi.Pointer<ma_channel_converter> pConverter,
  ) {
    return _ma_channel_converter_init_preallocated(
      pConfig,
      pHeap,
      pConverter,
    );
  }

  late final _ma_channel_converter_init_preallocatedPtr = _lookup<
          ffi.NativeFunction<
              ffi.Int32 Function(ffi.Pointer<ma_channel_converter_config>,
                  ffi.Pointer<ffi.Void>, ffi.Pointer<ma_channel_converter>)>>(
      'ma_channel_converter_init_preallocated');
  late final _ma_channel_converter_init_preallocated =
      _ma_channel_converter_init_preallocatedPtr.asFunction<
          int Function(
              ffi.Pointer<ma_channel_converter_config>,
              ffi.Pointer<ffi.Void>,
              ffi.Pointer<ma_channel_converter>)>(isLeaf: true);

  /// General Library Documentation Undocument By General Corporation & Global Corporation & General Developer
  int ma_channel_converter_init(
    ffi.Pointer<ma_channel_converter_config> pConfig,
    ffi.Pointer<ma_allocation_callbacks> pAllocationCallbacks,
    ffi.Pointer<ma_channel_converter> pConverter,
  ) {
    return _ma_channel_converter_init(
      pConfig,
      pAllocationCallbacks,
      pConverter,
    );
  }

  late final _ma_channel_converter_initPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int32 Function(
              ffi.Pointer<ma_channel_converter_config>,
              ffi.Pointer<ma_allocation_callbacks>,
              ffi.Pointer<ma_channel_converter>)>>('ma_channel_converter_init');
  late final _ma_channel_converter_init =
      _ma_channel_converter_initPtr.asFunction<
          int Function(
              ffi.Pointer<ma_channel_converter_config>,
              ffi.Pointer<ma_allocation_callbacks>,
              ffi.Pointer<ma_channel_converter>)>(isLeaf: true);

  /// General Library Documentation Undocument By General Corporation & Global Corporation & General Developer
  void ma_channel_converter_uninit(
    ffi.Pointer<ma_channel_converter> pConverter,
    ffi.Pointer<ma_allocation_callbacks> pAllocationCallbacks,
  ) {
    return _ma_channel_converter_uninit(
      pConverter,
      pAllocationCallbacks,
    );
  }

  late final _ma_channel_converter_uninitPtr = _lookup<
          ffi.NativeFunction<
              ffi.Void Function(ffi.Pointer<ma_channel_converter>,
                  ffi.Pointer<ma_allocation_callbacks>)>>(
      'ma_channel_converter_uninit');
  late final _ma_channel_converter_uninit =
      _ma_channel_converter_uninitPtr.asFunction<
          void Function(ffi.Pointer<ma_channel_converter>,
              ffi.Pointer<ma_allocation_callbacks>)>(isLeaf: true);

  /// General Library Documentation Undocument By General Corporation & Global Corporation & General Developer
  int ma_channel_converter_process_pcm_frames(
    ffi.Pointer<ma_channel_converter> pConverter,
    ffi.Pointer<ffi.Void> pFramesOut,
    ffi.Pointer<ffi.Void> pFramesIn,
    int frameCount,
  ) {
    return _ma_channel_converter_process_pcm_frames(
      pConverter,
      pFramesOut,
      pFramesIn,
      frameCount,
    );
  }

  late final _ma_channel_converter_process_pcm_framesPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int32 Function(
              ffi.Pointer<ma_channel_converter>,
              ffi.Pointer<ffi.Void>,
              ffi.Pointer<ffi.Void>,
              ma_uint64)>>('ma_channel_converter_process_pcm_frames');
  late final _ma_channel_converter_process_pcm_frames =
      _ma_channel_converter_process_pcm_framesPtr.asFunction<
          int Function(ffi.Pointer<ma_channel_converter>, ffi.Pointer<ffi.Void>,
              ffi.Pointer<ffi.Void>, int)>(isLeaf: true);

  /// General Library Documentation Undocument By General Corporation & Global Corporation & General Developer
  int ma_channel_converter_get_input_channel_map(
    ffi.Pointer<ma_channel_converter> pConverter,
    ffi.Pointer<ma_channel> pChannelMap,
    int channelMapCap,
  ) {
    return _ma_channel_converter_get_input_channel_map(
      pConverter,
      pChannelMap,
      channelMapCap,
    );
  }

  late final _ma_channel_converter_get_input_channel_mapPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int32 Function(
              ffi.Pointer<ma_channel_converter>,
              ffi.Pointer<ma_channel>,
              ffi.Size)>>('ma_channel_converter_get_input_channel_map');
  late final _ma_channel_converter_get_input_channel_map =
      _ma_channel_converter_get_input_channel_mapPtr.asFunction<
          int Function(ffi.Pointer<ma_channel_converter>,
              ffi.Pointer<ma_channel>, int)>(isLeaf: true);

  /// General Library Documentation Undocument By General Corporation & Global Corporation & General Developer
  int ma_channel_converter_get_output_channel_map(
    ffi.Pointer<ma_channel_converter> pConverter,
    ffi.Pointer<ma_channel> pChannelMap,
    int channelMapCap,
  ) {
    return _ma_channel_converter_get_output_channel_map(
      pConverter,
      pChannelMap,
      channelMapCap,
    );
  }

  late final _ma_channel_converter_get_output_channel_mapPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int32 Function(
              ffi.Pointer<ma_channel_converter>,
              ffi.Pointer<ma_channel>,
              ffi.Size)>>('ma_channel_converter_get_output_channel_map');
  late final _ma_channel_converter_get_output_channel_map =
      _ma_channel_converter_get_output_channel_mapPtr.asFunction<
          int Function(ffi.Pointer<ma_channel_converter>,
              ffi.Pointer<ma_channel>, int)>(isLeaf: true);

  /// General Library Documentation Undocument By General Corporation & Global Corporation & General Developer
  ma_data_converter_config ma_data_converter_config_init_default() {
    return _ma_data_converter_config_init_default();
  }

  late final _ma_data_converter_config_init_defaultPtr =
      _lookup<ffi.NativeFunction<ma_data_converter_config Function()>>(
          'ma_data_converter_config_init_default');
  late final _ma_data_converter_config_init_default =
      _ma_data_converter_config_init_defaultPtr
          .asFunction<ma_data_converter_config Function()>(isLeaf: true);

  /// General Library Documentation Undocument By General Corporation & Global Corporation & General Developer
  ma_data_converter_config ma_data_converter_config_init(
    int formatIn,
    int formatOut,
    int channelsIn,
    int channelsOut,
    int sampleRateIn,
    int sampleRateOut,
  ) {
    return _ma_data_converter_config_init(
      formatIn,
      formatOut,
      channelsIn,
      channelsOut,
      sampleRateIn,
      sampleRateOut,
    );
  }

  late final _ma_data_converter_config_initPtr = _lookup<
      ffi.NativeFunction<
          ma_data_converter_config Function(
              ffi.Int32,
              ffi.Int32,
              ma_uint32,
              ma_uint32,
              ma_uint32,
              ma_uint32)>>('ma_data_converter_config_init');
  late final _ma_data_converter_config_init =
      _ma_data_converter_config_initPtr.asFunction<
          ma_data_converter_config Function(
              int, int, int, int, int, int)>(isLeaf: true);

  /// General Library Documentation Undocument By General Corporation & Global Corporation & General Developer
  int ma_data_converter_get_heap_size(
    ffi.Pointer<ma_data_converter_config> pConfig,
    ffi.Pointer<ffi.Size> pHeapSizeInBytes,
  ) {
    return _ma_data_converter_get_heap_size(
      pConfig,
      pHeapSizeInBytes,
    );
  }

  late final _ma_data_converter_get_heap_sizePtr = _lookup<
      ffi.NativeFunction<
          ffi.Int32 Function(ffi.Pointer<ma_data_converter_config>,
              ffi.Pointer<ffi.Size>)>>('ma_data_converter_get_heap_size');
  late final _ma_data_converter_get_heap_size =
      _ma_data_converter_get_heap_sizePtr.asFunction<
          int Function(ffi.Pointer<ma_data_converter_config>,
              ffi.Pointer<ffi.Size>)>(isLeaf: true);

  /// General Library Documentation Undocument By General Corporation & Global Corporation & General Developer
  int ma_data_converter_init_preallocated(
    ffi.Pointer<ma_data_converter_config> pConfig,
    ffi.Pointer<ffi.Void> pHeap,
    ffi.Pointer<ma_data_converter> pConverter,
  ) {
    return _ma_data_converter_init_preallocated(
      pConfig,
      pHeap,
      pConverter,
    );
  }

  late final _ma_data_converter_init_preallocatedPtr = _lookup<
          ffi.NativeFunction<
              ffi.Int32 Function(ffi.Pointer<ma_data_converter_config>,
                  ffi.Pointer<ffi.Void>, ffi.Pointer<ma_data_converter>)>>(
      'ma_data_converter_init_preallocated');
  late final _ma_data_converter_init_preallocated =
      _ma_data_converter_init_preallocatedPtr.asFunction<
          int Function(
              ffi.Pointer<ma_data_converter_config>,
              ffi.Pointer<ffi.Void>,
              ffi.Pointer<ma_data_converter>)>(isLeaf: true);

  /// General Library Documentation Undocument By General Corporation & Global Corporation & General Developer
  int ma_data_converter_init(
    ffi.Pointer<ma_data_converter_config> pConfig,
    ffi.Pointer<ma_allocation_callbacks> pAllocationCallbacks,
    ffi.Pointer<ma_data_converter> pConverter,
  ) {
    return _ma_data_converter_init(
      pConfig,
      pAllocationCallbacks,
      pConverter,
    );
  }

  late final _ma_data_converter_initPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int32 Function(
              ffi.Pointer<ma_data_converter_config>,
              ffi.Pointer<ma_allocation_callbacks>,
              ffi.Pointer<ma_data_converter>)>>('ma_data_converter_init');
  late final _ma_data_converter_init = _ma_data_converter_initPtr.asFunction<
      int Function(
          ffi.Pointer<ma_data_converter_config>,
          ffi.Pointer<ma_allocation_callbacks>,
          ffi.Pointer<ma_data_converter>)>(isLeaf: true);

  /// General Library Documentation Undocument By General Corporation & Global Corporation & General Developer
  void ma_data_converter_uninit(
    ffi.Pointer<ma_data_converter> pConverter,
    ffi.Pointer<ma_allocation_callbacks> pAllocationCallbacks,
  ) {
    return _ma_data_converter_uninit(
      pConverter,
      pAllocationCallbacks,
    );
  }

  late final _ma_data_converter_uninitPtr = _lookup<
          ffi.NativeFunction<
              ffi.Void Function(ffi.Pointer<ma_data_converter>,
                  ffi.Pointer<ma_allocation_callbacks>)>>(
      'ma_data_converter_uninit');
  late final _ma_data_converter_uninit =
      _ma_data_converter_uninitPtr.asFunction<
          void Function(ffi.Pointer<ma_data_converter>,
              ffi.Pointer<ma_allocation_callbacks>)>(isLeaf: true);

  /// General Library Documentation Undocument By General Corporation & Global Corporation & General Developer
  int ma_data_converter_process_pcm_frames(
    ffi.Pointer<ma_data_converter> pConverter,
    ffi.Pointer<ffi.Void> pFramesIn,
    ffi.Pointer<ma_uint64> pFrameCountIn,
    ffi.Pointer<ffi.Void> pFramesOut,
    ffi.Pointer<ma_uint64> pFrameCountOut,
  ) {
    return _ma_data_converter_process_pcm_frames(
      pConverter,
      pFramesIn,
      pFrameCountIn,
      pFramesOut,
      pFrameCountOut,
    );
  }

  late final _ma_data_converter_process_pcm_framesPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int32 Function(
              ffi.Pointer<ma_data_converter>,
              ffi.Pointer<ffi.Void>,
              ffi.Pointer<ma_uint64>,
              ffi.Pointer<ffi.Void>,
              ffi.Pointer<ma_uint64>)>>('ma_data_converter_process_pcm_frames');
  late final _ma_data_converter_process_pcm_frames =
      _ma_data_converter_process_pcm_framesPtr.asFunction<
          int Function(
              ffi.Pointer<ma_data_converter>,
              ffi.Pointer<ffi.Void>,
              ffi.Pointer<ma_uint64>,
              ffi.Pointer<ffi.Void>,
              ffi.Pointer<ma_uint64>)>(isLeaf: true);

  /// General Library Documentation Undocument By General Corporation & Global Corporation & General Developer
  int ma_data_converter_set_rate(
    ffi.Pointer<ma_data_converter> pConverter,
    int sampleRateIn,
    int sampleRateOut,
  ) {
    return _ma_data_converter_set_rate(
      pConverter,
      sampleRateIn,
      sampleRateOut,
    );
  }

  late final _ma_data_converter_set_ratePtr = _lookup<
      ffi.NativeFunction<
          ffi.Int32 Function(ffi.Pointer<ma_data_converter>, ma_uint32,
              ma_uint32)>>('ma_data_converter_set_rate');
  late final _ma_data_converter_set_rate = _ma_data_converter_set_ratePtr
      .asFunction<int Function(ffi.Pointer<ma_data_converter>, int, int)>(
          isLeaf: true);

  /// General Library Documentation Undocument By General Corporation & Global Corporation & General Developer
  int ma_data_converter_set_rate_ratio(
    ffi.Pointer<ma_data_converter> pConverter,
    double ratioInOut,
  ) {
    return _ma_data_converter_set_rate_ratio(
      pConverter,
      ratioInOut,
    );
  }

  late final _ma_data_converter_set_rate_ratioPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int32 Function(ffi.Pointer<ma_data_converter>,
              ffi.Float)>>('ma_data_converter_set_rate_ratio');
  late final _ma_data_converter_set_rate_ratio =
      _ma_data_converter_set_rate_ratioPtr
          .asFunction<int Function(ffi.Pointer<ma_data_converter>, double)>(
              isLeaf: true);

  /// General Library Documentation Undocument By General Corporation & Global Corporation & General Developer
  int ma_data_converter_get_input_latency(
    ffi.Pointer<ma_data_converter> pConverter,
  ) {
    return _ma_data_converter_get_input_latency(
      pConverter,
    );
  }

  late final _ma_data_converter_get_input_latencyPtr = _lookup<
          ffi
          .NativeFunction<ma_uint64 Function(ffi.Pointer<ma_data_converter>)>>(
      'ma_data_converter_get_input_latency');
  late final _ma_data_converter_get_input_latency =
      _ma_data_converter_get_input_latencyPtr
          .asFunction<int Function(ffi.Pointer<ma_data_converter>)>(
              isLeaf: true);

  /// General Library Documentation Undocument By General Corporation & Global Corporation & General Developer
  int ma_data_converter_get_output_latency(
    ffi.Pointer<ma_data_converter> pConverter,
  ) {
    return _ma_data_converter_get_output_latency(
      pConverter,
    );
  }

  late final _ma_data_converter_get_output_latencyPtr = _lookup<
          ffi
          .NativeFunction<ma_uint64 Function(ffi.Pointer<ma_data_converter>)>>(
      'ma_data_converter_get_output_latency');
  late final _ma_data_converter_get_output_latency =
      _ma_data_converter_get_output_latencyPtr
          .asFunction<int Function(ffi.Pointer<ma_data_converter>)>(
              isLeaf: true);

  /// General Library Documentation Undocument By General Corporation & Global Corporation & General Developer
  int ma_data_converter_get_required_input_frame_count(
    ffi.Pointer<ma_data_converter> pConverter,
    int outputFrameCount,
    ffi.Pointer<ma_uint64> pInputFrameCount,
  ) {
    return _ma_data_converter_get_required_input_frame_count(
      pConverter,
      outputFrameCount,
      pInputFrameCount,
    );
  }

  late final _ma_data_converter_get_required_input_frame_countPtr = _lookup<
          ffi.NativeFunction<
              ffi.Int32 Function(ffi.Pointer<ma_data_converter>, ma_uint64,
                  ffi.Pointer<ma_uint64>)>>(
      'ma_data_converter_get_required_input_frame_count');
  late final _ma_data_converter_get_required_input_frame_count =
      _ma_data_converter_get_required_input_frame_countPtr.asFunction<
          int Function(ffi.Pointer<ma_data_converter>, int,
              ffi.Pointer<ma_uint64>)>(isLeaf: true);

  /// General Library Documentation Undocument By General Corporation & Global Corporation & General Developer
  int ma_data_converter_get_expected_output_frame_count(
    ffi.Pointer<ma_data_converter> pConverter,
    int inputFrameCount,
    ffi.Pointer<ma_uint64> pOutputFrameCount,
  ) {
    return _ma_data_converter_get_expected_output_frame_count(
      pConverter,
      inputFrameCount,
      pOutputFrameCount,
    );
  }

  late final _ma_data_converter_get_expected_output_frame_countPtr = _lookup<
          ffi.NativeFunction<
              ffi.Int32 Function(ffi.Pointer<ma_data_converter>, ma_uint64,
                  ffi.Pointer<ma_uint64>)>>(
      'ma_data_converter_get_expected_output_frame_count');
  late final _ma_data_converter_get_expected_output_frame_count =
      _ma_data_converter_get_expected_output_frame_countPtr.asFunction<
          int Function(ffi.Pointer<ma_data_converter>, int,
              ffi.Pointer<ma_uint64>)>(isLeaf: true);

  /// General Library Documentation Undocument By General Corporation & Global Corporation & General Developer
  int ma_data_converter_get_input_channel_map(
    ffi.Pointer<ma_data_converter> pConverter,
    ffi.Pointer<ma_channel> pChannelMap,
    int channelMapCap,
  ) {
    return _ma_data_converter_get_input_channel_map(
      pConverter,
      pChannelMap,
      channelMapCap,
    );
  }

  late final _ma_data_converter_get_input_channel_mapPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int32 Function(
              ffi.Pointer<ma_data_converter>,
              ffi.Pointer<ma_channel>,
              ffi.Size)>>('ma_data_converter_get_input_channel_map');
  late final _ma_data_converter_get_input_channel_map =
      _ma_data_converter_get_input_channel_mapPtr.asFunction<
          int Function(ffi.Pointer<ma_data_converter>, ffi.Pointer<ma_channel>,
              int)>(isLeaf: true);

  /// General Library Documentation Undocument By General Corporation & Global Corporation & General Developer
  int ma_data_converter_get_output_channel_map(
    ffi.Pointer<ma_data_converter> pConverter,
    ffi.Pointer<ma_channel> pChannelMap,
    int channelMapCap,
  ) {
    return _ma_data_converter_get_output_channel_map(
      pConverter,
      pChannelMap,
      channelMapCap,
    );
  }

  late final _ma_data_converter_get_output_channel_mapPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int32 Function(
              ffi.Pointer<ma_data_converter>,
              ffi.Pointer<ma_channel>,
              ffi.Size)>>('ma_data_converter_get_output_channel_map');
  late final _ma_data_converter_get_output_channel_map =
      _ma_data_converter_get_output_channel_mapPtr.asFunction<
          int Function(ffi.Pointer<ma_data_converter>, ffi.Pointer<ma_channel>,
              int)>(isLeaf: true);

  /// General Library Documentation Undocument By General Corporation & Global Corporation & General Developer
  int ma_data_converter_reset(
    ffi.Pointer<ma_data_converter> pConverter,
  ) {
    return _ma_data_converter_reset(
      pConverter,
    );
  }

  late final _ma_data_converter_resetPtr = _lookup<
          ffi
          .NativeFunction<ffi.Int32 Function(ffi.Pointer<ma_data_converter>)>>(
      'ma_data_converter_reset');
  late final _ma_data_converter_reset = _ma_data_converter_resetPtr
      .asFunction<int Function(ffi.Pointer<ma_data_converter>)>(isLeaf: true);

  /// Format Conversion
  void ma_pcm_u8_to_s16(
    ffi.Pointer<ffi.Void> pOut,
    ffi.Pointer<ffi.Void> pIn,
    int count,
    int ditherMode,
  ) {
    return _ma_pcm_u8_to_s16(
      pOut,
      pIn,
      count,
      ditherMode,
    );
  }

  late final _ma_pcm_u8_to_s16Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Pointer<ffi.Void>, ffi.Pointer<ffi.Void>,
              ma_uint64, ffi.Int32)>>('ma_pcm_u8_to_s16');
  late final _ma_pcm_u8_to_s16 = _ma_pcm_u8_to_s16Ptr.asFunction<
      void Function(ffi.Pointer<ffi.Void>, ffi.Pointer<ffi.Void>, int,
          int)>(isLeaf: true);

  /// General Library Documentation Undocument By General Corporation & Global Corporation & General Developer
  void ma_pcm_u8_to_s24(
    ffi.Pointer<ffi.Void> pOut,
    ffi.Pointer<ffi.Void> pIn,
    int count,
    int ditherMode,
  ) {
    return _ma_pcm_u8_to_s24(
      pOut,
      pIn,
      count,
      ditherMode,
    );
  }

  late final _ma_pcm_u8_to_s24Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Pointer<ffi.Void>, ffi.Pointer<ffi.Void>,
              ma_uint64, ffi.Int32)>>('ma_pcm_u8_to_s24');
  late final _ma_pcm_u8_to_s24 = _ma_pcm_u8_to_s24Ptr.asFunction<
      void Function(ffi.Pointer<ffi.Void>, ffi.Pointer<ffi.Void>, int,
          int)>(isLeaf: true);

  /// General Library Documentation Undocument By General Corporation & Global Corporation & General Developer
  void ma_pcm_u8_to_s32(
    ffi.Pointer<ffi.Void> pOut,
    ffi.Pointer<ffi.Void> pIn,
    int count,
    int ditherMode,
  ) {
    return _ma_pcm_u8_to_s32(
      pOut,
      pIn,
      count,
      ditherMode,
    );
  }

  late final _ma_pcm_u8_to_s32Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Pointer<ffi.Void>, ffi.Pointer<ffi.Void>,
              ma_uint64, ffi.Int32)>>('ma_pcm_u8_to_s32');
  late final _ma_pcm_u8_to_s32 = _ma_pcm_u8_to_s32Ptr.asFunction<
      void Function(ffi.Pointer<ffi.Void>, ffi.Pointer<ffi.Void>, int,
          int)>(isLeaf: true);

  /// General Library Documentation Undocument By General Corporation & Global Corporation & General Developer
  void ma_pcm_u8_to_f32(
    ffi.Pointer<ffi.Void> pOut,
    ffi.Pointer<ffi.Void> pIn,
    int count,
    int ditherMode,
  ) {
    return _ma_pcm_u8_to_f32(
      pOut,
      pIn,
      count,
      ditherMode,
    );
  }

  late final _ma_pcm_u8_to_f32Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Pointer<ffi.Void>, ffi.Pointer<ffi.Void>,
              ma_uint64, ffi.Int32)>>('ma_pcm_u8_to_f32');
  late final _ma_pcm_u8_to_f32 = _ma_pcm_u8_to_f32Ptr.asFunction<
      void Function(ffi.Pointer<ffi.Void>, ffi.Pointer<ffi.Void>, int,
          int)>(isLeaf: true);

  /// General Library Documentation Undocument By General Corporation & Global Corporation & General Developer
  void ma_pcm_s16_to_u8(
    ffi.Pointer<ffi.Void> pOut,
    ffi.Pointer<ffi.Void> pIn,
    int count,
    int ditherMode,
  ) {
    return _ma_pcm_s16_to_u8(
      pOut,
      pIn,
      count,
      ditherMode,
    );
  }

  late final _ma_pcm_s16_to_u8Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Pointer<ffi.Void>, ffi.Pointer<ffi.Void>,
              ma_uint64, ffi.Int32)>>('ma_pcm_s16_to_u8');
  late final _ma_pcm_s16_to_u8 = _ma_pcm_s16_to_u8Ptr.asFunction<
      void Function(ffi.Pointer<ffi.Void>, ffi.Pointer<ffi.Void>, int,
          int)>(isLeaf: true);

  /// General Library Documentation Undocument By General Corporation & Global Corporation & General Developer
  void ma_pcm_s16_to_s24(
    ffi.Pointer<ffi.Void> pOut,
    ffi.Pointer<ffi.Void> pIn,
    int count,
    int ditherMode,
  ) {
    return _ma_pcm_s16_to_s24(
      pOut,
      pIn,
      count,
      ditherMode,
    );
  }

  late final _ma_pcm_s16_to_s24Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Pointer<ffi.Void>, ffi.Pointer<ffi.Void>,
              ma_uint64, ffi.Int32)>>('ma_pcm_s16_to_s24');
  late final _ma_pcm_s16_to_s24 = _ma_pcm_s16_to_s24Ptr.asFunction<
      void Function(ffi.Pointer<ffi.Void>, ffi.Pointer<ffi.Void>, int,
          int)>(isLeaf: true);

  /// General Library Documentation Undocument By General Corporation & Global Corporation & General Developer
  void ma_pcm_s16_to_s32(
    ffi.Pointer<ffi.Void> pOut,
    ffi.Pointer<ffi.Void> pIn,
    int count,
    int ditherMode,
  ) {
    return _ma_pcm_s16_to_s32(
      pOut,
      pIn,
      count,
      ditherMode,
    );
  }

  late final _ma_pcm_s16_to_s32Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Pointer<ffi.Void>, ffi.Pointer<ffi.Void>,
              ma_uint64, ffi.Int32)>>('ma_pcm_s16_to_s32');
  late final _ma_pcm_s16_to_s32 = _ma_pcm_s16_to_s32Ptr.asFunction<
      void Function(ffi.Pointer<ffi.Void>, ffi.Pointer<ffi.Void>, int,
          int)>(isLeaf: true);

  /// General Library Documentation Undocument By General Corporation & Global Corporation & General Developer
  void ma_pcm_s16_to_f32(
    ffi.Pointer<ffi.Void> pOut,
    ffi.Pointer<ffi.Void> pIn,
    int count,
    int ditherMode,
  ) {
    return _ma_pcm_s16_to_f32(
      pOut,
      pIn,
      count,
      ditherMode,
    );
  }

  late final _ma_pcm_s16_to_f32Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Pointer<ffi.Void>, ffi.Pointer<ffi.Void>,
              ma_uint64, ffi.Int32)>>('ma_pcm_s16_to_f32');
  late final _ma_pcm_s16_to_f32 = _ma_pcm_s16_to_f32Ptr.asFunction<
      void Function(ffi.Pointer<ffi.Void>, ffi.Pointer<ffi.Void>, int,
          int)>(isLeaf: true);

  /// General Library Documentation Undocument By General Corporation & Global Corporation & General Developer
  void ma_pcm_s24_to_u8(
    ffi.Pointer<ffi.Void> pOut,
    ffi.Pointer<ffi.Void> pIn,
    int count,
    int ditherMode,
  ) {
    return _ma_pcm_s24_to_u8(
      pOut,
      pIn,
      count,
      ditherMode,
    );
  }

  late final _ma_pcm_s24_to_u8Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Pointer<ffi.Void>, ffi.Pointer<ffi.Void>,
              ma_uint64, ffi.Int32)>>('ma_pcm_s24_to_u8');
  late final _ma_pcm_s24_to_u8 = _ma_pcm_s24_to_u8Ptr.asFunction<
      void Function(ffi.Pointer<ffi.Void>, ffi.Pointer<ffi.Void>, int,
          int)>(isLeaf: true);

  /// General Library Documentation Undocument By General Corporation & Global Corporation & General Developer
  void ma_pcm_s24_to_s16(
    ffi.Pointer<ffi.Void> pOut,
    ffi.Pointer<ffi.Void> pIn,
    int count,
    int ditherMode,
  ) {
    return _ma_pcm_s24_to_s16(
      pOut,
      pIn,
      count,
      ditherMode,
    );
  }

  late final _ma_pcm_s24_to_s16Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Pointer<ffi.Void>, ffi.Pointer<ffi.Void>,
              ma_uint64, ffi.Int32)>>('ma_pcm_s24_to_s16');
  late final _ma_pcm_s24_to_s16 = _ma_pcm_s24_to_s16Ptr.asFunction<
      void Function(ffi.Pointer<ffi.Void>, ffi.Pointer<ffi.Void>, int,
          int)>(isLeaf: true);

  /// General Library Documentation Undocument By General Corporation & Global Corporation & General Developer
  void ma_pcm_s24_to_s32(
    ffi.Pointer<ffi.Void> pOut,
    ffi.Pointer<ffi.Void> pIn,
    int count,
    int ditherMode,
  ) {
    return _ma_pcm_s24_to_s32(
      pOut,
      pIn,
      count,
      ditherMode,
    );
  }

  late final _ma_pcm_s24_to_s32Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Pointer<ffi.Void>, ffi.Pointer<ffi.Void>,
              ma_uint64, ffi.Int32)>>('ma_pcm_s24_to_s32');
  late final _ma_pcm_s24_to_s32 = _ma_pcm_s24_to_s32Ptr.asFunction<
      void Function(ffi.Pointer<ffi.Void>, ffi.Pointer<ffi.Void>, int,
          int)>(isLeaf: true);

  /// General Library Documentation Undocument By General Corporation & Global Corporation & General Developer
  void ma_pcm_s24_to_f32(
    ffi.Pointer<ffi.Void> pOut,
    ffi.Pointer<ffi.Void> pIn,
    int count,
    int ditherMode,
  ) {
    return _ma_pcm_s24_to_f32(
      pOut,
      pIn,
      count,
      ditherMode,
    );
  }

  late final _ma_pcm_s24_to_f32Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Pointer<ffi.Void>, ffi.Pointer<ffi.Void>,
              ma_uint64, ffi.Int32)>>('ma_pcm_s24_to_f32');
  late final _ma_pcm_s24_to_f32 = _ma_pcm_s24_to_f32Ptr.asFunction<
      void Function(ffi.Pointer<ffi.Void>, ffi.Pointer<ffi.Void>, int,
          int)>(isLeaf: true);

  /// General Library Documentation Undocument By General Corporation & Global Corporation & General Developer
  void ma_pcm_s32_to_u8(
    ffi.Pointer<ffi.Void> pOut,
    ffi.Pointer<ffi.Void> pIn,
    int count,
    int ditherMode,
  ) {
    return _ma_pcm_s32_to_u8(
      pOut,
      pIn,
      count,
      ditherMode,
    );
  }

  late final _ma_pcm_s32_to_u8Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Pointer<ffi.Void>, ffi.Pointer<ffi.Void>,
              ma_uint64, ffi.Int32)>>('ma_pcm_s32_to_u8');
  late final _ma_pcm_s32_to_u8 = _ma_pcm_s32_to_u8Ptr.asFunction<
      void Function(ffi.Pointer<ffi.Void>, ffi.Pointer<ffi.Void>, int,
          int)>(isLeaf: true);

  /// General Library Documentation Undocument By General Corporation & Global Corporation & General Developer
  void ma_pcm_s32_to_s16(
    ffi.Pointer<ffi.Void> pOut,
    ffi.Pointer<ffi.Void> pIn,
    int count,
    int ditherMode,
  ) {
    return _ma_pcm_s32_to_s16(
      pOut,
      pIn,
      count,
      ditherMode,
    );
  }

  late final _ma_pcm_s32_to_s16Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Pointer<ffi.Void>, ffi.Pointer<ffi.Void>,
              ma_uint64, ffi.Int32)>>('ma_pcm_s32_to_s16');
  late final _ma_pcm_s32_to_s16 = _ma_pcm_s32_to_s16Ptr.asFunction<
      void Function(ffi.Pointer<ffi.Void>, ffi.Pointer<ffi.Void>, int,
          int)>(isLeaf: true);

  /// General Library Documentation Undocument By General Corporation & Global Corporation & General Developer
  void ma_pcm_s32_to_s24(
    ffi.Pointer<ffi.Void> pOut,
    ffi.Pointer<ffi.Void> pIn,
    int count,
    int ditherMode,
  ) {
    return _ma_pcm_s32_to_s24(
      pOut,
      pIn,
      count,
      ditherMode,
    );
  }

  late final _ma_pcm_s32_to_s24Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Pointer<ffi.Void>, ffi.Pointer<ffi.Void>,
              ma_uint64, ffi.Int32)>>('ma_pcm_s32_to_s24');
  late final _ma_pcm_s32_to_s24 = _ma_pcm_s32_to_s24Ptr.asFunction<
      void Function(ffi.Pointer<ffi.Void>, ffi.Pointer<ffi.Void>, int,
          int)>(isLeaf: true);

  /// General Library Documentation Undocument By General Corporation & Global Corporation & General Developer
  void ma_pcm_s32_to_f32(
    ffi.Pointer<ffi.Void> pOut,
    ffi.Pointer<ffi.Void> pIn,
    int count,
    int ditherMode,
  ) {
    return _ma_pcm_s32_to_f32(
      pOut,
      pIn,
      count,
      ditherMode,
    );
  }

  late final _ma_pcm_s32_to_f32Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Pointer<ffi.Void>, ffi.Pointer<ffi.Void>,
              ma_uint64, ffi.Int32)>>('ma_pcm_s32_to_f32');
  late final _ma_pcm_s32_to_f32 = _ma_pcm_s32_to_f32Ptr.asFunction<
      void Function(ffi.Pointer<ffi.Void>, ffi.Pointer<ffi.Void>, int,
          int)>(isLeaf: true);

  /// General Library Documentation Undocument By General Corporation & Global Corporation & General Developer
  void ma_pcm_f32_to_u8(
    ffi.Pointer<ffi.Void> pOut,
    ffi.Pointer<ffi.Void> pIn,
    int count,
    int ditherMode,
  ) {
    return _ma_pcm_f32_to_u8(
      pOut,
      pIn,
      count,
      ditherMode,
    );
  }

  late final _ma_pcm_f32_to_u8Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Pointer<ffi.Void>, ffi.Pointer<ffi.Void>,
              ma_uint64, ffi.Int32)>>('ma_pcm_f32_to_u8');
  late final _ma_pcm_f32_to_u8 = _ma_pcm_f32_to_u8Ptr.asFunction<
      void Function(ffi.Pointer<ffi.Void>, ffi.Pointer<ffi.Void>, int,
          int)>(isLeaf: true);

  /// General Library Documentation Undocument By General Corporation & Global Corporation & General Developer
  void ma_pcm_f32_to_s16(
    ffi.Pointer<ffi.Void> pOut,
    ffi.Pointer<ffi.Void> pIn,
    int count,
    int ditherMode,
  ) {
    return _ma_pcm_f32_to_s16(
      pOut,
      pIn,
      count,
      ditherMode,
    );
  }

  late final _ma_pcm_f32_to_s16Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Pointer<ffi.Void>, ffi.Pointer<ffi.Void>,
              ma_uint64, ffi.Int32)>>('ma_pcm_f32_to_s16');
  late final _ma_pcm_f32_to_s16 = _ma_pcm_f32_to_s16Ptr.asFunction<
      void Function(ffi.Pointer<ffi.Void>, ffi.Pointer<ffi.Void>, int,
          int)>(isLeaf: true);

  /// General Library Documentation Undocument By General Corporation & Global Corporation & General Developer
  void ma_pcm_f32_to_s24(
    ffi.Pointer<ffi.Void> pOut,
    ffi.Pointer<ffi.Void> pIn,
    int count,
    int ditherMode,
  ) {
    return _ma_pcm_f32_to_s24(
      pOut,
      pIn,
      count,
      ditherMode,
    );
  }

  late final _ma_pcm_f32_to_s24Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Pointer<ffi.Void>, ffi.Pointer<ffi.Void>,
              ma_uint64, ffi.Int32)>>('ma_pcm_f32_to_s24');
  late final _ma_pcm_f32_to_s24 = _ma_pcm_f32_to_s24Ptr.asFunction<
      void Function(ffi.Pointer<ffi.Void>, ffi.Pointer<ffi.Void>, int,
          int)>(isLeaf: true);

  /// General Library Documentation Undocument By General Corporation & Global Corporation & General Developer
  void ma_pcm_f32_to_s32(
    ffi.Pointer<ffi.Void> pOut,
    ffi.Pointer<ffi.Void> pIn,
    int count,
    int ditherMode,
  ) {
    return _ma_pcm_f32_to_s32(
      pOut,
      pIn,
      count,
      ditherMode,
    );
  }

  late final _ma_pcm_f32_to_s32Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Pointer<ffi.Void>, ffi.Pointer<ffi.Void>,
              ma_uint64, ffi.Int32)>>('ma_pcm_f32_to_s32');
  late final _ma_pcm_f32_to_s32 = _ma_pcm_f32_to_s32Ptr.asFunction<
      void Function(ffi.Pointer<ffi.Void>, ffi.Pointer<ffi.Void>, int,
          int)>(isLeaf: true);

  /// General Library Documentation Undocument By General Corporation & Global Corporation & General Developer
  void ma_pcm_convert(
    ffi.Pointer<ffi.Void> pOut,
    int formatOut,
    ffi.Pointer<ffi.Void> pIn,
    int formatIn,
    int sampleCount,
    int ditherMode,
  ) {
    return _ma_pcm_convert(
      pOut,
      formatOut,
      pIn,
      formatIn,
      sampleCount,
      ditherMode,
    );
  }

  late final _ma_pcm_convertPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(
              ffi.Pointer<ffi.Void>,
              ffi.Int32,
              ffi.Pointer<ffi.Void>,
              ffi.Int32,
              ma_uint64,
              ffi.Int32)>>('ma_pcm_convert');
  late final _ma_pcm_convert = _ma_pcm_convertPtr.asFunction<
      void Function(ffi.Pointer<ffi.Void>, int, ffi.Pointer<ffi.Void>, int, int,
          int)>(isLeaf: true);

  /// General Library Documentation Undocument By General Corporation & Global Corporation & General Developer
  void ma_convert_pcm_frames_format(
    ffi.Pointer<ffi.Void> pOut,
    int formatOut,
    ffi.Pointer<ffi.Void> pIn,
    int formatIn,
    int frameCount,
    int channels,
    int ditherMode,
  ) {
    return _ma_convert_pcm_frames_format(
      pOut,
      formatOut,
      pIn,
      formatIn,
      frameCount,
      channels,
      ditherMode,
    );
  }

  late final _ma_convert_pcm_frames_formatPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(
              ffi.Pointer<ffi.Void>,
              ffi.Int32,
              ffi.Pointer<ffi.Void>,
              ffi.Int32,
              ma_uint64,
              ma_uint32,
              ffi.Int32)>>('ma_convert_pcm_frames_format');
  late final _ma_convert_pcm_frames_format =
      _ma_convert_pcm_frames_formatPtr.asFunction<
          void Function(ffi.Pointer<ffi.Void>, int, ffi.Pointer<ffi.Void>, int,
              int, int, int)>(isLeaf: true);

  /// General Library Documentation Undocument By General Corporation & Global Corporation & General Developer
  void ma_deinterleave_pcm_frames(
    int format,
    int channels,
    int frameCount,
    ffi.Pointer<ffi.Void> pInterleavedPCMFrames,
    ffi.Pointer<ffi.Pointer<ffi.Void>> ppDeinterleavedPCMFrames,
  ) {
    return _ma_deinterleave_pcm_frames(
      format,
      channels,
      frameCount,
      pInterleavedPCMFrames,
      ppDeinterleavedPCMFrames,
    );
  }

  late final _ma_deinterleave_pcm_framesPtr = _lookup<
          ffi.NativeFunction<
              ffi.Void Function(ffi.Int32, ma_uint32, ma_uint64,
                  ffi.Pointer<ffi.Void>, ffi.Pointer<ffi.Pointer<ffi.Void>>)>>(
      'ma_deinterleave_pcm_frames');
  late final _ma_deinterleave_pcm_frames =
      _ma_deinterleave_pcm_framesPtr.asFunction<
          void Function(int, int, int, ffi.Pointer<ffi.Void>,
              ffi.Pointer<ffi.Pointer<ffi.Void>>)>(isLeaf: true);

  /// General Library Documentation Undocument By General Corporation & Global Corporation & General Developer
  void ma_interleave_pcm_frames(
    int format,
    int channels,
    int frameCount,
    ffi.Pointer<ffi.Pointer<ffi.Void>> ppDeinterleavedPCMFrames,
    ffi.Pointer<ffi.Void> pInterleavedPCMFrames,
  ) {
    return _ma_interleave_pcm_frames(
      format,
      channels,
      frameCount,
      ppDeinterleavedPCMFrames,
      pInterleavedPCMFrames,
    );
  }

  late final _ma_interleave_pcm_framesPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(
              ffi.Int32,
              ma_uint32,
              ma_uint64,
              ffi.Pointer<ffi.Pointer<ffi.Void>>,
              ffi.Pointer<ffi.Void>)>>('ma_interleave_pcm_frames');
  late final _ma_interleave_pcm_frames =
      _ma_interleave_pcm_framesPtr.asFunction<
          void Function(int, int, int, ffi.Pointer<ffi.Pointer<ffi.Void>>,
              ffi.Pointer<ffi.Void>)>(isLeaf: true);

  /// General Library Documentation Undocument By General Corporation & Global Corporation & General Developer
  int ma_channel_map_get_channel(
    ffi.Pointer<ma_channel> pChannelMap,
    int channelCount,
    int channelIndex,
  ) {
    return _ma_channel_map_get_channel(
      pChannelMap,
      channelCount,
      channelIndex,
    );
  }

  late final _ma_channel_map_get_channelPtr = _lookup<
      ffi.NativeFunction<
          ma_channel Function(ffi.Pointer<ma_channel>, ma_uint32,
              ma_uint32)>>('ma_channel_map_get_channel');
  late final _ma_channel_map_get_channel = _ma_channel_map_get_channelPtr
      .asFunction<int Function(ffi.Pointer<ma_channel>, int, int)>(
          isLeaf: true);

  /// General Library Documentation Undocument By General Corporation & Global Corporation & General Developer
  void ma_channel_map_init_blank(
    ffi.Pointer<ma_channel> pChannelMap,
    int channels,
  ) {
    return _ma_channel_map_init_blank(
      pChannelMap,
      channels,
    );
  }

  late final _ma_channel_map_init_blankPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Pointer<ma_channel>,
              ma_uint32)>>('ma_channel_map_init_blank');
  late final _ma_channel_map_init_blank = _ma_channel_map_init_blankPtr
      .asFunction<void Function(ffi.Pointer<ma_channel>, int)>(isLeaf: true);

  /// General Library Documentation Undocument By General Corporation & Global Corporation & General Developer
  void ma_channel_map_init_standard(
    int standardChannelMap,
    ffi.Pointer<ma_channel> pChannelMap,
    int channelMapCap,
    int channels,
  ) {
    return _ma_channel_map_init_standard(
      standardChannelMap,
      pChannelMap,
      channelMapCap,
      channels,
    );
  }

  late final _ma_channel_map_init_standardPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Int32, ffi.Pointer<ma_channel>, ffi.Size,
              ma_uint32)>>('ma_channel_map_init_standard');
  late final _ma_channel_map_init_standard = _ma_channel_map_init_standardPtr
      .asFunction<void Function(int, ffi.Pointer<ma_channel>, int, int)>(
          isLeaf: true);

  /// General Library Documentation Undocument By General Corporation & Global Corporation & General Developer
  void ma_channel_map_copy(
    ffi.Pointer<ma_channel> pOut,
    ffi.Pointer<ma_channel> pIn,
    int channels,
  ) {
    return _ma_channel_map_copy(
      pOut,
      pIn,
      channels,
    );
  }

  late final _ma_channel_map_copyPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Pointer<ma_channel>, ffi.Pointer<ma_channel>,
              ma_uint32)>>('ma_channel_map_copy');
  late final _ma_channel_map_copy = _ma_channel_map_copyPtr.asFunction<
      void Function(
          ffi.Pointer<ma_channel>, ffi.Pointer<ma_channel>, int)>(isLeaf: true);

  /// General Library Documentation Undocument By General Corporation & Global Corporation & General Developer
  void ma_channel_map_copy_or_default(
    ffi.Pointer<ma_channel> pOut,
    int channelMapCapOut,
    ffi.Pointer<ma_channel> pIn,
    int channels,
  ) {
    return _ma_channel_map_copy_or_default(
      pOut,
      channelMapCapOut,
      pIn,
      channels,
    );
  }

  late final _ma_channel_map_copy_or_defaultPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(
              ffi.Pointer<ma_channel>,
              ffi.Size,
              ffi.Pointer<ma_channel>,
              ma_uint32)>>('ma_channel_map_copy_or_default');
  late final _ma_channel_map_copy_or_default =
      _ma_channel_map_copy_or_defaultPtr.asFunction<
          void Function(ffi.Pointer<ma_channel>, int, ffi.Pointer<ma_channel>,
              int)>(isLeaf: true);

  /// General Library Documentation Undocument By General Corporation & Global Corporation & General Developer
  int ma_channel_map_is_valid(
    ffi.Pointer<ma_channel> pChannelMap,
    int channels,
  ) {
    return _ma_channel_map_is_valid(
      pChannelMap,
      channels,
    );
  }

  late final _ma_channel_map_is_validPtr = _lookup<
      ffi.NativeFunction<
          ma_bool32 Function(
              ffi.Pointer<ma_channel>, ma_uint32)>>('ma_channel_map_is_valid');
  late final _ma_channel_map_is_valid = _ma_channel_map_is_validPtr
      .asFunction<int Function(ffi.Pointer<ma_channel>, int)>(isLeaf: true);

  /// General Library Documentation Undocument By General Corporation & Global Corporation & General Developer
  int ma_channel_map_is_equal(
    ffi.Pointer<ma_channel> pChannelMapA,
    ffi.Pointer<ma_channel> pChannelMapB,
    int channels,
  ) {
    return _ma_channel_map_is_equal(
      pChannelMapA,
      pChannelMapB,
      channels,
    );
  }

  late final _ma_channel_map_is_equalPtr = _lookup<
      ffi.NativeFunction<
          ma_bool32 Function(ffi.Pointer<ma_channel>, ffi.Pointer<ma_channel>,
              ma_uint32)>>('ma_channel_map_is_equal');
  late final _ma_channel_map_is_equal = _ma_channel_map_is_equalPtr.asFunction<
      int Function(
          ffi.Pointer<ma_channel>, ffi.Pointer<ma_channel>, int)>(isLeaf: true);

  /// General Library Documentation Undocument By General Corporation & Global Corporation & General Developer
  int ma_channel_map_is_blank(
    ffi.Pointer<ma_channel> pChannelMap,
    int channels,
  ) {
    return _ma_channel_map_is_blank(
      pChannelMap,
      channels,
    );
  }

  late final _ma_channel_map_is_blankPtr = _lookup<
      ffi.NativeFunction<
          ma_bool32 Function(
              ffi.Pointer<ma_channel>, ma_uint32)>>('ma_channel_map_is_blank');
  late final _ma_channel_map_is_blank = _ma_channel_map_is_blankPtr
      .asFunction<int Function(ffi.Pointer<ma_channel>, int)>(isLeaf: true);

  /// General Library Documentation Undocument By General Corporation & Global Corporation & General Developer
  int ma_channel_map_contains_channel_position(
    int channels,
    ffi.Pointer<ma_channel> pChannelMap,
    int channelPosition,
  ) {
    return _ma_channel_map_contains_channel_position(
      channels,
      pChannelMap,
      channelPosition,
    );
  }

  late final _ma_channel_map_contains_channel_positionPtr = _lookup<
      ffi.NativeFunction<
          ma_bool32 Function(ma_uint32, ffi.Pointer<ma_channel>,
              ma_channel)>>('ma_channel_map_contains_channel_position');
  late final _ma_channel_map_contains_channel_position =
      _ma_channel_map_contains_channel_positionPtr
          .asFunction<int Function(int, ffi.Pointer<ma_channel>, int)>(
              isLeaf: true);

  /// General Library Documentation Undocument By General Corporation & Global Corporation & General Developer
  int ma_channel_map_find_channel_position(
    int channels,
    ffi.Pointer<ma_channel> pChannelMap,
    int channelPosition,
    ffi.Pointer<ma_uint32> pChannelIndex,
  ) {
    return _ma_channel_map_find_channel_position(
      channels,
      pChannelMap,
      channelPosition,
      pChannelIndex,
    );
  }

  late final _ma_channel_map_find_channel_positionPtr = _lookup<
      ffi.NativeFunction<
          ma_bool32 Function(ma_uint32, ffi.Pointer<ma_channel>, ma_channel,
              ffi.Pointer<ma_uint32>)>>('ma_channel_map_find_channel_position');
  late final _ma_channel_map_find_channel_position =
      _ma_channel_map_find_channel_positionPtr.asFunction<
          int Function(int, ffi.Pointer<ma_channel>, int,
              ffi.Pointer<ma_uint32>)>(isLeaf: true);

  /// General Library Documentation Undocument By General Corporation & Global Corporation & General Developer
  int ma_channel_map_to_string(
    ffi.Pointer<ma_channel> pChannelMap,
    int channels,
    ffi.Pointer<ffi.Char> pBufferOut,
    int bufferCap,
  ) {
    return _ma_channel_map_to_string(
      pChannelMap,
      channels,
      pBufferOut,
      bufferCap,
    );
  }

  late final _ma_channel_map_to_stringPtr = _lookup<
      ffi.NativeFunction<
          ffi.Size Function(ffi.Pointer<ma_channel>, ma_uint32,
              ffi.Pointer<ffi.Char>, ffi.Size)>>('ma_channel_map_to_string');
  late final _ma_channel_map_to_string =
      _ma_channel_map_to_stringPtr.asFunction<
          int Function(ffi.Pointer<ma_channel>, int, ffi.Pointer<ffi.Char>,
              int)>(isLeaf: true);

  /// General Library Documentation Undocument By General Corporation & Global Corporation & General Developer
  ffi.Pointer<ffi.Char> ma_channel_position_to_string(
    int channel,
  ) {
    return _ma_channel_position_to_string(
      channel,
    );
  }

  late final _ma_channel_position_to_stringPtr =
      _lookup<ffi.NativeFunction<ffi.Pointer<ffi.Char> Function(ma_channel)>>(
          'ma_channel_position_to_string');
  late final _ma_channel_position_to_string = _ma_channel_position_to_stringPtr
      .asFunction<ffi.Pointer<ffi.Char> Function(int)>(isLeaf: true);

  /// Conversion Helpers
  int ma_convert_frames(
    ffi.Pointer<ffi.Void> pOut,
    int frameCountOut,
    int formatOut,
    int channelsOut,
    int sampleRateOut,
    ffi.Pointer<ffi.Void> pIn,
    int frameCountIn,
    int formatIn,
    int channelsIn,
    int sampleRateIn,
  ) {
    return _ma_convert_frames(
      pOut,
      frameCountOut,
      formatOut,
      channelsOut,
      sampleRateOut,
      pIn,
      frameCountIn,
      formatIn,
      channelsIn,
      sampleRateIn,
    );
  }

  late final _ma_convert_framesPtr = _lookup<
      ffi.NativeFunction<
          ma_uint64 Function(
              ffi.Pointer<ffi.Void>,
              ma_uint64,
              ffi.Int32,
              ma_uint32,
              ma_uint32,
              ffi.Pointer<ffi.Void>,
              ma_uint64,
              ffi.Int32,
              ma_uint32,
              ma_uint32)>>('ma_convert_frames');
  late final _ma_convert_frames = _ma_convert_framesPtr.asFunction<
      int Function(ffi.Pointer<ffi.Void>, int, int, int, int,
          ffi.Pointer<ffi.Void>, int, int, int, int)>(isLeaf: true);

  /// General Library Documentation Undocument By General Corporation & Global Corporation & General Developer
  int ma_convert_frames_ex(
    ffi.Pointer<ffi.Void> pOut,
    int frameCountOut,
    ffi.Pointer<ffi.Void> pIn,
    int frameCountIn,
    ffi.Pointer<ma_data_converter_config> pConfig,
  ) {
    return _ma_convert_frames_ex(
      pOut,
      frameCountOut,
      pIn,
      frameCountIn,
      pConfig,
    );
  }

  late final _ma_convert_frames_exPtr = _lookup<
      ffi.NativeFunction<
          ma_uint64 Function(
              ffi.Pointer<ffi.Void>,
              ma_uint64,
              ffi.Pointer<ffi.Void>,
              ma_uint64,
              ffi.Pointer<ma_data_converter_config>)>>('ma_convert_frames_ex');
  late final _ma_convert_frames_ex = _ma_convert_frames_exPtr.asFunction<
      int Function(ffi.Pointer<ffi.Void>, int, ffi.Pointer<ffi.Void>, int,
          ffi.Pointer<ma_data_converter_config>)>(isLeaf: true);

  /// General Library Documentation Undocument By General Corporation & Global Corporation & General Developer
  ma_data_source_config ma_data_source_config_init() {
    return _ma_data_source_config_init();
  }

  late final _ma_data_source_config_initPtr =
      _lookup<ffi.NativeFunction<ma_data_source_config Function()>>(
          'ma_data_source_config_init');
  late final _ma_data_source_config_init = _ma_data_source_config_initPtr
      .asFunction<ma_data_source_config Function()>(isLeaf: true);

  /// General Library Documentation Undocument By General Corporation & Global Corporation & General Developer
  int ma_data_source_init(
    ffi.Pointer<ma_data_source_config> pConfig,
    ffi.Pointer<ma_data_source> pDataSource,
  ) {
    return _ma_data_source_init(
      pConfig,
      pDataSource,
    );
  }

  late final _ma_data_source_initPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int32 Function(ffi.Pointer<ma_data_source_config>,
              ffi.Pointer<ma_data_source>)>>('ma_data_source_init');
  late final _ma_data_source_init = _ma_data_source_initPtr.asFunction<
      int Function(ffi.Pointer<ma_data_source_config>,
          ffi.Pointer<ma_data_source>)>(isLeaf: true);

  /// General Library Documentation Undocument By General Corporation & Global Corporation & General Developer
  void ma_data_source_uninit(
    ffi.Pointer<ma_data_source> pDataSource,
  ) {
    return _ma_data_source_uninit(
      pDataSource,
    );
  }

  late final _ma_data_source_uninitPtr = _lookup<
          ffi.NativeFunction<ffi.Void Function(ffi.Pointer<ma_data_source>)>>(
      'ma_data_source_uninit');
  late final _ma_data_source_uninit = _ma_data_source_uninitPtr
      .asFunction<void Function(ffi.Pointer<ma_data_source>)>(isLeaf: true);

  /// General Library Documentation Undocument By General Corporation & Global Corporation & General Developer
  int ma_data_source_read_pcm_frames(
    ffi.Pointer<ma_data_source> pDataSource,
    ffi.Pointer<ffi.Void> pFramesOut,
    int frameCount,
    ffi.Pointer<ma_uint64> pFramesRead,
  ) {
    return _ma_data_source_read_pcm_frames(
      pDataSource,
      pFramesOut,
      frameCount,
      pFramesRead,
    );
  }

  late final _ma_data_source_read_pcm_framesPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int32 Function(
              ffi.Pointer<ma_data_source>,
              ffi.Pointer<ffi.Void>,
              ma_uint64,
              ffi.Pointer<ma_uint64>)>>('ma_data_source_read_pcm_frames');
  late final _ma_data_source_read_pcm_frames =
      _ma_data_source_read_pcm_framesPtr.asFunction<
          int Function(ffi.Pointer<ma_data_source>, ffi.Pointer<ffi.Void>, int,
              ffi.Pointer<ma_uint64>)>(isLeaf: true);

  /// General Library Documentation Undocument By General Corporation & Global Corporation & General Developer
  int ma_data_source_seek_pcm_frames(
    ffi.Pointer<ma_data_source> pDataSource,
    int frameCount,
    ffi.Pointer<ma_uint64> pFramesSeeked,
  ) {
    return _ma_data_source_seek_pcm_frames(
      pDataSource,
      frameCount,
      pFramesSeeked,
    );
  }

  late final _ma_data_source_seek_pcm_framesPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int32 Function(ffi.Pointer<ma_data_source>, ma_uint64,
              ffi.Pointer<ma_uint64>)>>('ma_data_source_seek_pcm_frames');
  late final _ma_data_source_seek_pcm_frames =
      _ma_data_source_seek_pcm_framesPtr.asFunction<
          int Function(ffi.Pointer<ma_data_source>, int,
              ffi.Pointer<ma_uint64>)>(isLeaf: true);

  /// General Library Documentation Undocument By General Corporation & Global Corporation & General Developer
  int ma_data_source_seek_to_pcm_frame(
    ffi.Pointer<ma_data_source> pDataSource,
    int frameIndex,
  ) {
    return _ma_data_source_seek_to_pcm_frame(
      pDataSource,
      frameIndex,
    );
  }

  late final _ma_data_source_seek_to_pcm_framePtr = _lookup<
      ffi.NativeFunction<
          ffi.Int32 Function(ffi.Pointer<ma_data_source>,
              ma_uint64)>>('ma_data_source_seek_to_pcm_frame');
  late final _ma_data_source_seek_to_pcm_frame =
      _ma_data_source_seek_to_pcm_framePtr
          .asFunction<int Function(ffi.Pointer<ma_data_source>, int)>(
              isLeaf: true);

  /// General Library Documentation Undocument By General Corporation & Global Corporation & General Developer
  int ma_data_source_get_data_format(
    ffi.Pointer<ma_data_source> pDataSource,
    ffi.Pointer<ffi.Int32> pFormat,
    ffi.Pointer<ma_uint32> pChannels,
    ffi.Pointer<ma_uint32> pSampleRate,
    ffi.Pointer<ma_channel> pChannelMap,
    int channelMapCap,
  ) {
    return _ma_data_source_get_data_format(
      pDataSource,
      pFormat,
      pChannels,
      pSampleRate,
      pChannelMap,
      channelMapCap,
    );
  }

  late final _ma_data_source_get_data_formatPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int32 Function(
              ffi.Pointer<ma_data_source>,
              ffi.Pointer<ffi.Int32>,
              ffi.Pointer<ma_uint32>,
              ffi.Pointer<ma_uint32>,
              ffi.Pointer<ma_channel>,
              ffi.Size)>>('ma_data_source_get_data_format');
  late final _ma_data_source_get_data_format =
      _ma_data_source_get_data_formatPtr.asFunction<
          int Function(
              ffi.Pointer<ma_data_source>,
              ffi.Pointer<ffi.Int32>,
              ffi.Pointer<ma_uint32>,
              ffi.Pointer<ma_uint32>,
              ffi.Pointer<ma_channel>,
              int)>(isLeaf: true);

  /// General Library Documentation Undocument By General Corporation & Global Corporation & General Developer
  int ma_data_source_get_cursor_in_pcm_frames(
    ffi.Pointer<ma_data_source> pDataSource,
    ffi.Pointer<ma_uint64> pCursor,
  ) {
    return _ma_data_source_get_cursor_in_pcm_frames(
      pDataSource,
      pCursor,
    );
  }

  late final _ma_data_source_get_cursor_in_pcm_framesPtr = _lookup<
          ffi.NativeFunction<
              ffi.Int32 Function(
                  ffi.Pointer<ma_data_source>, ffi.Pointer<ma_uint64>)>>(
      'ma_data_source_get_cursor_in_pcm_frames');
  late final _ma_data_source_get_cursor_in_pcm_frames =
      _ma_data_source_get_cursor_in_pcm_framesPtr.asFunction<
          int Function(ffi.Pointer<ma_data_source>,
              ffi.Pointer<ma_uint64>)>(isLeaf: true);

  /// General Library Documentation Undocument By General Corporation & Global Corporation & General Developer
  int ma_data_source_get_length_in_pcm_frames(
    ffi.Pointer<ma_data_source> pDataSource,
    ffi.Pointer<ma_uint64> pLength,
  ) {
    return _ma_data_source_get_length_in_pcm_frames(
      pDataSource,
      pLength,
    );
  }

  late final _ma_data_source_get_length_in_pcm_framesPtr = _lookup<
          ffi.NativeFunction<
              ffi.Int32 Function(
                  ffi.Pointer<ma_data_source>, ffi.Pointer<ma_uint64>)>>(
      'ma_data_source_get_length_in_pcm_frames');
  late final _ma_data_source_get_length_in_pcm_frames =
      _ma_data_source_get_length_in_pcm_framesPtr.asFunction<
          int Function(ffi.Pointer<ma_data_source>,
              ffi.Pointer<ma_uint64>)>(isLeaf: true);

  /// General Library Documentation Undocument By General Corporation & Global Corporation & General Developer
  int ma_data_source_get_cursor_in_seconds(
    ffi.Pointer<ma_data_source> pDataSource,
    ffi.Pointer<ffi.Float> pCursor,
  ) {
    return _ma_data_source_get_cursor_in_seconds(
      pDataSource,
      pCursor,
    );
  }

  late final _ma_data_source_get_cursor_in_secondsPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int32 Function(ffi.Pointer<ma_data_source>,
              ffi.Pointer<ffi.Float>)>>('ma_data_source_get_cursor_in_seconds');
  late final _ma_data_source_get_cursor_in_seconds =
      _ma_data_source_get_cursor_in_secondsPtr.asFunction<
          int Function(ffi.Pointer<ma_data_source>,
              ffi.Pointer<ffi.Float>)>(isLeaf: true);

  /// General Library Documentation Undocument By General Corporation & Global Corporation & General Developer
  int ma_data_source_get_length_in_seconds(
    ffi.Pointer<ma_data_source> pDataSource,
    ffi.Pointer<ffi.Float> pLength,
  ) {
    return _ma_data_source_get_length_in_seconds(
      pDataSource,
      pLength,
    );
  }

  late final _ma_data_source_get_length_in_secondsPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int32 Function(ffi.Pointer<ma_data_source>,
              ffi.Pointer<ffi.Float>)>>('ma_data_source_get_length_in_seconds');
  late final _ma_data_source_get_length_in_seconds =
      _ma_data_source_get_length_in_secondsPtr.asFunction<
          int Function(ffi.Pointer<ma_data_source>,
              ffi.Pointer<ffi.Float>)>(isLeaf: true);

  /// General Library Documentation Undocument By General Corporation & Global Corporation & General Developer
  int ma_data_source_set_looping(
    ffi.Pointer<ma_data_source> pDataSource,
    int isLooping,
  ) {
    return _ma_data_source_set_looping(
      pDataSource,
      isLooping,
    );
  }

  late final _ma_data_source_set_loopingPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int32 Function(ffi.Pointer<ma_data_source>,
              ma_bool32)>>('ma_data_source_set_looping');
  late final _ma_data_source_set_looping = _ma_data_source_set_loopingPtr
      .asFunction<int Function(ffi.Pointer<ma_data_source>, int)>(isLeaf: true);

  /// General Library Documentation Undocument By General Corporation & Global Corporation & General Developer
  int ma_data_source_is_looping(
    ffi.Pointer<ma_data_source> pDataSource,
  ) {
    return _ma_data_source_is_looping(
      pDataSource,
    );
  }

  late final _ma_data_source_is_loopingPtr = _lookup<
          ffi.NativeFunction<ma_bool32 Function(ffi.Pointer<ma_data_source>)>>(
      'ma_data_source_is_looping');
  late final _ma_data_source_is_looping = _ma_data_source_is_loopingPtr
      .asFunction<int Function(ffi.Pointer<ma_data_source>)>(isLeaf: true);

  /// General Library Documentation Undocument By General Corporation & Global Corporation & General Developer
  int ma_data_source_set_range_in_pcm_frames(
    ffi.Pointer<ma_data_source> pDataSource,
    int rangeBegInFrames,
    int rangeEndInFrames,
  ) {
    return _ma_data_source_set_range_in_pcm_frames(
      pDataSource,
      rangeBegInFrames,
      rangeEndInFrames,
    );
  }

  late final _ma_data_source_set_range_in_pcm_framesPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int32 Function(ffi.Pointer<ma_data_source>, ma_uint64,
              ma_uint64)>>('ma_data_source_set_range_in_pcm_frames');
  late final _ma_data_source_set_range_in_pcm_frames =
      _ma_data_source_set_range_in_pcm_framesPtr
          .asFunction<int Function(ffi.Pointer<ma_data_source>, int, int)>(
              isLeaf: true);

  /// General Library Documentation Undocument By General Corporation & Global Corporation & General Developer
  void ma_data_source_get_range_in_pcm_frames(
    ffi.Pointer<ma_data_source> pDataSource,
    ffi.Pointer<ma_uint64> pRangeBegInFrames,
    ffi.Pointer<ma_uint64> pRangeEndInFrames,
  ) {
    return _ma_data_source_get_range_in_pcm_frames(
      pDataSource,
      pRangeBegInFrames,
      pRangeEndInFrames,
    );
  }

  late final _ma_data_source_get_range_in_pcm_framesPtr = _lookup<
          ffi.NativeFunction<
              ffi.Void Function(ffi.Pointer<ma_data_source>,
                  ffi.Pointer<ma_uint64>, ffi.Pointer<ma_uint64>)>>(
      'ma_data_source_get_range_in_pcm_frames');
  late final _ma_data_source_get_range_in_pcm_frames =
      _ma_data_source_get_range_in_pcm_framesPtr.asFunction<
          void Function(ffi.Pointer<ma_data_source>, ffi.Pointer<ma_uint64>,
              ffi.Pointer<ma_uint64>)>(isLeaf: true);

  /// General Library Documentation Undocument By General Corporation & Global Corporation & General Developer
  int ma_data_source_set_loop_point_in_pcm_frames(
    ffi.Pointer<ma_data_source> pDataSource,
    int loopBegInFrames,
    int loopEndInFrames,
  ) {
    return _ma_data_source_set_loop_point_in_pcm_frames(
      pDataSource,
      loopBegInFrames,
      loopEndInFrames,
    );
  }

  late final _ma_data_source_set_loop_point_in_pcm_framesPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int32 Function(ffi.Pointer<ma_data_source>, ma_uint64,
              ma_uint64)>>('ma_data_source_set_loop_point_in_pcm_frames');
  late final _ma_data_source_set_loop_point_in_pcm_frames =
      _ma_data_source_set_loop_point_in_pcm_framesPtr
          .asFunction<int Function(ffi.Pointer<ma_data_source>, int, int)>(
              isLeaf: true);

  /// General Library Documentation Undocument By General Corporation & Global Corporation & General Developer
  void ma_data_source_get_loop_point_in_pcm_frames(
    ffi.Pointer<ma_data_source> pDataSource,
    ffi.Pointer<ma_uint64> pLoopBegInFrames,
    ffi.Pointer<ma_uint64> pLoopEndInFrames,
  ) {
    return _ma_data_source_get_loop_point_in_pcm_frames(
      pDataSource,
      pLoopBegInFrames,
      pLoopEndInFrames,
    );
  }

  late final _ma_data_source_get_loop_point_in_pcm_framesPtr = _lookup<
          ffi.NativeFunction<
              ffi.Void Function(ffi.Pointer<ma_data_source>,
                  ffi.Pointer<ma_uint64>, ffi.Pointer<ma_uint64>)>>(
      'ma_data_source_get_loop_point_in_pcm_frames');
  late final _ma_data_source_get_loop_point_in_pcm_frames =
      _ma_data_source_get_loop_point_in_pcm_framesPtr.asFunction<
          void Function(ffi.Pointer<ma_data_source>, ffi.Pointer<ma_uint64>,
              ffi.Pointer<ma_uint64>)>(isLeaf: true);

  /// General Library Documentation Undocument By General Corporation & Global Corporation & General Developer
  int ma_data_source_set_current(
    ffi.Pointer<ma_data_source> pDataSource,
    ffi.Pointer<ma_data_source> pCurrentDataSource,
  ) {
    return _ma_data_source_set_current(
      pDataSource,
      pCurrentDataSource,
    );
  }

  late final _ma_data_source_set_currentPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int32 Function(ffi.Pointer<ma_data_source>,
              ffi.Pointer<ma_data_source>)>>('ma_data_source_set_current');
  late final _ma_data_source_set_current =
      _ma_data_source_set_currentPtr.asFunction<
          int Function(ffi.Pointer<ma_data_source>,
              ffi.Pointer<ma_data_source>)>(isLeaf: true);

  /// General Library Documentation Undocument By General Corporation & Global Corporation & General Developer
  ffi.Pointer<ma_data_source> ma_data_source_get_current(
    ffi.Pointer<ma_data_source> pDataSource,
  ) {
    return _ma_data_source_get_current(
      pDataSource,
    );
  }

  late final _ma_data_source_get_currentPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ma_data_source> Function(
              ffi.Pointer<ma_data_source>)>>('ma_data_source_get_current');
  late final _ma_data_source_get_current =
      _ma_data_source_get_currentPtr.asFunction<
          ffi.Pointer<ma_data_source> Function(
              ffi.Pointer<ma_data_source>)>(isLeaf: true);

  /// General Library Documentation Undocument By General Corporation & Global Corporation & General Developer
  int ma_data_source_set_next(
    ffi.Pointer<ma_data_source> pDataSource,
    ffi.Pointer<ma_data_source> pNextDataSource,
  ) {
    return _ma_data_source_set_next(
      pDataSource,
      pNextDataSource,
    );
  }

  late final _ma_data_source_set_nextPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int32 Function(ffi.Pointer<ma_data_source>,
              ffi.Pointer<ma_data_source>)>>('ma_data_source_set_next');
  late final _ma_data_source_set_next = _ma_data_source_set_nextPtr.asFunction<
      int Function(ffi.Pointer<ma_data_source>,
          ffi.Pointer<ma_data_source>)>(isLeaf: true);

  /// General Library Documentation Undocument By General Corporation & Global Corporation & General Developer
  ffi.Pointer<ma_data_source> ma_data_source_get_next(
    ffi.Pointer<ma_data_source> pDataSource,
  ) {
    return _ma_data_source_get_next(
      pDataSource,
    );
  }

  late final _ma_data_source_get_nextPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ma_data_source> Function(
              ffi.Pointer<ma_data_source>)>>('ma_data_source_get_next');
  late final _ma_data_source_get_next = _ma_data_source_get_nextPtr.asFunction<
      ffi.Pointer<ma_data_source> Function(
          ffi.Pointer<ma_data_source>)>(isLeaf: true);

  /// General Library Documentation Undocument By General Corporation & Global Corporation & General Developer
  int ma_data_source_set_next_callback(
    ffi.Pointer<ma_data_source> pDataSource,
    ma_data_source_get_next_proc onGetNext,
  ) {
    return _ma_data_source_set_next_callback(
      pDataSource,
      onGetNext,
    );
  }

  late final _ma_data_source_set_next_callbackPtr = _lookup<
          ffi.NativeFunction<
              ffi.Int32 Function(
                  ffi.Pointer<ma_data_source>, ma_data_source_get_next_proc)>>(
      'ma_data_source_set_next_callback');
  late final _ma_data_source_set_next_callback =
      _ma_data_source_set_next_callbackPtr.asFunction<
          int Function(ffi.Pointer<ma_data_source>,
              ma_data_source_get_next_proc)>(isLeaf: true);

  /// General Library Documentation Undocument By General Corporation & Global Corporation & General Developer
  ma_data_source_get_next_proc ma_data_source_get_next_callback(
    ffi.Pointer<ma_data_source> pDataSource,
  ) {
    return _ma_data_source_get_next_callback(
      pDataSource,
    );
  }

  late final _ma_data_source_get_next_callbackPtr = _lookup<
          ffi.NativeFunction<
              ma_data_source_get_next_proc Function(
                  ffi.Pointer<ma_data_source>)>>(
      'ma_data_source_get_next_callback');
  late final _ma_data_source_get_next_callback =
      _ma_data_source_get_next_callbackPtr.asFunction<
          ma_data_source_get_next_proc Function(
              ffi.Pointer<ma_data_source>)>(isLeaf: true);

  /// General Library Documentation Undocument By General Corporation & Global Corporation & General Developer
  int ma_audio_buffer_ref_init(
    int format,
    int channels,
    ffi.Pointer<ffi.Void> pData,
    int sizeInFrames,
    ffi.Pointer<ma_audio_buffer_ref> pAudioBufferRef,
  ) {
    return _ma_audio_buffer_ref_init(
      format,
      channels,
      pData,
      sizeInFrames,
      pAudioBufferRef,
    );
  }

  late final _ma_audio_buffer_ref_initPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int32 Function(
              ffi.Int32,
              ma_uint32,
              ffi.Pointer<ffi.Void>,
              ma_uint64,
              ffi.Pointer<ma_audio_buffer_ref>)>>('ma_audio_buffer_ref_init');
  late final _ma_audio_buffer_ref_init =
      _ma_audio_buffer_ref_initPtr.asFunction<
          int Function(int, int, ffi.Pointer<ffi.Void>, int,
              ffi.Pointer<ma_audio_buffer_ref>)>(isLeaf: true);

  /// General Library Documentation Undocument By General Corporation & Global Corporation & General Developer
  void ma_audio_buffer_ref_uninit(
    ffi.Pointer<ma_audio_buffer_ref> pAudioBufferRef,
  ) {
    return _ma_audio_buffer_ref_uninit(
      pAudioBufferRef,
    );
  }

  late final _ma_audio_buffer_ref_uninitPtr = _lookup<
          ffi
          .NativeFunction<ffi.Void Function(ffi.Pointer<ma_audio_buffer_ref>)>>(
      'ma_audio_buffer_ref_uninit');
  late final _ma_audio_buffer_ref_uninit = _ma_audio_buffer_ref_uninitPtr
      .asFunction<void Function(ffi.Pointer<ma_audio_buffer_ref>)>(
          isLeaf: true);

  /// General Library Documentation Undocument By General Corporation & Global Corporation & General Developer
  int ma_audio_buffer_ref_set_data(
    ffi.Pointer<ma_audio_buffer_ref> pAudioBufferRef,
    ffi.Pointer<ffi.Void> pData,
    int sizeInFrames,
  ) {
    return _ma_audio_buffer_ref_set_data(
      pAudioBufferRef,
      pData,
      sizeInFrames,
    );
  }

  late final _ma_audio_buffer_ref_set_dataPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int32 Function(
              ffi.Pointer<ma_audio_buffer_ref>,
              ffi.Pointer<ffi.Void>,
              ma_uint64)>>('ma_audio_buffer_ref_set_data');
  late final _ma_audio_buffer_ref_set_data =
      _ma_audio_buffer_ref_set_dataPtr.asFunction<
          int Function(ffi.Pointer<ma_audio_buffer_ref>, ffi.Pointer<ffi.Void>,
              int)>(isLeaf: true);

  /// General Library Documentation Undocument By General Corporation & Global Corporation & General Developer
  int ma_audio_buffer_ref_read_pcm_frames(
    ffi.Pointer<ma_audio_buffer_ref> pAudioBufferRef,
    ffi.Pointer<ffi.Void> pFramesOut,
    int frameCount,
    int loop,
  ) {
    return _ma_audio_buffer_ref_read_pcm_frames(
      pAudioBufferRef,
      pFramesOut,
      frameCount,
      loop,
    );
  }

  late final _ma_audio_buffer_ref_read_pcm_framesPtr = _lookup<
      ffi.NativeFunction<
          ma_uint64 Function(
              ffi.Pointer<ma_audio_buffer_ref>,
              ffi.Pointer<ffi.Void>,
              ma_uint64,
              ma_bool32)>>('ma_audio_buffer_ref_read_pcm_frames');
  late final _ma_audio_buffer_ref_read_pcm_frames =
      _ma_audio_buffer_ref_read_pcm_framesPtr.asFunction<
          int Function(ffi.Pointer<ma_audio_buffer_ref>, ffi.Pointer<ffi.Void>,
              int, int)>(isLeaf: true);

  /// General Library Documentation Undocument By General Corporation & Global Corporation & General Developer
  int ma_audio_buffer_ref_seek_to_pcm_frame(
    ffi.Pointer<ma_audio_buffer_ref> pAudioBufferRef,
    int frameIndex,
  ) {
    return _ma_audio_buffer_ref_seek_to_pcm_frame(
      pAudioBufferRef,
      frameIndex,
    );
  }

  late final _ma_audio_buffer_ref_seek_to_pcm_framePtr = _lookup<
      ffi.NativeFunction<
          ffi.Int32 Function(ffi.Pointer<ma_audio_buffer_ref>,
              ma_uint64)>>('ma_audio_buffer_ref_seek_to_pcm_frame');
  late final _ma_audio_buffer_ref_seek_to_pcm_frame =
      _ma_audio_buffer_ref_seek_to_pcm_framePtr
          .asFunction<int Function(ffi.Pointer<ma_audio_buffer_ref>, int)>(
              isLeaf: true);

  /// General Library Documentation Undocument By General Corporation & Global Corporation & General Developer
  int ma_audio_buffer_ref_map(
    ffi.Pointer<ma_audio_buffer_ref> pAudioBufferRef,
    ffi.Pointer<ffi.Pointer<ffi.Void>> ppFramesOut,
    ffi.Pointer<ma_uint64> pFrameCount,
  ) {
    return _ma_audio_buffer_ref_map(
      pAudioBufferRef,
      ppFramesOut,
      pFrameCount,
    );
  }

  late final _ma_audio_buffer_ref_mapPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int32 Function(
              ffi.Pointer<ma_audio_buffer_ref>,
              ffi.Pointer<ffi.Pointer<ffi.Void>>,
              ffi.Pointer<ma_uint64>)>>('ma_audio_buffer_ref_map');
  late final _ma_audio_buffer_ref_map = _ma_audio_buffer_ref_mapPtr.asFunction<
      int Function(
          ffi.Pointer<ma_audio_buffer_ref>,
          ffi.Pointer<ffi.Pointer<ffi.Void>>,
          ffi.Pointer<ma_uint64>)>(isLeaf: true);

  /// General Library Documentation Undocument By General Corporation & Global Corporation & General Developer
  int ma_audio_buffer_ref_unmap(
    ffi.Pointer<ma_audio_buffer_ref> pAudioBufferRef,
    int frameCount,
  ) {
    return _ma_audio_buffer_ref_unmap(
      pAudioBufferRef,
      frameCount,
    );
  }

  late final _ma_audio_buffer_ref_unmapPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int32 Function(ffi.Pointer<ma_audio_buffer_ref>,
              ma_uint64)>>('ma_audio_buffer_ref_unmap');
  late final _ma_audio_buffer_ref_unmap = _ma_audio_buffer_ref_unmapPtr
      .asFunction<int Function(ffi.Pointer<ma_audio_buffer_ref>, int)>(
          isLeaf: true);

  /// General Library Documentation Undocument By General Corporation & Global Corporation & General Developer
  int ma_audio_buffer_ref_at_end(
    ffi.Pointer<ma_audio_buffer_ref> pAudioBufferRef,
  ) {
    return _ma_audio_buffer_ref_at_end(
      pAudioBufferRef,
    );
  }

  late final _ma_audio_buffer_ref_at_endPtr = _lookup<
      ffi.NativeFunction<
          ma_bool32 Function(
              ffi.Pointer<ma_audio_buffer_ref>)>>('ma_audio_buffer_ref_at_end');
  late final _ma_audio_buffer_ref_at_end = _ma_audio_buffer_ref_at_endPtr
      .asFunction<int Function(ffi.Pointer<ma_audio_buffer_ref>)>(isLeaf: true);

  /// General Library Documentation Undocument By General Corporation & Global Corporation & General Developer
  int ma_audio_buffer_ref_get_cursor_in_pcm_frames(
    ffi.Pointer<ma_audio_buffer_ref> pAudioBufferRef,
    ffi.Pointer<ma_uint64> pCursor,
  ) {
    return _ma_audio_buffer_ref_get_cursor_in_pcm_frames(
      pAudioBufferRef,
      pCursor,
    );
  }

  late final _ma_audio_buffer_ref_get_cursor_in_pcm_framesPtr = _lookup<
          ffi.NativeFunction<
              ffi.Int32 Function(
                  ffi.Pointer<ma_audio_buffer_ref>, ffi.Pointer<ma_uint64>)>>(
      'ma_audio_buffer_ref_get_cursor_in_pcm_frames');
  late final _ma_audio_buffer_ref_get_cursor_in_pcm_frames =
      _ma_audio_buffer_ref_get_cursor_in_pcm_framesPtr.asFunction<
          int Function(ffi.Pointer<ma_audio_buffer_ref>,
              ffi.Pointer<ma_uint64>)>(isLeaf: true);

  /// General Library Documentation Undocument By General Corporation & Global Corporation & General Developer
  int ma_audio_buffer_ref_get_length_in_pcm_frames(
    ffi.Pointer<ma_audio_buffer_ref> pAudioBufferRef,
    ffi.Pointer<ma_uint64> pLength,
  ) {
    return _ma_audio_buffer_ref_get_length_in_pcm_frames(
      pAudioBufferRef,
      pLength,
    );
  }

  late final _ma_audio_buffer_ref_get_length_in_pcm_framesPtr = _lookup<
          ffi.NativeFunction<
              ffi.Int32 Function(
                  ffi.Pointer<ma_audio_buffer_ref>, ffi.Pointer<ma_uint64>)>>(
      'ma_audio_buffer_ref_get_length_in_pcm_frames');
  late final _ma_audio_buffer_ref_get_length_in_pcm_frames =
      _ma_audio_buffer_ref_get_length_in_pcm_framesPtr.asFunction<
          int Function(ffi.Pointer<ma_audio_buffer_ref>,
              ffi.Pointer<ma_uint64>)>(isLeaf: true);

  /// General Library Documentation Undocument By General Corporation & Global Corporation & General Developer
  int ma_audio_buffer_ref_get_available_frames(
    ffi.Pointer<ma_audio_buffer_ref> pAudioBufferRef,
    ffi.Pointer<ma_uint64> pAvailableFrames,
  ) {
    return _ma_audio_buffer_ref_get_available_frames(
      pAudioBufferRef,
      pAvailableFrames,
    );
  }

  late final _ma_audio_buffer_ref_get_available_framesPtr = _lookup<
          ffi.NativeFunction<
              ffi.Int32 Function(
                  ffi.Pointer<ma_audio_buffer_ref>, ffi.Pointer<ma_uint64>)>>(
      'ma_audio_buffer_ref_get_available_frames');
  late final _ma_audio_buffer_ref_get_available_frames =
      _ma_audio_buffer_ref_get_available_framesPtr.asFunction<
          int Function(ffi.Pointer<ma_audio_buffer_ref>,
              ffi.Pointer<ma_uint64>)>(isLeaf: true);

  /// General Library Documentation Undocument By General Corporation & Global Corporation & General Developer
  ma_audio_buffer_config ma_audio_buffer_config_init(
    int format,
    int channels,
    int sizeInFrames,
    ffi.Pointer<ffi.Void> pData,
    ffi.Pointer<ma_allocation_callbacks> pAllocationCallbacks,
  ) {
    return _ma_audio_buffer_config_init(
      format,
      channels,
      sizeInFrames,
      pData,
      pAllocationCallbacks,
    );
  }

  late final _ma_audio_buffer_config_initPtr = _lookup<
          ffi.NativeFunction<
              ma_audio_buffer_config Function(
                  ffi.Int32,
                  ma_uint32,
                  ma_uint64,
                  ffi.Pointer<ffi.Void>,
                  ffi.Pointer<ma_allocation_callbacks>)>>(
      'ma_audio_buffer_config_init');
  late final _ma_audio_buffer_config_init =
      _ma_audio_buffer_config_initPtr.asFunction<
          ma_audio_buffer_config Function(int, int, int, ffi.Pointer<ffi.Void>,
              ffi.Pointer<ma_allocation_callbacks>)>(isLeaf: true);

  /// General Library Documentation Undocument By General Corporation & Global Corporation & General Developer
  int ma_audio_buffer_init(
    ffi.Pointer<ma_audio_buffer_config> pConfig,
    ffi.Pointer<ma_audio_buffer> pAudioBuffer,
  ) {
    return _ma_audio_buffer_init(
      pConfig,
      pAudioBuffer,
    );
  }

  late final _ma_audio_buffer_initPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int32 Function(ffi.Pointer<ma_audio_buffer_config>,
              ffi.Pointer<ma_audio_buffer>)>>('ma_audio_buffer_init');
  late final _ma_audio_buffer_init = _ma_audio_buffer_initPtr.asFunction<
      int Function(ffi.Pointer<ma_audio_buffer_config>,
          ffi.Pointer<ma_audio_buffer>)>(isLeaf: true);

  /// General Library Documentation Undocument By General Corporation & Global Corporation & General Developer
  int ma_audio_buffer_init_copy(
    ffi.Pointer<ma_audio_buffer_config> pConfig,
    ffi.Pointer<ma_audio_buffer> pAudioBuffer,
  ) {
    return _ma_audio_buffer_init_copy(
      pConfig,
      pAudioBuffer,
    );
  }

  late final _ma_audio_buffer_init_copyPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int32 Function(ffi.Pointer<ma_audio_buffer_config>,
              ffi.Pointer<ma_audio_buffer>)>>('ma_audio_buffer_init_copy');
  late final _ma_audio_buffer_init_copy =
      _ma_audio_buffer_init_copyPtr.asFunction<
          int Function(ffi.Pointer<ma_audio_buffer_config>,
              ffi.Pointer<ma_audio_buffer>)>(isLeaf: true);

  /// General Library Documentation Undocument By General Corporation & Global Corporation & General Developer
  int ma_audio_buffer_alloc_and_init(
    ffi.Pointer<ma_audio_buffer_config> pConfig,
    ffi.Pointer<ffi.Pointer<ma_audio_buffer>> ppAudioBuffer,
  ) {
    return _ma_audio_buffer_alloc_and_init(
      pConfig,
      ppAudioBuffer,
    );
  }

  late final _ma_audio_buffer_alloc_and_initPtr = _lookup<
          ffi.NativeFunction<
              ffi.Int32 Function(ffi.Pointer<ma_audio_buffer_config>,
                  ffi.Pointer<ffi.Pointer<ma_audio_buffer>>)>>(
      'ma_audio_buffer_alloc_and_init');
  late final _ma_audio_buffer_alloc_and_init =
      _ma_audio_buffer_alloc_and_initPtr.asFunction<
          int Function(ffi.Pointer<ma_audio_buffer_config>,
              ffi.Pointer<ffi.Pointer<ma_audio_buffer>>)>(isLeaf: true);

  /// General Library Documentation Undocument By General Corporation & Global Corporation & General Developer
  void ma_audio_buffer_uninit(
    ffi.Pointer<ma_audio_buffer> pAudioBuffer,
  ) {
    return _ma_audio_buffer_uninit(
      pAudioBuffer,
    );
  }

  late final _ma_audio_buffer_uninitPtr = _lookup<
          ffi.NativeFunction<ffi.Void Function(ffi.Pointer<ma_audio_buffer>)>>(
      'ma_audio_buffer_uninit');
  late final _ma_audio_buffer_uninit = _ma_audio_buffer_uninitPtr
      .asFunction<void Function(ffi.Pointer<ma_audio_buffer>)>(isLeaf: true);

  /// General Library Documentation Undocument By General Corporation & Global Corporation & General Developer
  void ma_audio_buffer_uninit_and_free(
    ffi.Pointer<ma_audio_buffer> pAudioBuffer,
  ) {
    return _ma_audio_buffer_uninit_and_free(
      pAudioBuffer,
    );
  }

  late final _ma_audio_buffer_uninit_and_freePtr = _lookup<
          ffi.NativeFunction<ffi.Void Function(ffi.Pointer<ma_audio_buffer>)>>(
      'ma_audio_buffer_uninit_and_free');
  late final _ma_audio_buffer_uninit_and_free =
      _ma_audio_buffer_uninit_and_freePtr
          .asFunction<void Function(ffi.Pointer<ma_audio_buffer>)>(
              isLeaf: true);

  /// General Library Documentation Undocument By General Corporation & Global Corporation & General Developer
  int ma_audio_buffer_read_pcm_frames(
    ffi.Pointer<ma_audio_buffer> pAudioBuffer,
    ffi.Pointer<ffi.Void> pFramesOut,
    int frameCount,
    int loop,
  ) {
    return _ma_audio_buffer_read_pcm_frames(
      pAudioBuffer,
      pFramesOut,
      frameCount,
      loop,
    );
  }

  late final _ma_audio_buffer_read_pcm_framesPtr = _lookup<
      ffi.NativeFunction<
          ma_uint64 Function(
              ffi.Pointer<ma_audio_buffer>,
              ffi.Pointer<ffi.Void>,
              ma_uint64,
              ma_bool32)>>('ma_audio_buffer_read_pcm_frames');
  late final _ma_audio_buffer_read_pcm_frames =
      _ma_audio_buffer_read_pcm_framesPtr.asFunction<
          int Function(ffi.Pointer<ma_audio_buffer>, ffi.Pointer<ffi.Void>, int,
              int)>(isLeaf: true);

  /// General Library Documentation Undocument By General Corporation & Global Corporation & General Developer
  int ma_audio_buffer_seek_to_pcm_frame(
    ffi.Pointer<ma_audio_buffer> pAudioBuffer,
    int frameIndex,
  ) {
    return _ma_audio_buffer_seek_to_pcm_frame(
      pAudioBuffer,
      frameIndex,
    );
  }

  late final _ma_audio_buffer_seek_to_pcm_framePtr = _lookup<
      ffi.NativeFunction<
          ffi.Int32 Function(ffi.Pointer<ma_audio_buffer>,
              ma_uint64)>>('ma_audio_buffer_seek_to_pcm_frame');
  late final _ma_audio_buffer_seek_to_pcm_frame =
      _ma_audio_buffer_seek_to_pcm_framePtr
          .asFunction<int Function(ffi.Pointer<ma_audio_buffer>, int)>(
              isLeaf: true);

  /// General Library Documentation Undocument By General Corporation & Global Corporation & General Developer
  int ma_audio_buffer_map(
    ffi.Pointer<ma_audio_buffer> pAudioBuffer,
    ffi.Pointer<ffi.Pointer<ffi.Void>> ppFramesOut,
    ffi.Pointer<ma_uint64> pFrameCount,
  ) {
    return _ma_audio_buffer_map(
      pAudioBuffer,
      ppFramesOut,
      pFrameCount,
    );
  }

  late final _ma_audio_buffer_mapPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int32 Function(
              ffi.Pointer<ma_audio_buffer>,
              ffi.Pointer<ffi.Pointer<ffi.Void>>,
              ffi.Pointer<ma_uint64>)>>('ma_audio_buffer_map');
  late final _ma_audio_buffer_map = _ma_audio_buffer_mapPtr.asFunction<
      int Function(
          ffi.Pointer<ma_audio_buffer>,
          ffi.Pointer<ffi.Pointer<ffi.Void>>,
          ffi.Pointer<ma_uint64>)>(isLeaf: true);

  /// General Library Documentation Undocument By General Corporation & Global Corporation & General Developer
  int ma_audio_buffer_unmap(
    ffi.Pointer<ma_audio_buffer> pAudioBuffer,
    int frameCount,
  ) {
    return _ma_audio_buffer_unmap(
      pAudioBuffer,
      frameCount,
    );
  }

  late final _ma_audio_buffer_unmapPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int32 Function(ffi.Pointer<ma_audio_buffer>,
              ma_uint64)>>('ma_audio_buffer_unmap');
  late final _ma_audio_buffer_unmap = _ma_audio_buffer_unmapPtr
      .asFunction<int Function(ffi.Pointer<ma_audio_buffer>, int)>(
          isLeaf: true);

  /// General Library Documentation Undocument By General Corporation & Global Corporation & General Developer
  int ma_audio_buffer_at_end(
    ffi.Pointer<ma_audio_buffer> pAudioBuffer,
  ) {
    return _ma_audio_buffer_at_end(
      pAudioBuffer,
    );
  }

  late final _ma_audio_buffer_at_endPtr = _lookup<
          ffi.NativeFunction<ma_bool32 Function(ffi.Pointer<ma_audio_buffer>)>>(
      'ma_audio_buffer_at_end');
  late final _ma_audio_buffer_at_end = _ma_audio_buffer_at_endPtr
      .asFunction<int Function(ffi.Pointer<ma_audio_buffer>)>(isLeaf: true);

  /// General Library Documentation Undocument By General Corporation & Global Corporation & General Developer
  int ma_audio_buffer_get_cursor_in_pcm_frames(
    ffi.Pointer<ma_audio_buffer> pAudioBuffer,
    ffi.Pointer<ma_uint64> pCursor,
  ) {
    return _ma_audio_buffer_get_cursor_in_pcm_frames(
      pAudioBuffer,
      pCursor,
    );
  }

  late final _ma_audio_buffer_get_cursor_in_pcm_framesPtr = _lookup<
          ffi.NativeFunction<
              ffi.Int32 Function(
                  ffi.Pointer<ma_audio_buffer>, ffi.Pointer<ma_uint64>)>>(
      'ma_audio_buffer_get_cursor_in_pcm_frames');
  late final _ma_audio_buffer_get_cursor_in_pcm_frames =
      _ma_audio_buffer_get_cursor_in_pcm_framesPtr.asFunction<
          int Function(ffi.Pointer<ma_audio_buffer>,
              ffi.Pointer<ma_uint64>)>(isLeaf: true);

  /// General Library Documentation Undocument By General Corporation & Global Corporation & General Developer
  int ma_audio_buffer_get_length_in_pcm_frames(
    ffi.Pointer<ma_audio_buffer> pAudioBuffer,
    ffi.Pointer<ma_uint64> pLength,
  ) {
    return _ma_audio_buffer_get_length_in_pcm_frames(
      pAudioBuffer,
      pLength,
    );
  }

  late final _ma_audio_buffer_get_length_in_pcm_framesPtr = _lookup<
          ffi.NativeFunction<
              ffi.Int32 Function(
                  ffi.Pointer<ma_audio_buffer>, ffi.Pointer<ma_uint64>)>>(
      'ma_audio_buffer_get_length_in_pcm_frames');
  late final _ma_audio_buffer_get_length_in_pcm_frames =
      _ma_audio_buffer_get_length_in_pcm_framesPtr.asFunction<
          int Function(ffi.Pointer<ma_audio_buffer>,
              ffi.Pointer<ma_uint64>)>(isLeaf: true);

  /// General Library Documentation Undocument By General Corporation & Global Corporation & General Developer
  int ma_audio_buffer_get_available_frames(
    ffi.Pointer<ma_audio_buffer> pAudioBuffer,
    ffi.Pointer<ma_uint64> pAvailableFrames,
  ) {
    return _ma_audio_buffer_get_available_frames(
      pAudioBuffer,
      pAvailableFrames,
    );
  }

  late final _ma_audio_buffer_get_available_framesPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int32 Function(ffi.Pointer<ma_audio_buffer>,
              ffi.Pointer<ma_uint64>)>>('ma_audio_buffer_get_available_frames');
  late final _ma_audio_buffer_get_available_frames =
      _ma_audio_buffer_get_available_framesPtr.asFunction<
          int Function(ffi.Pointer<ma_audio_buffer>,
              ffi.Pointer<ma_uint64>)>(isLeaf: true);

  /// General Library Documentation Undocument By General Corporation & Global Corporation & General Developer
  int ma_paged_audio_buffer_data_init(
    int format,
    int channels,
    ffi.Pointer<ma_paged_audio_buffer_data> pData,
  ) {
    return _ma_paged_audio_buffer_data_init(
      format,
      channels,
      pData,
    );
  }

  late final _ma_paged_audio_buffer_data_initPtr = _lookup<
          ffi.NativeFunction<
              ffi.Int32 Function(ffi.Int32, ma_uint32,
                  ffi.Pointer<ma_paged_audio_buffer_data>)>>(
      'ma_paged_audio_buffer_data_init');
  late final _ma_paged_audio_buffer_data_init =
      _ma_paged_audio_buffer_data_initPtr.asFunction<
          int Function(
              int, int, ffi.Pointer<ma_paged_audio_buffer_data>)>(isLeaf: true);

  /// General Library Documentation Undocument By General Corporation & Global Corporation & General Developer
  void ma_paged_audio_buffer_data_uninit(
    ffi.Pointer<ma_paged_audio_buffer_data> pData,
    ffi.Pointer<ma_allocation_callbacks> pAllocationCallbacks,
  ) {
    return _ma_paged_audio_buffer_data_uninit(
      pData,
      pAllocationCallbacks,
    );
  }

  late final _ma_paged_audio_buffer_data_uninitPtr = _lookup<
          ffi.NativeFunction<
              ffi.Void Function(ffi.Pointer<ma_paged_audio_buffer_data>,
                  ffi.Pointer<ma_allocation_callbacks>)>>(
      'ma_paged_audio_buffer_data_uninit');
  late final _ma_paged_audio_buffer_data_uninit =
      _ma_paged_audio_buffer_data_uninitPtr.asFunction<
          void Function(ffi.Pointer<ma_paged_audio_buffer_data>,
              ffi.Pointer<ma_allocation_callbacks>)>(isLeaf: true);

  /// General Library Documentation Undocument By General Corporation & Global Corporation & General Developer
  ffi.Pointer<ma_paged_audio_buffer_page> ma_paged_audio_buffer_data_get_head(
    ffi.Pointer<ma_paged_audio_buffer_data> pData,
  ) {
    return _ma_paged_audio_buffer_data_get_head(
      pData,
    );
  }

  late final _ma_paged_audio_buffer_data_get_headPtr = _lookup<
          ffi.NativeFunction<
              ffi.Pointer<ma_paged_audio_buffer_page> Function(
                  ffi.Pointer<ma_paged_audio_buffer_data>)>>(
      'ma_paged_audio_buffer_data_get_head');
  late final _ma_paged_audio_buffer_data_get_head =
      _ma_paged_audio_buffer_data_get_headPtr.asFunction<
          ffi.Pointer<ma_paged_audio_buffer_page> Function(
              ffi.Pointer<ma_paged_audio_buffer_data>)>(isLeaf: true);

  /// General Library Documentation Undocument By General Corporation & Global Corporation & General Developer
  ffi.Pointer<ma_paged_audio_buffer_page> ma_paged_audio_buffer_data_get_tail(
    ffi.Pointer<ma_paged_audio_buffer_data> pData,
  ) {
    return _ma_paged_audio_buffer_data_get_tail(
      pData,
    );
  }

  late final _ma_paged_audio_buffer_data_get_tailPtr = _lookup<
          ffi.NativeFunction<
              ffi.Pointer<ma_paged_audio_buffer_page> Function(
                  ffi.Pointer<ma_paged_audio_buffer_data>)>>(
      'ma_paged_audio_buffer_data_get_tail');
  late final _ma_paged_audio_buffer_data_get_tail =
      _ma_paged_audio_buffer_data_get_tailPtr.asFunction<
          ffi.Pointer<ma_paged_audio_buffer_page> Function(
              ffi.Pointer<ma_paged_audio_buffer_data>)>(isLeaf: true);

  /// General Library Documentation Undocument By General Corporation & Global Corporation & General Developer
  int ma_paged_audio_buffer_data_get_length_in_pcm_frames(
    ffi.Pointer<ma_paged_audio_buffer_data> pData,
    ffi.Pointer<ma_uint64> pLength,
  ) {
    return _ma_paged_audio_buffer_data_get_length_in_pcm_frames(
      pData,
      pLength,
    );
  }

  late final _ma_paged_audio_buffer_data_get_length_in_pcm_framesPtr = _lookup<
          ffi.NativeFunction<
              ffi.Int32 Function(ffi.Pointer<ma_paged_audio_buffer_data>,
                  ffi.Pointer<ma_uint64>)>>(
      'ma_paged_audio_buffer_data_get_length_in_pcm_frames');
  late final _ma_paged_audio_buffer_data_get_length_in_pcm_frames =
      _ma_paged_audio_buffer_data_get_length_in_pcm_framesPtr.asFunction<
          int Function(ffi.Pointer<ma_paged_audio_buffer_data>,
              ffi.Pointer<ma_uint64>)>(isLeaf: true);

  /// General Library Documentation Undocument By General Corporation & Global Corporation & General Developer
  int ma_paged_audio_buffer_data_allocate_page(
    ffi.Pointer<ma_paged_audio_buffer_data> pData,
    int pageSizeInFrames,
    ffi.Pointer<ffi.Void> pInitialData,
    ffi.Pointer<ma_allocation_callbacks> pAllocationCallbacks,
    ffi.Pointer<ffi.Pointer<ma_paged_audio_buffer_page>> ppPage,
  ) {
    return _ma_paged_audio_buffer_data_allocate_page(
      pData,
      pageSizeInFrames,
      pInitialData,
      pAllocationCallbacks,
      ppPage,
    );
  }

  late final _ma_paged_audio_buffer_data_allocate_pagePtr = _lookup<
          ffi.NativeFunction<
              ffi.Int32 Function(
                  ffi.Pointer<ma_paged_audio_buffer_data>,
                  ma_uint64,
                  ffi.Pointer<ffi.Void>,
                  ffi.Pointer<ma_allocation_callbacks>,
                  ffi.Pointer<ffi.Pointer<ma_paged_audio_buffer_page>>)>>(
      'ma_paged_audio_buffer_data_allocate_page');
  late final _ma_paged_audio_buffer_data_allocate_page =
      _ma_paged_audio_buffer_data_allocate_pagePtr.asFunction<
              int Function(
                  ffi.Pointer<ma_paged_audio_buffer_data>,
                  int,
                  ffi.Pointer<ffi.Void>,
                  ffi.Pointer<ma_allocation_callbacks>,
                  ffi.Pointer<ffi.Pointer<ma_paged_audio_buffer_page>>)>(
          isLeaf: true);

  /// General Library Documentation Undocument By General Corporation & Global Corporation & General Developer
  int ma_paged_audio_buffer_data_free_page(
    ffi.Pointer<ma_paged_audio_buffer_data> pData,
    ffi.Pointer<ma_paged_audio_buffer_page> pPage,
    ffi.Pointer<ma_allocation_callbacks> pAllocationCallbacks,
  ) {
    return _ma_paged_audio_buffer_data_free_page(
      pData,
      pPage,
      pAllocationCallbacks,
    );
  }

  late final _ma_paged_audio_buffer_data_free_pagePtr = _lookup<
          ffi.NativeFunction<
              ffi.Int32 Function(
                  ffi.Pointer<ma_paged_audio_buffer_data>,
                  ffi.Pointer<ma_paged_audio_buffer_page>,
                  ffi.Pointer<ma_allocation_callbacks>)>>(
      'ma_paged_audio_buffer_data_free_page');
  late final _ma_paged_audio_buffer_data_free_page =
      _ma_paged_audio_buffer_data_free_pagePtr.asFunction<
          int Function(
              ffi.Pointer<ma_paged_audio_buffer_data>,
              ffi.Pointer<ma_paged_audio_buffer_page>,
              ffi.Pointer<ma_allocation_callbacks>)>(isLeaf: true);

  /// General Library Documentation Undocument By General Corporation & Global Corporation & General Developer
  int ma_paged_audio_buffer_data_append_page(
    ffi.Pointer<ma_paged_audio_buffer_data> pData,
    ffi.Pointer<ma_paged_audio_buffer_page> pPage,
  ) {
    return _ma_paged_audio_buffer_data_append_page(
      pData,
      pPage,
    );
  }

  late final _ma_paged_audio_buffer_data_append_pagePtr = _lookup<
          ffi.NativeFunction<
              ffi.Int32 Function(ffi.Pointer<ma_paged_audio_buffer_data>,
                  ffi.Pointer<ma_paged_audio_buffer_page>)>>(
      'ma_paged_audio_buffer_data_append_page');
  late final _ma_paged_audio_buffer_data_append_page =
      _ma_paged_audio_buffer_data_append_pagePtr.asFunction<
          int Function(ffi.Pointer<ma_paged_audio_buffer_data>,
              ffi.Pointer<ma_paged_audio_buffer_page>)>(isLeaf: true);

  /// General Library Documentation Undocument By General Corporation & Global Corporation & General Developer
  int ma_paged_audio_buffer_data_allocate_and_append_page(
    ffi.Pointer<ma_paged_audio_buffer_data> pData,
    int pageSizeInFrames,
    ffi.Pointer<ffi.Void> pInitialData,
    ffi.Pointer<ma_allocation_callbacks> pAllocationCallbacks,
  ) {
    return _ma_paged_audio_buffer_data_allocate_and_append_page(
      pData,
      pageSizeInFrames,
      pInitialData,
      pAllocationCallbacks,
    );
  }

  late final _ma_paged_audio_buffer_data_allocate_and_append_pagePtr = _lookup<
          ffi.NativeFunction<
              ffi.Int32 Function(
                  ffi.Pointer<ma_paged_audio_buffer_data>,
                  ma_uint32,
                  ffi.Pointer<ffi.Void>,
                  ffi.Pointer<ma_allocation_callbacks>)>>(
      'ma_paged_audio_buffer_data_allocate_and_append_page');
  late final _ma_paged_audio_buffer_data_allocate_and_append_page =
      _ma_paged_audio_buffer_data_allocate_and_append_pagePtr.asFunction<
          int Function(
              ffi.Pointer<ma_paged_audio_buffer_data>,
              int,
              ffi.Pointer<ffi.Void>,
              ffi.Pointer<ma_allocation_callbacks>)>(isLeaf: true);

  /// General Library Documentation Undocument By General Corporation & Global Corporation & General Developer
  ma_paged_audio_buffer_config ma_paged_audio_buffer_config_init(
    ffi.Pointer<ma_paged_audio_buffer_data> pData,
  ) {
    return _ma_paged_audio_buffer_config_init(
      pData,
    );
  }

  late final _ma_paged_audio_buffer_config_initPtr = _lookup<
          ffi.NativeFunction<
              ma_paged_audio_buffer_config Function(
                  ffi.Pointer<ma_paged_audio_buffer_data>)>>(
      'ma_paged_audio_buffer_config_init');
  late final _ma_paged_audio_buffer_config_init =
      _ma_paged_audio_buffer_config_initPtr.asFunction<
          ma_paged_audio_buffer_config Function(
              ffi.Pointer<ma_paged_audio_buffer_data>)>(isLeaf: true);

  /// General Library Documentation Undocument By General Corporation & Global Corporation & General Developer
  int ma_paged_audio_buffer_init(
    ffi.Pointer<ma_paged_audio_buffer_config> pConfig,
    ffi.Pointer<ma_paged_audio_buffer> pPagedAudioBuffer,
  ) {
    return _ma_paged_audio_buffer_init(
      pConfig,
      pPagedAudioBuffer,
    );
  }

  late final _ma_paged_audio_buffer_initPtr = _lookup<
          ffi.NativeFunction<
              ffi.Int32 Function(ffi.Pointer<ma_paged_audio_buffer_config>,
                  ffi.Pointer<ma_paged_audio_buffer>)>>(
      'ma_paged_audio_buffer_init');
  late final _ma_paged_audio_buffer_init =
      _ma_paged_audio_buffer_initPtr.asFunction<
          int Function(ffi.Pointer<ma_paged_audio_buffer_config>,
              ffi.Pointer<ma_paged_audio_buffer>)>(isLeaf: true);

  /// General Library Documentation Undocument By General Corporation & Global Corporation & General Developer
  void ma_paged_audio_buffer_uninit(
    ffi.Pointer<ma_paged_audio_buffer> pPagedAudioBuffer,
  ) {
    return _ma_paged_audio_buffer_uninit(
      pPagedAudioBuffer,
    );
  }

  late final _ma_paged_audio_buffer_uninitPtr = _lookup<
          ffi.NativeFunction<
              ffi.Void Function(ffi.Pointer<ma_paged_audio_buffer>)>>(
      'ma_paged_audio_buffer_uninit');
  late final _ma_paged_audio_buffer_uninit = _ma_paged_audio_buffer_uninitPtr
      .asFunction<void Function(ffi.Pointer<ma_paged_audio_buffer>)>(
          isLeaf: true);

  /// General Library Documentation Undocument By General Corporation & Global Corporation & General Developer
  int ma_paged_audio_buffer_read_pcm_frames(
    ffi.Pointer<ma_paged_audio_buffer> pPagedAudioBuffer,
    ffi.Pointer<ffi.Void> pFramesOut,
    int frameCount,
    ffi.Pointer<ma_uint64> pFramesRead,
  ) {
    return _ma_paged_audio_buffer_read_pcm_frames(
      pPagedAudioBuffer,
      pFramesOut,
      frameCount,
      pFramesRead,
    );
  }

  late final _ma_paged_audio_buffer_read_pcm_framesPtr = _lookup<
          ffi.NativeFunction<
              ffi.Int32 Function(ffi.Pointer<ma_paged_audio_buffer>,
                  ffi.Pointer<ffi.Void>, ma_uint64, ffi.Pointer<ma_uint64>)>>(
      'ma_paged_audio_buffer_read_pcm_frames');
  late final _ma_paged_audio_buffer_read_pcm_frames =
      _ma_paged_audio_buffer_read_pcm_framesPtr.asFunction<
          int Function(
              ffi.Pointer<ma_paged_audio_buffer>,
              ffi.Pointer<ffi.Void>,
              int,
              ffi.Pointer<ma_uint64>)>(isLeaf: true);

  /// General Library Documentation Undocument By General Corporation & Global Corporation & General Developer
  int ma_paged_audio_buffer_seek_to_pcm_frame(
    ffi.Pointer<ma_paged_audio_buffer> pPagedAudioBuffer,
    int frameIndex,
  ) {
    return _ma_paged_audio_buffer_seek_to_pcm_frame(
      pPagedAudioBuffer,
      frameIndex,
    );
  }

  late final _ma_paged_audio_buffer_seek_to_pcm_framePtr = _lookup<
      ffi.NativeFunction<
          ffi.Int32 Function(ffi.Pointer<ma_paged_audio_buffer>,
              ma_uint64)>>('ma_paged_audio_buffer_seek_to_pcm_frame');
  late final _ma_paged_audio_buffer_seek_to_pcm_frame =
      _ma_paged_audio_buffer_seek_to_pcm_framePtr
          .asFunction<int Function(ffi.Pointer<ma_paged_audio_buffer>, int)>(
              isLeaf: true);

  /// General Library Documentation Undocument By General Corporation & Global Corporation & General Developer
  int ma_paged_audio_buffer_get_cursor_in_pcm_frames(
    ffi.Pointer<ma_paged_audio_buffer> pPagedAudioBuffer,
    ffi.Pointer<ma_uint64> pCursor,
  ) {
    return _ma_paged_audio_buffer_get_cursor_in_pcm_frames(
      pPagedAudioBuffer,
      pCursor,
    );
  }

  late final _ma_paged_audio_buffer_get_cursor_in_pcm_framesPtr = _lookup<
          ffi.NativeFunction<
              ffi.Int32 Function(
                  ffi.Pointer<ma_paged_audio_buffer>, ffi.Pointer<ma_uint64>)>>(
      'ma_paged_audio_buffer_get_cursor_in_pcm_frames');
  late final _ma_paged_audio_buffer_get_cursor_in_pcm_frames =
      _ma_paged_audio_buffer_get_cursor_in_pcm_framesPtr.asFunction<
          int Function(ffi.Pointer<ma_paged_audio_buffer>,
              ffi.Pointer<ma_uint64>)>(isLeaf: true);

  /// General Library Documentation Undocument By General Corporation & Global Corporation & General Developer
  int ma_paged_audio_buffer_get_length_in_pcm_frames(
    ffi.Pointer<ma_paged_audio_buffer> pPagedAudioBuffer,
    ffi.Pointer<ma_uint64> pLength,
  ) {
    return _ma_paged_audio_buffer_get_length_in_pcm_frames(
      pPagedAudioBuffer,
      pLength,
    );
  }

  late final _ma_paged_audio_buffer_get_length_in_pcm_framesPtr = _lookup<
          ffi.NativeFunction<
              ffi.Int32 Function(
                  ffi.Pointer<ma_paged_audio_buffer>, ffi.Pointer<ma_uint64>)>>(
      'ma_paged_audio_buffer_get_length_in_pcm_frames');
  late final _ma_paged_audio_buffer_get_length_in_pcm_frames =
      _ma_paged_audio_buffer_get_length_in_pcm_framesPtr.asFunction<
          int Function(ffi.Pointer<ma_paged_audio_buffer>,
              ffi.Pointer<ma_uint64>)>(isLeaf: true);

  /// General Library Documentation Undocument By General Corporation & Global Corporation & General Developer
  int ma_rb_init_ex(
    int subbufferSizeInBytes,
    int subbufferCount,
    int subbufferStrideInBytes,
    ffi.Pointer<ffi.Void> pOptionalPreallocatedBuffer,
    ffi.Pointer<ma_allocation_callbacks> pAllocationCallbacks,
    ffi.Pointer<ma_rb> pRB,
  ) {
    return _ma_rb_init_ex(
      subbufferSizeInBytes,
      subbufferCount,
      subbufferStrideInBytes,
      pOptionalPreallocatedBuffer,
      pAllocationCallbacks,
      pRB,
    );
  }

  late final _ma_rb_init_exPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int32 Function(
              ffi.Size,
              ffi.Size,
              ffi.Size,
              ffi.Pointer<ffi.Void>,
              ffi.Pointer<ma_allocation_callbacks>,
              ffi.Pointer<ma_rb>)>>('ma_rb_init_ex');
  late final _ma_rb_init_ex = _ma_rb_init_exPtr.asFunction<
      int Function(
          int,
          int,
          int,
          ffi.Pointer<ffi.Void>,
          ffi.Pointer<ma_allocation_callbacks>,
          ffi.Pointer<ma_rb>)>(isLeaf: true);

  /// General Library Documentation Undocument By General Corporation & Global Corporation & General Developer
  int ma_rb_init(
    int bufferSizeInBytes,
    ffi.Pointer<ffi.Void> pOptionalPreallocatedBuffer,
    ffi.Pointer<ma_allocation_callbacks> pAllocationCallbacks,
    ffi.Pointer<ma_rb> pRB,
  ) {
    return _ma_rb_init(
      bufferSizeInBytes,
      pOptionalPreallocatedBuffer,
      pAllocationCallbacks,
      pRB,
    );
  }

  late final _ma_rb_initPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int32 Function(
              ffi.Size,
              ffi.Pointer<ffi.Void>,
              ffi.Pointer<ma_allocation_callbacks>,
              ffi.Pointer<ma_rb>)>>('ma_rb_init');
  late final _ma_rb_init = _ma_rb_initPtr.asFunction<
      int Function(
          int,
          ffi.Pointer<ffi.Void>,
          ffi.Pointer<ma_allocation_callbacks>,
          ffi.Pointer<ma_rb>)>(isLeaf: true);

  /// General Library Documentation Undocument By General Corporation & Global Corporation & General Developer
  void ma_rb_uninit(
    ffi.Pointer<ma_rb> pRB,
  ) {
    return _ma_rb_uninit(
      pRB,
    );
  }

  late final _ma_rb_uninitPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Pointer<ma_rb>)>>(
          'ma_rb_uninit');
  late final _ma_rb_uninit = _ma_rb_uninitPtr
      .asFunction<void Function(ffi.Pointer<ma_rb>)>(isLeaf: true);

  /// General Library Documentation Undocument By General Corporation & Global Corporation & General Developer
  void ma_rb_reset(
    ffi.Pointer<ma_rb> pRB,
  ) {
    return _ma_rb_reset(
      pRB,
    );
  }

  late final _ma_rb_resetPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Pointer<ma_rb>)>>(
          'ma_rb_reset');
  late final _ma_rb_reset = _ma_rb_resetPtr
      .asFunction<void Function(ffi.Pointer<ma_rb>)>(isLeaf: true);

  /// General Library Documentation Undocument By General Corporation & Global Corporation & General Developer
  int ma_rb_acquire_read(
    ffi.Pointer<ma_rb> pRB,
    ffi.Pointer<ffi.Size> pSizeInBytes,
    ffi.Pointer<ffi.Pointer<ffi.Void>> ppBufferOut,
  ) {
    return _ma_rb_acquire_read(
      pRB,
      pSizeInBytes,
      ppBufferOut,
    );
  }

  late final _ma_rb_acquire_readPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int32 Function(ffi.Pointer<ma_rb>, ffi.Pointer<ffi.Size>,
              ffi.Pointer<ffi.Pointer<ffi.Void>>)>>('ma_rb_acquire_read');
  late final _ma_rb_acquire_read = _ma_rb_acquire_readPtr.asFunction<
      int Function(ffi.Pointer<ma_rb>, ffi.Pointer<ffi.Size>,
          ffi.Pointer<ffi.Pointer<ffi.Void>>)>(isLeaf: true);

  /// General Library Documentation Undocument By General Corporation & Global Corporation & General Developer
  int ma_rb_commit_read(
    ffi.Pointer<ma_rb> pRB,
    int sizeInBytes,
  ) {
    return _ma_rb_commit_read(
      pRB,
      sizeInBytes,
    );
  }

  late final _ma_rb_commit_readPtr = _lookup<
          ffi.NativeFunction<ffi.Int32 Function(ffi.Pointer<ma_rb>, ffi.Size)>>(
      'ma_rb_commit_read');
  late final _ma_rb_commit_read = _ma_rb_commit_readPtr
      .asFunction<int Function(ffi.Pointer<ma_rb>, int)>(isLeaf: true);

  /// General Library Documentation Undocument By General Corporation & Global Corporation & General Developer
  int ma_rb_acquire_write(
    ffi.Pointer<ma_rb> pRB,
    ffi.Pointer<ffi.Size> pSizeInBytes,
    ffi.Pointer<ffi.Pointer<ffi.Void>> ppBufferOut,
  ) {
    return _ma_rb_acquire_write(
      pRB,
      pSizeInBytes,
      ppBufferOut,
    );
  }

  late final _ma_rb_acquire_writePtr = _lookup<
      ffi.NativeFunction<
          ffi.Int32 Function(ffi.Pointer<ma_rb>, ffi.Pointer<ffi.Size>,
              ffi.Pointer<ffi.Pointer<ffi.Void>>)>>('ma_rb_acquire_write');
  late final _ma_rb_acquire_write = _ma_rb_acquire_writePtr.asFunction<
      int Function(ffi.Pointer<ma_rb>, ffi.Pointer<ffi.Size>,
          ffi.Pointer<ffi.Pointer<ffi.Void>>)>(isLeaf: true);

  /// General Library Documentation Undocument By General Corporation & Global Corporation & General Developer
  int ma_rb_commit_write(
    ffi.Pointer<ma_rb> pRB,
    int sizeInBytes,
  ) {
    return _ma_rb_commit_write(
      pRB,
      sizeInBytes,
    );
  }

  late final _ma_rb_commit_writePtr = _lookup<
          ffi.NativeFunction<ffi.Int32 Function(ffi.Pointer<ma_rb>, ffi.Size)>>(
      'ma_rb_commit_write');
  late final _ma_rb_commit_write = _ma_rb_commit_writePtr
      .asFunction<int Function(ffi.Pointer<ma_rb>, int)>(isLeaf: true);

  /// General Library Documentation Undocument By General Corporation & Global Corporation & General Developer
  int ma_rb_seek_read(
    ffi.Pointer<ma_rb> pRB,
    int offsetInBytes,
  ) {
    return _ma_rb_seek_read(
      pRB,
      offsetInBytes,
    );
  }

  late final _ma_rb_seek_readPtr = _lookup<
          ffi.NativeFunction<ffi.Int32 Function(ffi.Pointer<ma_rb>, ffi.Size)>>(
      'ma_rb_seek_read');
  late final _ma_rb_seek_read = _ma_rb_seek_readPtr
      .asFunction<int Function(ffi.Pointer<ma_rb>, int)>(isLeaf: true);

  /// General Library Documentation Undocument By General Corporation & Global Corporation & General Developer
  int ma_rb_seek_write(
    ffi.Pointer<ma_rb> pRB,
    int offsetInBytes,
  ) {
    return _ma_rb_seek_write(
      pRB,
      offsetInBytes,
    );
  }

  late final _ma_rb_seek_writePtr = _lookup<
          ffi.NativeFunction<ffi.Int32 Function(ffi.Pointer<ma_rb>, ffi.Size)>>(
      'ma_rb_seek_write');
  late final _ma_rb_seek_write = _ma_rb_seek_writePtr
      .asFunction<int Function(ffi.Pointer<ma_rb>, int)>(isLeaf: true);

  /// General Library Documentation Undocument By General Corporation & Global Corporation & General Developer
  int ma_rb_pointer_distance(
    ffi.Pointer<ma_rb> pRB,
  ) {
    return _ma_rb_pointer_distance(
      pRB,
    );
  }

  late final _ma_rb_pointer_distancePtr =
      _lookup<ffi.NativeFunction<ma_int32 Function(ffi.Pointer<ma_rb>)>>(
          'ma_rb_pointer_distance');
  late final _ma_rb_pointer_distance = _ma_rb_pointer_distancePtr
      .asFunction<int Function(ffi.Pointer<ma_rb>)>(isLeaf: true);

  /// General Library Documentation Undocument By General Corporation & Global Corporation & General Developer
  int ma_rb_available_read(
    ffi.Pointer<ma_rb> pRB,
  ) {
    return _ma_rb_available_read(
      pRB,
    );
  }

  late final _ma_rb_available_readPtr =
      _lookup<ffi.NativeFunction<ma_uint32 Function(ffi.Pointer<ma_rb>)>>(
          'ma_rb_available_read');
  late final _ma_rb_available_read = _ma_rb_available_readPtr
      .asFunction<int Function(ffi.Pointer<ma_rb>)>(isLeaf: true);

  /// General Library Documentation Undocument By General Corporation & Global Corporation & General Developer
  int ma_rb_available_write(
    ffi.Pointer<ma_rb> pRB,
  ) {
    return _ma_rb_available_write(
      pRB,
    );
  }

  late final _ma_rb_available_writePtr =
      _lookup<ffi.NativeFunction<ma_uint32 Function(ffi.Pointer<ma_rb>)>>(
          'ma_rb_available_write');
  late final _ma_rb_available_write = _ma_rb_available_writePtr
      .asFunction<int Function(ffi.Pointer<ma_rb>)>(isLeaf: true);

  /// General Library Documentation Undocument By General Corporation & Global Corporation & General Developer
  int ma_rb_get_subbuffer_size(
    ffi.Pointer<ma_rb> pRB,
  ) {
    return _ma_rb_get_subbuffer_size(
      pRB,
    );
  }

  late final _ma_rb_get_subbuffer_sizePtr =
      _lookup<ffi.NativeFunction<ffi.Size Function(ffi.Pointer<ma_rb>)>>(
          'ma_rb_get_subbuffer_size');
  late final _ma_rb_get_subbuffer_size = _ma_rb_get_subbuffer_sizePtr
      .asFunction<int Function(ffi.Pointer<ma_rb>)>(isLeaf: true);

  /// General Library Documentation Undocument By General Corporation & Global Corporation & General Developer
  int ma_rb_get_subbuffer_stride(
    ffi.Pointer<ma_rb> pRB,
  ) {
    return _ma_rb_get_subbuffer_stride(
      pRB,
    );
  }

  late final _ma_rb_get_subbuffer_stridePtr =
      _lookup<ffi.NativeFunction<ffi.Size Function(ffi.Pointer<ma_rb>)>>(
          'ma_rb_get_subbuffer_stride');
  late final _ma_rb_get_subbuffer_stride = _ma_rb_get_subbuffer_stridePtr
      .asFunction<int Function(ffi.Pointer<ma_rb>)>(isLeaf: true);

  /// General Library Documentation Undocument By General Corporation & Global Corporation & General Developer
  int ma_rb_get_subbuffer_offset(
    ffi.Pointer<ma_rb> pRB,
    int subbufferIndex,
  ) {
    return _ma_rb_get_subbuffer_offset(
      pRB,
      subbufferIndex,
    );
  }

  late final _ma_rb_get_subbuffer_offsetPtr = _lookup<
          ffi.NativeFunction<ffi.Size Function(ffi.Pointer<ma_rb>, ffi.Size)>>(
      'ma_rb_get_subbuffer_offset');
  late final _ma_rb_get_subbuffer_offset = _ma_rb_get_subbuffer_offsetPtr
      .asFunction<int Function(ffi.Pointer<ma_rb>, int)>(isLeaf: true);

  /// General Library Documentation Undocument By General Corporation & Global Corporation & General Developer
  ffi.Pointer<ffi.Void> ma_rb_get_subbuffer_ptr(
    ffi.Pointer<ma_rb> pRB,
    int subbufferIndex,
    ffi.Pointer<ffi.Void> pBuffer,
  ) {
    return _ma_rb_get_subbuffer_ptr(
      pRB,
      subbufferIndex,
      pBuffer,
    );
  }

  late final _ma_rb_get_subbuffer_ptrPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ffi.Void> Function(ffi.Pointer<ma_rb>, ffi.Size,
              ffi.Pointer<ffi.Void>)>>('ma_rb_get_subbuffer_ptr');
  late final _ma_rb_get_subbuffer_ptr = _ma_rb_get_subbuffer_ptrPtr.asFunction<
      ffi.Pointer<ffi.Void> Function(
          ffi.Pointer<ma_rb>, int, ffi.Pointer<ffi.Void>)>(isLeaf: true);

  /// General Library Documentation Undocument By General Corporation & Global Corporation & General Developer
  int ma_pcm_rb_init_ex(
    int format,
    int channels,
    int subbufferSizeInFrames,
    int subbufferCount,
    int subbufferStrideInFrames,
    ffi.Pointer<ffi.Void> pOptionalPreallocatedBuffer,
    ffi.Pointer<ma_allocation_callbacks> pAllocationCallbacks,
    ffi.Pointer<ma_pcm_rb> pRB,
  ) {
    return _ma_pcm_rb_init_ex(
      format,
      channels,
      subbufferSizeInFrames,
      subbufferCount,
      subbufferStrideInFrames,
      pOptionalPreallocatedBuffer,
      pAllocationCallbacks,
      pRB,
    );
  }

  late final _ma_pcm_rb_init_exPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int32 Function(
              ffi.Int32,
              ma_uint32,
              ma_uint32,
              ma_uint32,
              ma_uint32,
              ffi.Pointer<ffi.Void>,
              ffi.Pointer<ma_allocation_callbacks>,
              ffi.Pointer<ma_pcm_rb>)>>('ma_pcm_rb_init_ex');
  late final _ma_pcm_rb_init_ex = _ma_pcm_rb_init_exPtr.asFunction<
      int Function(
          int,
          int,
          int,
          int,
          int,
          ffi.Pointer<ffi.Void>,
          ffi.Pointer<ma_allocation_callbacks>,
          ffi.Pointer<ma_pcm_rb>)>(isLeaf: true);

  /// General Library Documentation Undocument By General Corporation & Global Corporation & General Developer
  int ma_pcm_rb_init(
    int format,
    int channels,
    int bufferSizeInFrames,
    ffi.Pointer<ffi.Void> pOptionalPreallocatedBuffer,
    ffi.Pointer<ma_allocation_callbacks> pAllocationCallbacks,
    ffi.Pointer<ma_pcm_rb> pRB,
  ) {
    return _ma_pcm_rb_init(
      format,
      channels,
      bufferSizeInFrames,
      pOptionalPreallocatedBuffer,
      pAllocationCallbacks,
      pRB,
    );
  }

  late final _ma_pcm_rb_initPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int32 Function(
              ffi.Int32,
              ma_uint32,
              ma_uint32,
              ffi.Pointer<ffi.Void>,
              ffi.Pointer<ma_allocation_callbacks>,
              ffi.Pointer<ma_pcm_rb>)>>('ma_pcm_rb_init');
  late final _ma_pcm_rb_init = _ma_pcm_rb_initPtr.asFunction<
      int Function(
          int,
          int,
          int,
          ffi.Pointer<ffi.Void>,
          ffi.Pointer<ma_allocation_callbacks>,
          ffi.Pointer<ma_pcm_rb>)>(isLeaf: true);

  /// General Library Documentation Undocument By General Corporation & Global Corporation & General Developer
  void ma_pcm_rb_uninit(
    ffi.Pointer<ma_pcm_rb> pRB,
  ) {
    return _ma_pcm_rb_uninit(
      pRB,
    );
  }

  late final _ma_pcm_rb_uninitPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Pointer<ma_pcm_rb>)>>(
          'ma_pcm_rb_uninit');
  late final _ma_pcm_rb_uninit = _ma_pcm_rb_uninitPtr
      .asFunction<void Function(ffi.Pointer<ma_pcm_rb>)>(isLeaf: true);

  /// General Library Documentation Undocument By General Corporation & Global Corporation & General Developer
  void ma_pcm_rb_reset(
    ffi.Pointer<ma_pcm_rb> pRB,
  ) {
    return _ma_pcm_rb_reset(
      pRB,
    );
  }

  late final _ma_pcm_rb_resetPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Pointer<ma_pcm_rb>)>>(
          'ma_pcm_rb_reset');
  late final _ma_pcm_rb_reset = _ma_pcm_rb_resetPtr
      .asFunction<void Function(ffi.Pointer<ma_pcm_rb>)>(isLeaf: true);

  /// General Library Documentation Undocument By General Corporation & Global Corporation & General Developer
  int ma_pcm_rb_acquire_read(
    ffi.Pointer<ma_pcm_rb> pRB,
    ffi.Pointer<ma_uint32> pSizeInFrames,
    ffi.Pointer<ffi.Pointer<ffi.Void>> ppBufferOut,
  ) {
    return _ma_pcm_rb_acquire_read(
      pRB,
      pSizeInFrames,
      ppBufferOut,
    );
  }

  late final _ma_pcm_rb_acquire_readPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int32 Function(ffi.Pointer<ma_pcm_rb>, ffi.Pointer<ma_uint32>,
              ffi.Pointer<ffi.Pointer<ffi.Void>>)>>('ma_pcm_rb_acquire_read');
  late final _ma_pcm_rb_acquire_read = _ma_pcm_rb_acquire_readPtr.asFunction<
      int Function(ffi.Pointer<ma_pcm_rb>, ffi.Pointer<ma_uint32>,
          ffi.Pointer<ffi.Pointer<ffi.Void>>)>(isLeaf: true);

  /// General Library Documentation Undocument By General Corporation & Global Corporation & General Developer
  int ma_pcm_rb_commit_read(
    ffi.Pointer<ma_pcm_rb> pRB,
    int sizeInFrames,
  ) {
    return _ma_pcm_rb_commit_read(
      pRB,
      sizeInFrames,
    );
  }

  late final _ma_pcm_rb_commit_readPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int32 Function(
              ffi.Pointer<ma_pcm_rb>, ma_uint32)>>('ma_pcm_rb_commit_read');
  late final _ma_pcm_rb_commit_read = _ma_pcm_rb_commit_readPtr
      .asFunction<int Function(ffi.Pointer<ma_pcm_rb>, int)>(isLeaf: true);

  /// General Library Documentation Undocument By General Corporation & Global Corporation & General Developer
  int ma_pcm_rb_acquire_write(
    ffi.Pointer<ma_pcm_rb> pRB,
    ffi.Pointer<ma_uint32> pSizeInFrames,
    ffi.Pointer<ffi.Pointer<ffi.Void>> ppBufferOut,
  ) {
    return _ma_pcm_rb_acquire_write(
      pRB,
      pSizeInFrames,
      ppBufferOut,
    );
  }

  late final _ma_pcm_rb_acquire_writePtr = _lookup<
      ffi.NativeFunction<
          ffi.Int32 Function(ffi.Pointer<ma_pcm_rb>, ffi.Pointer<ma_uint32>,
              ffi.Pointer<ffi.Pointer<ffi.Void>>)>>('ma_pcm_rb_acquire_write');
  late final _ma_pcm_rb_acquire_write = _ma_pcm_rb_acquire_writePtr.asFunction<
      int Function(ffi.Pointer<ma_pcm_rb>, ffi.Pointer<ma_uint32>,
          ffi.Pointer<ffi.Pointer<ffi.Void>>)>(isLeaf: true);

  /// General Library Documentation Undocument By General Corporation & Global Corporation & General Developer
  int ma_pcm_rb_commit_write(
    ffi.Pointer<ma_pcm_rb> pRB,
    int sizeInFrames,
  ) {
    return _ma_pcm_rb_commit_write(
      pRB,
      sizeInFrames,
    );
  }

  late final _ma_pcm_rb_commit_writePtr = _lookup<
      ffi.NativeFunction<
          ffi.Int32 Function(
              ffi.Pointer<ma_pcm_rb>, ma_uint32)>>('ma_pcm_rb_commit_write');
  late final _ma_pcm_rb_commit_write = _ma_pcm_rb_commit_writePtr
      .asFunction<int Function(ffi.Pointer<ma_pcm_rb>, int)>(isLeaf: true);

  /// General Library Documentation Undocument By General Corporation & Global Corporation & General Developer
  int ma_pcm_rb_seek_read(
    ffi.Pointer<ma_pcm_rb> pRB,
    int offsetInFrames,
  ) {
    return _ma_pcm_rb_seek_read(
      pRB,
      offsetInFrames,
    );
  }

  late final _ma_pcm_rb_seek_readPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int32 Function(
              ffi.Pointer<ma_pcm_rb>, ma_uint32)>>('ma_pcm_rb_seek_read');
  late final _ma_pcm_rb_seek_read = _ma_pcm_rb_seek_readPtr
      .asFunction<int Function(ffi.Pointer<ma_pcm_rb>, int)>(isLeaf: true);

  /// General Library Documentation Undocument By General Corporation & Global Corporation & General Developer
  int ma_pcm_rb_seek_write(
    ffi.Pointer<ma_pcm_rb> pRB,
    int offsetInFrames,
  ) {
    return _ma_pcm_rb_seek_write(
      pRB,
      offsetInFrames,
    );
  }

  late final _ma_pcm_rb_seek_writePtr = _lookup<
      ffi.NativeFunction<
          ffi.Int32 Function(
              ffi.Pointer<ma_pcm_rb>, ma_uint32)>>('ma_pcm_rb_seek_write');
  late final _ma_pcm_rb_seek_write = _ma_pcm_rb_seek_writePtr
      .asFunction<int Function(ffi.Pointer<ma_pcm_rb>, int)>(isLeaf: true);

  /// General Library Documentation Undocument By General Corporation & Global Corporation & General Developer
  int ma_pcm_rb_pointer_distance(
    ffi.Pointer<ma_pcm_rb> pRB,
  ) {
    return _ma_pcm_rb_pointer_distance(
      pRB,
    );
  }

  late final _ma_pcm_rb_pointer_distancePtr =
      _lookup<ffi.NativeFunction<ma_int32 Function(ffi.Pointer<ma_pcm_rb>)>>(
          'ma_pcm_rb_pointer_distance');
  late final _ma_pcm_rb_pointer_distance = _ma_pcm_rb_pointer_distancePtr
      .asFunction<int Function(ffi.Pointer<ma_pcm_rb>)>(isLeaf: true);

  /// General Library Documentation Undocument By General Corporation & Global Corporation & General Developer
  int ma_pcm_rb_available_read(
    ffi.Pointer<ma_pcm_rb> pRB,
  ) {
    return _ma_pcm_rb_available_read(
      pRB,
    );
  }

  late final _ma_pcm_rb_available_readPtr =
      _lookup<ffi.NativeFunction<ma_uint32 Function(ffi.Pointer<ma_pcm_rb>)>>(
          'ma_pcm_rb_available_read');
  late final _ma_pcm_rb_available_read = _ma_pcm_rb_available_readPtr
      .asFunction<int Function(ffi.Pointer<ma_pcm_rb>)>(isLeaf: true);

  /// General Library Documentation Undocument By General Corporation & Global Corporation & General Developer
  int ma_pcm_rb_available_write(
    ffi.Pointer<ma_pcm_rb> pRB,
  ) {
    return _ma_pcm_rb_available_write(
      pRB,
    );
  }

  late final _ma_pcm_rb_available_writePtr =
      _lookup<ffi.NativeFunction<ma_uint32 Function(ffi.Pointer<ma_pcm_rb>)>>(
          'ma_pcm_rb_available_write');
  late final _ma_pcm_rb_available_write = _ma_pcm_rb_available_writePtr
      .asFunction<int Function(ffi.Pointer<ma_pcm_rb>)>(isLeaf: true);

  /// General Library Documentation Undocument By General Corporation & Global Corporation & General Developer
  int ma_pcm_rb_get_subbuffer_size(
    ffi.Pointer<ma_pcm_rb> pRB,
  ) {
    return _ma_pcm_rb_get_subbuffer_size(
      pRB,
    );
  }

  late final _ma_pcm_rb_get_subbuffer_sizePtr =
      _lookup<ffi.NativeFunction<ma_uint32 Function(ffi.Pointer<ma_pcm_rb>)>>(
          'ma_pcm_rb_get_subbuffer_size');
  late final _ma_pcm_rb_get_subbuffer_size = _ma_pcm_rb_get_subbuffer_sizePtr
      .asFunction<int Function(ffi.Pointer<ma_pcm_rb>)>(isLeaf: true);

  /// General Library Documentation Undocument By General Corporation & Global Corporation & General Developer
  int ma_pcm_rb_get_subbuffer_stride(
    ffi.Pointer<ma_pcm_rb> pRB,
  ) {
    return _ma_pcm_rb_get_subbuffer_stride(
      pRB,
    );
  }

  late final _ma_pcm_rb_get_subbuffer_stridePtr =
      _lookup<ffi.NativeFunction<ma_uint32 Function(ffi.Pointer<ma_pcm_rb>)>>(
          'ma_pcm_rb_get_subbuffer_stride');
  late final _ma_pcm_rb_get_subbuffer_stride =
      _ma_pcm_rb_get_subbuffer_stridePtr
          .asFunction<int Function(ffi.Pointer<ma_pcm_rb>)>(isLeaf: true);

  /// General Library Documentation Undocument By General Corporation & Global Corporation & General Developer
  int ma_pcm_rb_get_subbuffer_offset(
    ffi.Pointer<ma_pcm_rb> pRB,
    int subbufferIndex,
  ) {
    return _ma_pcm_rb_get_subbuffer_offset(
      pRB,
      subbufferIndex,
    );
  }

  late final _ma_pcm_rb_get_subbuffer_offsetPtr = _lookup<
      ffi.NativeFunction<
          ma_uint32 Function(ffi.Pointer<ma_pcm_rb>,
              ma_uint32)>>('ma_pcm_rb_get_subbuffer_offset');
  late final _ma_pcm_rb_get_subbuffer_offset =
      _ma_pcm_rb_get_subbuffer_offsetPtr
          .asFunction<int Function(ffi.Pointer<ma_pcm_rb>, int)>(isLeaf: true);

  /// General Library Documentation Undocument By General Corporation & Global Corporation & General Developer
  ffi.Pointer<ffi.Void> ma_pcm_rb_get_subbuffer_ptr(
    ffi.Pointer<ma_pcm_rb> pRB,
    int subbufferIndex,
    ffi.Pointer<ffi.Void> pBuffer,
  ) {
    return _ma_pcm_rb_get_subbuffer_ptr(
      pRB,
      subbufferIndex,
      pBuffer,
    );
  }

  late final _ma_pcm_rb_get_subbuffer_ptrPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ffi.Void> Function(ffi.Pointer<ma_pcm_rb>, ma_uint32,
              ffi.Pointer<ffi.Void>)>>('ma_pcm_rb_get_subbuffer_ptr');
  late final _ma_pcm_rb_get_subbuffer_ptr =
      _ma_pcm_rb_get_subbuffer_ptrPtr.asFunction<
          ffi.Pointer<ffi.Void> Function(ffi.Pointer<ma_pcm_rb>, int,
              ffi.Pointer<ffi.Void>)>(isLeaf: true);

  /// General Library Documentation Undocument By General Corporation & Global Corporation & General Developer
  int ma_pcm_rb_get_format(
    ffi.Pointer<ma_pcm_rb> pRB,
  ) {
    return _ma_pcm_rb_get_format(
      pRB,
    );
  }

  late final _ma_pcm_rb_get_formatPtr =
      _lookup<ffi.NativeFunction<ffi.Int32 Function(ffi.Pointer<ma_pcm_rb>)>>(
          'ma_pcm_rb_get_format');
  late final _ma_pcm_rb_get_format = _ma_pcm_rb_get_formatPtr
      .asFunction<int Function(ffi.Pointer<ma_pcm_rb>)>(isLeaf: true);

  /// General Library Documentation Undocument By General Corporation & Global Corporation & General Developer
  int ma_pcm_rb_get_channels(
    ffi.Pointer<ma_pcm_rb> pRB,
  ) {
    return _ma_pcm_rb_get_channels(
      pRB,
    );
  }

  late final _ma_pcm_rb_get_channelsPtr =
      _lookup<ffi.NativeFunction<ma_uint32 Function(ffi.Pointer<ma_pcm_rb>)>>(
          'ma_pcm_rb_get_channels');
  late final _ma_pcm_rb_get_channels = _ma_pcm_rb_get_channelsPtr
      .asFunction<int Function(ffi.Pointer<ma_pcm_rb>)>(isLeaf: true);

  /// General Library Documentation Undocument By General Corporation & Global Corporation & General Developer
  int ma_pcm_rb_get_sample_rate(
    ffi.Pointer<ma_pcm_rb> pRB,
  ) {
    return _ma_pcm_rb_get_sample_rate(
      pRB,
    );
  }

  late final _ma_pcm_rb_get_sample_ratePtr =
      _lookup<ffi.NativeFunction<ma_uint32 Function(ffi.Pointer<ma_pcm_rb>)>>(
          'ma_pcm_rb_get_sample_rate');
  late final _ma_pcm_rb_get_sample_rate = _ma_pcm_rb_get_sample_ratePtr
      .asFunction<int Function(ffi.Pointer<ma_pcm_rb>)>(isLeaf: true);

  /// General Library Documentation Undocument By General Corporation & Global Corporation & General Developer
  void ma_pcm_rb_set_sample_rate(
    ffi.Pointer<ma_pcm_rb> pRB,
    int sampleRate,
  ) {
    return _ma_pcm_rb_set_sample_rate(
      pRB,
      sampleRate,
    );
  }

  late final _ma_pcm_rb_set_sample_ratePtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(
              ffi.Pointer<ma_pcm_rb>, ma_uint32)>>('ma_pcm_rb_set_sample_rate');
  late final _ma_pcm_rb_set_sample_rate = _ma_pcm_rb_set_sample_ratePtr
      .asFunction<void Function(ffi.Pointer<ma_pcm_rb>, int)>(isLeaf: true);

  /// General Library Documentation Undocument By General Corporation & Global Corporation & General Developer
  int ma_duplex_rb_init(
    int captureFormat,
    int captureChannels,
    int sampleRate,
    int captureInternalSampleRate,
    int captureInternalPeriodSizeInFrames,
    ffi.Pointer<ma_allocation_callbacks> pAllocationCallbacks,
    ffi.Pointer<ma_duplex_rb> pRB,
  ) {
    return _ma_duplex_rb_init(
      captureFormat,
      captureChannels,
      sampleRate,
      captureInternalSampleRate,
      captureInternalPeriodSizeInFrames,
      pAllocationCallbacks,
      pRB,
    );
  }

  late final _ma_duplex_rb_initPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int32 Function(
              ffi.Int32,
              ma_uint32,
              ma_uint32,
              ma_uint32,
              ma_uint32,
              ffi.Pointer<ma_allocation_callbacks>,
              ffi.Pointer<ma_duplex_rb>)>>('ma_duplex_rb_init');
  late final _ma_duplex_rb_init = _ma_duplex_rb_initPtr.asFunction<
      int Function(
          int,
          int,
          int,
          int,
          int,
          ffi.Pointer<ma_allocation_callbacks>,
          ffi.Pointer<ma_duplex_rb>)>(isLeaf: true);

  /// General Library Documentation Undocument By General Corporation & Global Corporation & General Developer
  int ma_duplex_rb_uninit(
    ffi.Pointer<ma_duplex_rb> pRB,
  ) {
    return _ma_duplex_rb_uninit(
      pRB,
    );
  }

  late final _ma_duplex_rb_uninitPtr = _lookup<
          ffi.NativeFunction<ffi.Int32 Function(ffi.Pointer<ma_duplex_rb>)>>(
      'ma_duplex_rb_uninit');
  late final _ma_duplex_rb_uninit = _ma_duplex_rb_uninitPtr
      .asFunction<int Function(ffi.Pointer<ma_duplex_rb>)>(isLeaf: true);

  /// Miscellaneous Helpers
  ffi.Pointer<ffi.Char> ma_result_description(
    int result,
  ) {
    return _ma_result_description(
      result,
    );
  }

  late final _ma_result_descriptionPtr =
      _lookup<ffi.NativeFunction<ffi.Pointer<ffi.Char> Function(ffi.Int32)>>(
          'ma_result_description');
  late final _ma_result_description = _ma_result_descriptionPtr
      .asFunction<ffi.Pointer<ffi.Char> Function(int)>(isLeaf: true);

  /// General Library Documentation Undocument By General Corporation & Global Corporation & General Developer
  ffi.Pointer<ffi.Void> ma_malloc(
    int sz,
    ffi.Pointer<ma_allocation_callbacks> pAllocationCallbacks,
  ) {
    return _ma_malloc(
      sz,
      pAllocationCallbacks,
    );
  }

  late final _ma_mallocPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ffi.Void> Function(
              ffi.Size, ffi.Pointer<ma_allocation_callbacks>)>>('ma_malloc');
  late final _ma_malloc = _ma_mallocPtr.asFunction<
      ffi.Pointer<ffi.Void> Function(
          int, ffi.Pointer<ma_allocation_callbacks>)>(isLeaf: true);

  /// General Library Documentation Undocument By General Corporation & Global Corporation & General Developer
  ffi.Pointer<ffi.Void> ma_calloc(
    int sz,
    ffi.Pointer<ma_allocation_callbacks> pAllocationCallbacks,
  ) {
    return _ma_calloc(
      sz,
      pAllocationCallbacks,
    );
  }

  late final _ma_callocPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ffi.Void> Function(
              ffi.Size, ffi.Pointer<ma_allocation_callbacks>)>>('ma_calloc');
  late final _ma_calloc = _ma_callocPtr.asFunction<
      ffi.Pointer<ffi.Void> Function(
          int, ffi.Pointer<ma_allocation_callbacks>)>(isLeaf: true);

  /// General Library Documentation Undocument By General Corporation & Global Corporation & General Developer
  ffi.Pointer<ffi.Void> ma_realloc(
    ffi.Pointer<ffi.Void> p,
    int sz,
    ffi.Pointer<ma_allocation_callbacks> pAllocationCallbacks,
  ) {
    return _ma_realloc(
      p,
      sz,
      pAllocationCallbacks,
    );
  }

  late final _ma_reallocPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ffi.Void> Function(ffi.Pointer<ffi.Void>, ffi.Size,
              ffi.Pointer<ma_allocation_callbacks>)>>('ma_realloc');
  late final _ma_realloc = _ma_reallocPtr.asFunction<
      ffi.Pointer<ffi.Void> Function(ffi.Pointer<ffi.Void>, int,
          ffi.Pointer<ma_allocation_callbacks>)>(isLeaf: true);

  /// General Library Documentation Undocument By General Corporation & Global Corporation & General Developer
  void ma_free(
    ffi.Pointer<ffi.Void> p,
    ffi.Pointer<ma_allocation_callbacks> pAllocationCallbacks,
  ) {
    return _ma_free(
      p,
      pAllocationCallbacks,
    );
  }

  late final _ma_freePtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Pointer<ffi.Void>,
              ffi.Pointer<ma_allocation_callbacks>)>>('ma_free');
  late final _ma_free = _ma_freePtr.asFunction<
      void Function(ffi.Pointer<ffi.Void>,
          ffi.Pointer<ma_allocation_callbacks>)>(isLeaf: true);

  /// General Library Documentation Undocument By General Corporation & Global Corporation & General Developer
  ffi.Pointer<ffi.Void> ma_aligned_malloc(
    int sz,
    int alignment,
    ffi.Pointer<ma_allocation_callbacks> pAllocationCallbacks,
  ) {
    return _ma_aligned_malloc(
      sz,
      alignment,
      pAllocationCallbacks,
    );
  }

  late final _ma_aligned_mallocPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ffi.Void> Function(ffi.Size, ffi.Size,
              ffi.Pointer<ma_allocation_callbacks>)>>('ma_aligned_malloc');
  late final _ma_aligned_malloc = _ma_aligned_mallocPtr.asFunction<
      ffi.Pointer<ffi.Void> Function(
          int, int, ffi.Pointer<ma_allocation_callbacks>)>(isLeaf: true);

  /// General Library Documentation Undocument By General Corporation & Global Corporation & General Developer
  void ma_aligned_free(
    ffi.Pointer<ffi.Void> p,
    ffi.Pointer<ma_allocation_callbacks> pAllocationCallbacks,
  ) {
    return _ma_aligned_free(
      p,
      pAllocationCallbacks,
    );
  }

  late final _ma_aligned_freePtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Pointer<ffi.Void>,
              ffi.Pointer<ma_allocation_callbacks>)>>('ma_aligned_free');
  late final _ma_aligned_free = _ma_aligned_freePtr.asFunction<
      void Function(ffi.Pointer<ffi.Void>,
          ffi.Pointer<ma_allocation_callbacks>)>(isLeaf: true);

  /// General Library Documentation Undocument By General Corporation & Global Corporation & General Developer
  ffi.Pointer<ffi.Char> ma_get_format_name(
    int format,
  ) {
    return _ma_get_format_name(
      format,
    );
  }

  late final _ma_get_format_namePtr =
      _lookup<ffi.NativeFunction<ffi.Pointer<ffi.Char> Function(ffi.Int32)>>(
          'ma_get_format_name');
  late final _ma_get_format_name = _ma_get_format_namePtr
      .asFunction<ffi.Pointer<ffi.Char> Function(int)>(isLeaf: true);

  /// General Library Documentation Undocument By General Corporation & Global Corporation & General Developer
  void ma_blend_f32(
    ffi.Pointer<ffi.Float> pOut,
    ffi.Pointer<ffi.Float> pInA,
    ffi.Pointer<ffi.Float> pInB,
    double factor,
    int channels,
  ) {
    return _ma_blend_f32(
      pOut,
      pInA,
      pInB,
      factor,
      channels,
    );
  }

  late final _ma_blend_f32Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Pointer<ffi.Float>, ffi.Pointer<ffi.Float>,
              ffi.Pointer<ffi.Float>, ffi.Float, ma_uint32)>>('ma_blend_f32');
  late final _ma_blend_f32 = _ma_blend_f32Ptr.asFunction<
      void Function(ffi.Pointer<ffi.Float>, ffi.Pointer<ffi.Float>,
          ffi.Pointer<ffi.Float>, double, int)>(isLeaf: true);

  /// General Library Documentation Undocument By General Corporation & Global Corporation & General Developer
  int ma_get_bytes_per_sample(
    int format,
  ) {
    return _ma_get_bytes_per_sample(
      format,
    );
  }

  late final _ma_get_bytes_per_samplePtr =
      _lookup<ffi.NativeFunction<ma_uint32 Function(ffi.Int32)>>(
          'ma_get_bytes_per_sample');
  late final _ma_get_bytes_per_sample =
      _ma_get_bytes_per_samplePtr.asFunction<int Function(int)>(isLeaf: true);

  /// General Library Documentation Undocument By General Corporation & Global Corporation & General Developer
  ffi.Pointer<ffi.Char> ma_log_level_to_string(
    int logLevel,
  ) {
    return _ma_log_level_to_string(
      logLevel,
    );
  }

  late final _ma_log_level_to_stringPtr =
      _lookup<ffi.NativeFunction<ffi.Pointer<ffi.Char> Function(ma_uint32)>>(
          'ma_log_level_to_string');
  late final _ma_log_level_to_string = _ma_log_level_to_stringPtr
      .asFunction<ffi.Pointer<ffi.Char> Function(int)>(isLeaf: true);

  /// Synchronization
  int ma_spinlock_lock(
    ffi.Pointer<ma_spinlock> pSpinlock,
  ) {
    return _ma_spinlock_lock(
      pSpinlock,
    );
  }

  late final _ma_spinlock_lockPtr =
      _lookup<ffi.NativeFunction<ffi.Int32 Function(ffi.Pointer<ma_spinlock>)>>(
          'ma_spinlock_lock');
  late final _ma_spinlock_lock = _ma_spinlock_lockPtr
      .asFunction<int Function(ffi.Pointer<ma_spinlock>)>(isLeaf: true);

  /// General Library Documentation Undocument By General Corporation & Global Corporation & General Developer
  int ma_spinlock_lock_noyield(
    ffi.Pointer<ma_spinlock> pSpinlock,
  ) {
    return _ma_spinlock_lock_noyield(
      pSpinlock,
    );
  }

  late final _ma_spinlock_lock_noyieldPtr =
      _lookup<ffi.NativeFunction<ffi.Int32 Function(ffi.Pointer<ma_spinlock>)>>(
          'ma_spinlock_lock_noyield');
  late final _ma_spinlock_lock_noyield = _ma_spinlock_lock_noyieldPtr
      .asFunction<int Function(ffi.Pointer<ma_spinlock>)>(isLeaf: true);

  /// General Library Documentation Undocument By General Corporation & Global Corporation & General Developer
  int ma_spinlock_unlock(
    ffi.Pointer<ma_spinlock> pSpinlock,
  ) {
    return _ma_spinlock_unlock(
      pSpinlock,
    );
  }

  late final _ma_spinlock_unlockPtr =
      _lookup<ffi.NativeFunction<ffi.Int32 Function(ffi.Pointer<ma_spinlock>)>>(
          'ma_spinlock_unlock');
  late final _ma_spinlock_unlock = _ma_spinlock_unlockPtr
      .asFunction<int Function(ffi.Pointer<ma_spinlock>)>(isLeaf: true);

  /// General Library Documentation Undocument By General Corporation & Global Corporation & General Developer
  int ma_mutex_init(
    ffi.Pointer<ma_mutex> pMutex,
  ) {
    return _ma_mutex_init(
      pMutex,
    );
  }

  late final _ma_mutex_initPtr =
      _lookup<ffi.NativeFunction<ffi.Int32 Function(ffi.Pointer<ma_mutex>)>>(
          'ma_mutex_init');
  late final _ma_mutex_init = _ma_mutex_initPtr
      .asFunction<int Function(ffi.Pointer<ma_mutex>)>(isLeaf: true);

  /// General Library Documentation Undocument By General Corporation & Global Corporation & General Developer
  void ma_mutex_uninit(
    ffi.Pointer<ma_mutex> pMutex,
  ) {
    return _ma_mutex_uninit(
      pMutex,
    );
  }

  late final _ma_mutex_uninitPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Pointer<ma_mutex>)>>(
          'ma_mutex_uninit');
  late final _ma_mutex_uninit = _ma_mutex_uninitPtr
      .asFunction<void Function(ffi.Pointer<ma_mutex>)>(isLeaf: true);

  /// General Library Documentation Undocument By General Corporation & Global Corporation & General Developer
  void ma_mutex_lock(
    ffi.Pointer<ma_mutex> pMutex,
  ) {
    return _ma_mutex_lock(
      pMutex,
    );
  }

  late final _ma_mutex_lockPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Pointer<ma_mutex>)>>(
          'ma_mutex_lock');
  late final _ma_mutex_lock = _ma_mutex_lockPtr
      .asFunction<void Function(ffi.Pointer<ma_mutex>)>(isLeaf: true);

  /// General Library Documentation Undocument By General Corporation & Global Corporation & General Developer
  void ma_mutex_unlock(
    ffi.Pointer<ma_mutex> pMutex,
  ) {
    return _ma_mutex_unlock(
      pMutex,
    );
  }

  late final _ma_mutex_unlockPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Pointer<ma_mutex>)>>(
          'ma_mutex_unlock');
  late final _ma_mutex_unlock = _ma_mutex_unlockPtr
      .asFunction<void Function(ffi.Pointer<ma_mutex>)>(isLeaf: true);

  /// General Library Documentation Undocument By General Corporation & Global Corporation & General Developer
  int ma_event_init(
    ffi.Pointer<ma_event> pEvent,
  ) {
    return _ma_event_init(
      pEvent,
    );
  }

  late final _ma_event_initPtr =
      _lookup<ffi.NativeFunction<ffi.Int32 Function(ffi.Pointer<ma_event>)>>(
          'ma_event_init');
  late final _ma_event_init = _ma_event_initPtr
      .asFunction<int Function(ffi.Pointer<ma_event>)>(isLeaf: true);

  /// General Library Documentation Undocument By General Corporation & Global Corporation & General Developer
  void ma_event_uninit(
    ffi.Pointer<ma_event> pEvent,
  ) {
    return _ma_event_uninit(
      pEvent,
    );
  }

  late final _ma_event_uninitPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Pointer<ma_event>)>>(
          'ma_event_uninit');
  late final _ma_event_uninit = _ma_event_uninitPtr
      .asFunction<void Function(ffi.Pointer<ma_event>)>(isLeaf: true);

  /// General Library Documentation Undocument By General Corporation & Global Corporation & General Developer
  int ma_event_wait(
    ffi.Pointer<ma_event> pEvent,
  ) {
    return _ma_event_wait(
      pEvent,
    );
  }

  late final _ma_event_waitPtr =
      _lookup<ffi.NativeFunction<ffi.Int32 Function(ffi.Pointer<ma_event>)>>(
          'ma_event_wait');
  late final _ma_event_wait = _ma_event_waitPtr
      .asFunction<int Function(ffi.Pointer<ma_event>)>(isLeaf: true);

  /// General Library Documentation Undocument By General Corporation & Global Corporation & General Developer
  int ma_event_signal(
    ffi.Pointer<ma_event> pEvent,
  ) {
    return _ma_event_signal(
      pEvent,
    );
  }

  late final _ma_event_signalPtr =
      _lookup<ffi.NativeFunction<ffi.Int32 Function(ffi.Pointer<ma_event>)>>(
          'ma_event_signal');
  late final _ma_event_signal = _ma_event_signalPtr
      .asFunction<int Function(ffi.Pointer<ma_event>)>(isLeaf: true);

  /// General Library Documentation Undocument By General Corporation & Global Corporation & General Developer
  int ma_fence_init(
    ffi.Pointer<ma_fence> pFence,
  ) {
    return _ma_fence_init(
      pFence,
    );
  }

  late final _ma_fence_initPtr =
      _lookup<ffi.NativeFunction<ffi.Int32 Function(ffi.Pointer<ma_fence>)>>(
          'ma_fence_init');
  late final _ma_fence_init = _ma_fence_initPtr
      .asFunction<int Function(ffi.Pointer<ma_fence>)>(isLeaf: true);

  /// General Library Documentation Undocument By General Corporation & Global Corporation & General Developer
  void ma_fence_uninit(
    ffi.Pointer<ma_fence> pFence,
  ) {
    return _ma_fence_uninit(
      pFence,
    );
  }

  late final _ma_fence_uninitPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Pointer<ma_fence>)>>(
          'ma_fence_uninit');
  late final _ma_fence_uninit = _ma_fence_uninitPtr
      .asFunction<void Function(ffi.Pointer<ma_fence>)>(isLeaf: true);

  /// General Library Documentation Undocument By General Corporation & Global Corporation & General Developer
  int ma_fence_acquire(
    ffi.Pointer<ma_fence> pFence,
  ) {
    return _ma_fence_acquire(
      pFence,
    );
  }

  late final _ma_fence_acquirePtr =
      _lookup<ffi.NativeFunction<ffi.Int32 Function(ffi.Pointer<ma_fence>)>>(
          'ma_fence_acquire');
  late final _ma_fence_acquire = _ma_fence_acquirePtr
      .asFunction<int Function(ffi.Pointer<ma_fence>)>(isLeaf: true);

  /// General Library Documentation Undocument By General Corporation & Global Corporation & General Developer
  int ma_fence_release(
    ffi.Pointer<ma_fence> pFence,
  ) {
    return _ma_fence_release(
      pFence,
    );
  }

  late final _ma_fence_releasePtr =
      _lookup<ffi.NativeFunction<ffi.Int32 Function(ffi.Pointer<ma_fence>)>>(
          'ma_fence_release');
  late final _ma_fence_release = _ma_fence_releasePtr
      .asFunction<int Function(ffi.Pointer<ma_fence>)>(isLeaf: true);

  /// General Library Documentation Undocument By General Corporation & Global Corporation & General Developer
  int ma_fence_wait(
    ffi.Pointer<ma_fence> pFence,
  ) {
    return _ma_fence_wait(
      pFence,
    );
  }

  late final _ma_fence_waitPtr =
      _lookup<ffi.NativeFunction<ffi.Int32 Function(ffi.Pointer<ma_fence>)>>(
          'ma_fence_wait');
  late final _ma_fence_wait = _ma_fence_waitPtr
      .asFunction<int Function(ffi.Pointer<ma_fence>)>(isLeaf: true);

  /// General Library Documentation Undocument By General Corporation & Global Corporation & General Developer
  int ma_async_notification_signal(
    ffi.Pointer<ma_async_notification> pNotification,
  ) {
    return _ma_async_notification_signal(
      pNotification,
    );
  }

  late final _ma_async_notification_signalPtr = _lookup<
          ffi.NativeFunction<
              ffi.Int32 Function(ffi.Pointer<ma_async_notification>)>>(
      'ma_async_notification_signal');
  late final _ma_async_notification_signal = _ma_async_notification_signalPtr
      .asFunction<int Function(ffi.Pointer<ma_async_notification>)>(
          isLeaf: true);

  /// General Library Documentation Undocument By General Corporation & Global Corporation & General Developer
  int ma_async_notification_poll_init(
    ffi.Pointer<ma_async_notification_poll> pNotificationPoll,
  ) {
    return _ma_async_notification_poll_init(
      pNotificationPoll,
    );
  }

  late final _ma_async_notification_poll_initPtr = _lookup<
          ffi.NativeFunction<
              ffi.Int32 Function(ffi.Pointer<ma_async_notification_poll>)>>(
      'ma_async_notification_poll_init');
  late final _ma_async_notification_poll_init =
      _ma_async_notification_poll_initPtr
          .asFunction<int Function(ffi.Pointer<ma_async_notification_poll>)>(
              isLeaf: true);

  /// General Library Documentation Undocument By General Corporation & Global Corporation & General Developer
  int ma_async_notification_poll_is_signalled(
    ffi.Pointer<ma_async_notification_poll> pNotificationPoll,
  ) {
    return _ma_async_notification_poll_is_signalled(
      pNotificationPoll,
    );
  }

  late final _ma_async_notification_poll_is_signalledPtr = _lookup<
          ffi.NativeFunction<
              ma_bool32 Function(ffi.Pointer<ma_async_notification_poll>)>>(
      'ma_async_notification_poll_is_signalled');
  late final _ma_async_notification_poll_is_signalled =
      _ma_async_notification_poll_is_signalledPtr
          .asFunction<int Function(ffi.Pointer<ma_async_notification_poll>)>(
              isLeaf: true);

  /// General Library Documentation Undocument By General Corporation & Global Corporation & General Developer
  int ma_async_notification_event_init(
    ffi.Pointer<ma_async_notification_event> pNotificationEvent,
  ) {
    return _ma_async_notification_event_init(
      pNotificationEvent,
    );
  }

  late final _ma_async_notification_event_initPtr = _lookup<
          ffi.NativeFunction<
              ffi.Int32 Function(ffi.Pointer<ma_async_notification_event>)>>(
      'ma_async_notification_event_init');
  late final _ma_async_notification_event_init =
      _ma_async_notification_event_initPtr
          .asFunction<int Function(ffi.Pointer<ma_async_notification_event>)>(
              isLeaf: true);

  /// General Library Documentation Undocument By General Corporation & Global Corporation & General Developer
  int ma_async_notification_event_uninit(
    ffi.Pointer<ma_async_notification_event> pNotificationEvent,
  ) {
    return _ma_async_notification_event_uninit(
      pNotificationEvent,
    );
  }

  late final _ma_async_notification_event_uninitPtr = _lookup<
          ffi.NativeFunction<
              ffi.Int32 Function(ffi.Pointer<ma_async_notification_event>)>>(
      'ma_async_notification_event_uninit');
  late final _ma_async_notification_event_uninit =
      _ma_async_notification_event_uninitPtr
          .asFunction<int Function(ffi.Pointer<ma_async_notification_event>)>(
              isLeaf: true);

  /// General Library Documentation Undocument By General Corporation & Global Corporation & General Developer
  int ma_async_notification_event_wait(
    ffi.Pointer<ma_async_notification_event> pNotificationEvent,
  ) {
    return _ma_async_notification_event_wait(
      pNotificationEvent,
    );
  }

  late final _ma_async_notification_event_waitPtr = _lookup<
          ffi.NativeFunction<
              ffi.Int32 Function(ffi.Pointer<ma_async_notification_event>)>>(
      'ma_async_notification_event_wait');
  late final _ma_async_notification_event_wait =
      _ma_async_notification_event_waitPtr
          .asFunction<int Function(ffi.Pointer<ma_async_notification_event>)>(
              isLeaf: true);

  /// General Library Documentation Undocument By General Corporation & Global Corporation & General Developer
  int ma_async_notification_event_signal(
    ffi.Pointer<ma_async_notification_event> pNotificationEvent,
  ) {
    return _ma_async_notification_event_signal(
      pNotificationEvent,
    );
  }

  late final _ma_async_notification_event_signalPtr = _lookup<
          ffi.NativeFunction<
              ffi.Int32 Function(ffi.Pointer<ma_async_notification_event>)>>(
      'ma_async_notification_event_signal');
  late final _ma_async_notification_event_signal =
      _ma_async_notification_event_signalPtr
          .asFunction<int Function(ffi.Pointer<ma_async_notification_event>)>(
              isLeaf: true);

  /// General Library Documentation Undocument By General Corporation & Global Corporation & General Developer
  ma_slot_allocator_config ma_slot_allocator_config_init(
    int capacity,
  ) {
    return _ma_slot_allocator_config_init(
      capacity,
    );
  }

  late final _ma_slot_allocator_config_initPtr =
      _lookup<ffi.NativeFunction<ma_slot_allocator_config Function(ma_uint32)>>(
          'ma_slot_allocator_config_init');
  late final _ma_slot_allocator_config_init = _ma_slot_allocator_config_initPtr
      .asFunction<ma_slot_allocator_config Function(int)>(isLeaf: true);

  /// General Library Documentation Undocument By General Corporation & Global Corporation & General Developer
  int ma_slot_allocator_get_heap_size(
    ffi.Pointer<ma_slot_allocator_config> pConfig,
    ffi.Pointer<ffi.Size> pHeapSizeInBytes,
  ) {
    return _ma_slot_allocator_get_heap_size(
      pConfig,
      pHeapSizeInBytes,
    );
  }

  late final _ma_slot_allocator_get_heap_sizePtr = _lookup<
      ffi.NativeFunction<
          ffi.Int32 Function(ffi.Pointer<ma_slot_allocator_config>,
              ffi.Pointer<ffi.Size>)>>('ma_slot_allocator_get_heap_size');
  late final _ma_slot_allocator_get_heap_size =
      _ma_slot_allocator_get_heap_sizePtr.asFunction<
          int Function(ffi.Pointer<ma_slot_allocator_config>,
              ffi.Pointer<ffi.Size>)>(isLeaf: true);

  /// General Library Documentation Undocument By General Corporation & Global Corporation & General Developer
  int ma_slot_allocator_init_preallocated(
    ffi.Pointer<ma_slot_allocator_config> pConfig,
    ffi.Pointer<ffi.Void> pHeap,
    ffi.Pointer<ma_slot_allocator> pAllocator,
  ) {
    return _ma_slot_allocator_init_preallocated(
      pConfig,
      pHeap,
      pAllocator,
    );
  }

  late final _ma_slot_allocator_init_preallocatedPtr = _lookup<
          ffi.NativeFunction<
              ffi.Int32 Function(ffi.Pointer<ma_slot_allocator_config>,
                  ffi.Pointer<ffi.Void>, ffi.Pointer<ma_slot_allocator>)>>(
      'ma_slot_allocator_init_preallocated');
  late final _ma_slot_allocator_init_preallocated =
      _ma_slot_allocator_init_preallocatedPtr.asFunction<
          int Function(
              ffi.Pointer<ma_slot_allocator_config>,
              ffi.Pointer<ffi.Void>,
              ffi.Pointer<ma_slot_allocator>)>(isLeaf: true);

  /// General Library Documentation Undocument By General Corporation & Global Corporation & General Developer
  int ma_slot_allocator_init(
    ffi.Pointer<ma_slot_allocator_config> pConfig,
    ffi.Pointer<ma_allocation_callbacks> pAllocationCallbacks,
    ffi.Pointer<ma_slot_allocator> pAllocator,
  ) {
    return _ma_slot_allocator_init(
      pConfig,
      pAllocationCallbacks,
      pAllocator,
    );
  }

  late final _ma_slot_allocator_initPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int32 Function(
              ffi.Pointer<ma_slot_allocator_config>,
              ffi.Pointer<ma_allocation_callbacks>,
              ffi.Pointer<ma_slot_allocator>)>>('ma_slot_allocator_init');
  late final _ma_slot_allocator_init = _ma_slot_allocator_initPtr.asFunction<
      int Function(
          ffi.Pointer<ma_slot_allocator_config>,
          ffi.Pointer<ma_allocation_callbacks>,
          ffi.Pointer<ma_slot_allocator>)>(isLeaf: true);

  /// General Library Documentation Undocument By General Corporation & Global Corporation & General Developer
  void ma_slot_allocator_uninit(
    ffi.Pointer<ma_slot_allocator> pAllocator,
    ffi.Pointer<ma_allocation_callbacks> pAllocationCallbacks,
  ) {
    return _ma_slot_allocator_uninit(
      pAllocator,
      pAllocationCallbacks,
    );
  }

  late final _ma_slot_allocator_uninitPtr = _lookup<
          ffi.NativeFunction<
              ffi.Void Function(ffi.Pointer<ma_slot_allocator>,
                  ffi.Pointer<ma_allocation_callbacks>)>>(
      'ma_slot_allocator_uninit');
  late final _ma_slot_allocator_uninit =
      _ma_slot_allocator_uninitPtr.asFunction<
          void Function(ffi.Pointer<ma_slot_allocator>,
              ffi.Pointer<ma_allocation_callbacks>)>(isLeaf: true);

  /// General Library Documentation Undocument By General Corporation & Global Corporation & General Developer
  int ma_slot_allocator_alloc(
    ffi.Pointer<ma_slot_allocator> pAllocator,
    ffi.Pointer<ma_uint64> pSlot,
  ) {
    return _ma_slot_allocator_alloc(
      pAllocator,
      pSlot,
    );
  }

  late final _ma_slot_allocator_allocPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int32 Function(ffi.Pointer<ma_slot_allocator>,
              ffi.Pointer<ma_uint64>)>>('ma_slot_allocator_alloc');
  late final _ma_slot_allocator_alloc = _ma_slot_allocator_allocPtr.asFunction<
          int Function(ffi.Pointer<ma_slot_allocator>, ffi.Pointer<ma_uint64>)>(
      isLeaf: true);

  /// General Library Documentation Undocument By General Corporation & Global Corporation & General Developer
  int ma_slot_allocator_free(
    ffi.Pointer<ma_slot_allocator> pAllocator,
    int slot,
  ) {
    return _ma_slot_allocator_free(
      pAllocator,
      slot,
    );
  }

  late final _ma_slot_allocator_freePtr = _lookup<
      ffi.NativeFunction<
          ffi.Int32 Function(ffi.Pointer<ma_slot_allocator>,
              ma_uint64)>>('ma_slot_allocator_free');
  late final _ma_slot_allocator_free = _ma_slot_allocator_freePtr
      .asFunction<int Function(ffi.Pointer<ma_slot_allocator>, int)>(
          isLeaf: true);

  /// General Library Documentation Undocument By General Corporation & Global Corporation & General Developer
  ma_job ma_job_init(
    int code,
  ) {
    return _ma_job_init(
      code,
    );
  }

  late final _ma_job_initPtr =
      _lookup<ffi.NativeFunction<ma_job Function(ma_uint16)>>('ma_job_init');
  late final _ma_job_init =
      _ma_job_initPtr.asFunction<ma_job Function(int)>(isLeaf: true);

  /// General Library Documentation Undocument By General Corporation & Global Corporation & General Developer
  int ma_job_process(
    ffi.Pointer<ma_job> pJob,
  ) {
    return _ma_job_process(
      pJob,
    );
  }

  late final _ma_job_processPtr =
      _lookup<ffi.NativeFunction<ffi.Int32 Function(ffi.Pointer<ma_job>)>>(
          'ma_job_process');
  late final _ma_job_process = _ma_job_processPtr
      .asFunction<int Function(ffi.Pointer<ma_job>)>(isLeaf: true);

  /// General Library Documentation Undocument By General Corporation & Global Corporation & General Developer
  ma_job_queue_config ma_job_queue_config_init(
    int flags,
    int capacity,
  ) {
    return _ma_job_queue_config_init(
      flags,
      capacity,
    );
  }

  late final _ma_job_queue_config_initPtr = _lookup<
          ffi
          .NativeFunction<ma_job_queue_config Function(ma_uint32, ma_uint32)>>(
      'ma_job_queue_config_init');
  late final _ma_job_queue_config_init = _ma_job_queue_config_initPtr
      .asFunction<ma_job_queue_config Function(int, int)>(isLeaf: true);

  /// General Library Documentation Undocument By General Corporation & Global Corporation & General Developer
  int ma_job_queue_get_heap_size(
    ffi.Pointer<ma_job_queue_config> pConfig,
    ffi.Pointer<ffi.Size> pHeapSizeInBytes,
  ) {
    return _ma_job_queue_get_heap_size(
      pConfig,
      pHeapSizeInBytes,
    );
  }

  late final _ma_job_queue_get_heap_sizePtr = _lookup<
      ffi.NativeFunction<
          ffi.Int32 Function(ffi.Pointer<ma_job_queue_config>,
              ffi.Pointer<ffi.Size>)>>('ma_job_queue_get_heap_size');
  late final _ma_job_queue_get_heap_size =
      _ma_job_queue_get_heap_sizePtr.asFunction<
          int Function(ffi.Pointer<ma_job_queue_config>,
              ffi.Pointer<ffi.Size>)>(isLeaf: true);

  /// General Library Documentation Undocument By General Corporation & Global Corporation & General Developer
  int ma_job_queue_init_preallocated(
    ffi.Pointer<ma_job_queue_config> pConfig,
    ffi.Pointer<ffi.Void> pHeap,
    ffi.Pointer<ma_job_queue> pQueue,
  ) {
    return _ma_job_queue_init_preallocated(
      pConfig,
      pHeap,
      pQueue,
    );
  }

  late final _ma_job_queue_init_preallocatedPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int32 Function(
              ffi.Pointer<ma_job_queue_config>,
              ffi.Pointer<ffi.Void>,
              ffi.Pointer<ma_job_queue>)>>('ma_job_queue_init_preallocated');
  late final _ma_job_queue_init_preallocated =
      _ma_job_queue_init_preallocatedPtr.asFunction<
          int Function(ffi.Pointer<ma_job_queue_config>, ffi.Pointer<ffi.Void>,
              ffi.Pointer<ma_job_queue>)>(isLeaf: true);

  /// General Library Documentation Undocument By General Corporation & Global Corporation & General Developer
  int ma_job_queue_init(
    ffi.Pointer<ma_job_queue_config> pConfig,
    ffi.Pointer<ma_allocation_callbacks> pAllocationCallbacks,
    ffi.Pointer<ma_job_queue> pQueue,
  ) {
    return _ma_job_queue_init(
      pConfig,
      pAllocationCallbacks,
      pQueue,
    );
  }

  late final _ma_job_queue_initPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int32 Function(
              ffi.Pointer<ma_job_queue_config>,
              ffi.Pointer<ma_allocation_callbacks>,
              ffi.Pointer<ma_job_queue>)>>('ma_job_queue_init');
  late final _ma_job_queue_init = _ma_job_queue_initPtr.asFunction<
      int Function(
          ffi.Pointer<ma_job_queue_config>,
          ffi.Pointer<ma_allocation_callbacks>,
          ffi.Pointer<ma_job_queue>)>(isLeaf: true);

  /// General Library Documentation Undocument By General Corporation & Global Corporation & General Developer
  void ma_job_queue_uninit(
    ffi.Pointer<ma_job_queue> pQueue,
    ffi.Pointer<ma_allocation_callbacks> pAllocationCallbacks,
  ) {
    return _ma_job_queue_uninit(
      pQueue,
      pAllocationCallbacks,
    );
  }

  late final _ma_job_queue_uninitPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Pointer<ma_job_queue>,
              ffi.Pointer<ma_allocation_callbacks>)>>('ma_job_queue_uninit');
  late final _ma_job_queue_uninit = _ma_job_queue_uninitPtr.asFunction<
      void Function(ffi.Pointer<ma_job_queue>,
          ffi.Pointer<ma_allocation_callbacks>)>(isLeaf: true);

  /// General Library Documentation Undocument By General Corporation & Global Corporation & General Developer
  int ma_job_queue_post(
    ffi.Pointer<ma_job_queue> pQueue,
    ffi.Pointer<ma_job> pJob,
  ) {
    return _ma_job_queue_post(
      pQueue,
      pJob,
    );
  }

  late final _ma_job_queue_postPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int32 Function(ffi.Pointer<ma_job_queue>,
              ffi.Pointer<ma_job>)>>('ma_job_queue_post');
  late final _ma_job_queue_post = _ma_job_queue_postPtr
      .asFunction<int Function(ffi.Pointer<ma_job_queue>, ffi.Pointer<ma_job>)>(
          isLeaf: true);

  /// General Library Documentation Undocument By General Corporation & Global Corporation & General Developer
  int ma_job_queue_next(
    ffi.Pointer<ma_job_queue> pQueue,
    ffi.Pointer<ma_job> pJob,
  ) {
    return _ma_job_queue_next(
      pQueue,
      pJob,
    );
  }

  late final _ma_job_queue_nextPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int32 Function(ffi.Pointer<ma_job_queue>,
              ffi.Pointer<ma_job>)>>('ma_job_queue_next');
  late final _ma_job_queue_next = _ma_job_queue_nextPtr
      .asFunction<int Function(ffi.Pointer<ma_job_queue>, ffi.Pointer<ma_job>)>(
          isLeaf: true);

  /// General Library Documentation Undocument By General Corporation & Global Corporation & General Developer
  ma_device_job_thread_config ma_device_job_thread_config_init() {
    return _ma_device_job_thread_config_init();
  }

  late final _ma_device_job_thread_config_initPtr =
      _lookup<ffi.NativeFunction<ma_device_job_thread_config Function()>>(
          'ma_device_job_thread_config_init');
  late final _ma_device_job_thread_config_init =
      _ma_device_job_thread_config_initPtr
          .asFunction<ma_device_job_thread_config Function()>(isLeaf: true);

  /// General Library Documentation Undocument By General Corporation & Global Corporation & General Developer
  int ma_device_job_thread_init(
    ffi.Pointer<ma_device_job_thread_config> pConfig,
    ffi.Pointer<ma_allocation_callbacks> pAllocationCallbacks,
    ffi.Pointer<ma_device_job_thread> pJobThread,
  ) {
    return _ma_device_job_thread_init(
      pConfig,
      pAllocationCallbacks,
      pJobThread,
    );
  }

  late final _ma_device_job_thread_initPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int32 Function(
              ffi.Pointer<ma_device_job_thread_config>,
              ffi.Pointer<ma_allocation_callbacks>,
              ffi.Pointer<ma_device_job_thread>)>>('ma_device_job_thread_init');
  late final _ma_device_job_thread_init =
      _ma_device_job_thread_initPtr.asFunction<
          int Function(
              ffi.Pointer<ma_device_job_thread_config>,
              ffi.Pointer<ma_allocation_callbacks>,
              ffi.Pointer<ma_device_job_thread>)>(isLeaf: true);

  /// General Library Documentation Undocument By General Corporation & Global Corporation & General Developer
  void ma_device_job_thread_uninit(
    ffi.Pointer<ma_device_job_thread> pJobThread,
    ffi.Pointer<ma_allocation_callbacks> pAllocationCallbacks,
  ) {
    return _ma_device_job_thread_uninit(
      pJobThread,
      pAllocationCallbacks,
    );
  }

  late final _ma_device_job_thread_uninitPtr = _lookup<
          ffi.NativeFunction<
              ffi.Void Function(ffi.Pointer<ma_device_job_thread>,
                  ffi.Pointer<ma_allocation_callbacks>)>>(
      'ma_device_job_thread_uninit');
  late final _ma_device_job_thread_uninit =
      _ma_device_job_thread_uninitPtr.asFunction<
          void Function(ffi.Pointer<ma_device_job_thread>,
              ffi.Pointer<ma_allocation_callbacks>)>(isLeaf: true);

  /// General Library Documentation Undocument By General Corporation & Global Corporation & General Developer
  int ma_device_job_thread_post(
    ffi.Pointer<ma_device_job_thread> pJobThread,
    ffi.Pointer<ma_job> pJob,
  ) {
    return _ma_device_job_thread_post(
      pJobThread,
      pJob,
    );
  }

  late final _ma_device_job_thread_postPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int32 Function(ffi.Pointer<ma_device_job_thread>,
              ffi.Pointer<ma_job>)>>('ma_device_job_thread_post');
  late final _ma_device_job_thread_post =
      _ma_device_job_thread_postPtr.asFunction<
          int Function(ffi.Pointer<ma_device_job_thread>,
              ffi.Pointer<ma_job>)>(isLeaf: true);

  /// General Library Documentation Undocument By General Corporation & Global Corporation & General Developer
  int ma_device_job_thread_next(
    ffi.Pointer<ma_device_job_thread> pJobThread,
    ffi.Pointer<ma_job> pJob,
  ) {
    return _ma_device_job_thread_next(
      pJobThread,
      pJob,
    );
  }

  late final _ma_device_job_thread_nextPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int32 Function(ffi.Pointer<ma_device_job_thread>,
              ffi.Pointer<ma_job>)>>('ma_device_job_thread_next');
  late final _ma_device_job_thread_next =
      _ma_device_job_thread_nextPtr.asFunction<
          int Function(ffi.Pointer<ma_device_job_thread>,
              ffi.Pointer<ma_job>)>(isLeaf: true);

  /// General Library Documentation Undocument By General Corporation & Global Corporation & General Developer
  ma_context_config ma_context_config_init() {
    return _ma_context_config_init();
  }

  late final _ma_context_config_initPtr =
      _lookup<ffi.NativeFunction<ma_context_config Function()>>(
          'ma_context_config_init');
  late final _ma_context_config_init = _ma_context_config_initPtr
      .asFunction<ma_context_config Function()>(isLeaf: true);

  /// General Library Documentation Undocument By General Corporation & Global Corporation & General Developer
  int ma_context_init(
    ffi.Pointer<ffi.Int32> backends,
    int backendCount,
    ffi.Pointer<ma_context_config> pConfig,
    ffi.Pointer<ma_context> pContext,
  ) {
    return _ma_context_init(
      backends,
      backendCount,
      pConfig,
      pContext,
    );
  }

  late final _ma_context_initPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int32 Function(
              ffi.Pointer<ffi.Int32>,
              ma_uint32,
              ffi.Pointer<ma_context_config>,
              ffi.Pointer<ma_context>)>>('ma_context_init');
  late final _ma_context_init = _ma_context_initPtr.asFunction<
      int Function(ffi.Pointer<ffi.Int32>, int, ffi.Pointer<ma_context_config>,
          ffi.Pointer<ma_context>)>(isLeaf: true);

  /// General Library Documentation Undocument By General Corporation & Global Corporation & General Developer
  int ma_context_uninit(
    ffi.Pointer<ma_context> pContext,
  ) {
    return _ma_context_uninit(
      pContext,
    );
  }

  late final _ma_context_uninitPtr =
      _lookup<ffi.NativeFunction<ffi.Int32 Function(ffi.Pointer<ma_context>)>>(
          'ma_context_uninit');
  late final _ma_context_uninit = _ma_context_uninitPtr
      .asFunction<int Function(ffi.Pointer<ma_context>)>(isLeaf: true);

  /// General Library Documentation Undocument By General Corporation & Global Corporation & General Developer
  int ma_context_sizeof() {
    return _ma_context_sizeof();
  }

  late final _ma_context_sizeofPtr =
      _lookup<ffi.NativeFunction<ffi.Size Function()>>('ma_context_sizeof');
  late final _ma_context_sizeof =
      _ma_context_sizeofPtr.asFunction<int Function()>(isLeaf: true);

  /// General Library Documentation Undocument By General Corporation & Global Corporation & General Developer
  ffi.Pointer<ma_log> ma_context_get_log(
    ffi.Pointer<ma_context> pContext,
  ) {
    return _ma_context_get_log(
      pContext,
    );
  }

  late final _ma_context_get_logPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ma_log> Function(
              ffi.Pointer<ma_context>)>>('ma_context_get_log');
  late final _ma_context_get_log = _ma_context_get_logPtr
      .asFunction<ffi.Pointer<ma_log> Function(ffi.Pointer<ma_context>)>(
          isLeaf: true);

  /// General Library Documentation Undocument By General Corporation & Global Corporation & General Developer
  int ma_context_enumerate_devices(
    ffi.Pointer<ma_context> pContext,
    ma_enum_devices_callback_proc callback,
    ffi.Pointer<ffi.Void> pUserData,
  ) {
    return _ma_context_enumerate_devices(
      pContext,
      callback,
      pUserData,
    );
  }

  late final _ma_context_enumerate_devicesPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int32 Function(
              ffi.Pointer<ma_context>,
              ma_enum_devices_callback_proc,
              ffi.Pointer<ffi.Void>)>>('ma_context_enumerate_devices');
  late final _ma_context_enumerate_devices =
      _ma_context_enumerate_devicesPtr.asFunction<
          int Function(ffi.Pointer<ma_context>, ma_enum_devices_callback_proc,
              ffi.Pointer<ffi.Void>)>(isLeaf: true);

  /// General Library Documentation Undocument By General Corporation & Global Corporation & General Developer
  int ma_context_get_devices(
    ffi.Pointer<ma_context> pContext,
    ffi.Pointer<ffi.Pointer<ma_device_info>> ppPlaybackDeviceInfos,
    ffi.Pointer<ma_uint32> pPlaybackDeviceCount,
    ffi.Pointer<ffi.Pointer<ma_device_info>> ppCaptureDeviceInfos,
    ffi.Pointer<ma_uint32> pCaptureDeviceCount,
  ) {
    return _ma_context_get_devices(
      pContext,
      ppPlaybackDeviceInfos,
      pPlaybackDeviceCount,
      ppCaptureDeviceInfos,
      pCaptureDeviceCount,
    );
  }

  late final _ma_context_get_devicesPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int32 Function(
              ffi.Pointer<ma_context>,
              ffi.Pointer<ffi.Pointer<ma_device_info>>,
              ffi.Pointer<ma_uint32>,
              ffi.Pointer<ffi.Pointer<ma_device_info>>,
              ffi.Pointer<ma_uint32>)>>('ma_context_get_devices');
  late final _ma_context_get_devices = _ma_context_get_devicesPtr.asFunction<
      int Function(
          ffi.Pointer<ma_context>,
          ffi.Pointer<ffi.Pointer<ma_device_info>>,
          ffi.Pointer<ma_uint32>,
          ffi.Pointer<ffi.Pointer<ma_device_info>>,
          ffi.Pointer<ma_uint32>)>(isLeaf: true);

  /// General Library Documentation Undocument By General Corporation & Global Corporation & General Developer
  int ma_context_get_device_info(
    ffi.Pointer<ma_context> pContext,
    int deviceType,
    ffi.Pointer<ma_device_id> pDeviceID,
    ffi.Pointer<ma_device_info> pDeviceInfo,
  ) {
    return _ma_context_get_device_info(
      pContext,
      deviceType,
      pDeviceID,
      pDeviceInfo,
    );
  }

  late final _ma_context_get_device_infoPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int32 Function(
              ffi.Pointer<ma_context>,
              ffi.Int32,
              ffi.Pointer<ma_device_id>,
              ffi.Pointer<ma_device_info>)>>('ma_context_get_device_info');
  late final _ma_context_get_device_info =
      _ma_context_get_device_infoPtr.asFunction<
          int Function(ffi.Pointer<ma_context>, int, ffi.Pointer<ma_device_id>,
              ffi.Pointer<ma_device_info>)>(isLeaf: true);

  /// General Library Documentation Undocument By General Corporation & Global Corporation & General Developer
  int ma_context_is_loopback_supported(
    ffi.Pointer<ma_context> pContext,
  ) {
    return _ma_context_is_loopback_supported(
      pContext,
    );
  }

  late final _ma_context_is_loopback_supportedPtr =
      _lookup<ffi.NativeFunction<ma_bool32 Function(ffi.Pointer<ma_context>)>>(
          'ma_context_is_loopback_supported');
  late final _ma_context_is_loopback_supported =
      _ma_context_is_loopback_supportedPtr
          .asFunction<int Function(ffi.Pointer<ma_context>)>(isLeaf: true);

  /// General Library Documentation Undocument By General Corporation & Global Corporation & General Developer
  ma_device_config ma_device_config_init(
    int deviceType,
  ) {
    return _ma_device_config_init(
      deviceType,
    );
  }

  late final _ma_device_config_initPtr =
      _lookup<ffi.NativeFunction<ma_device_config Function(ffi.Int32)>>(
          'ma_device_config_init');
  late final _ma_device_config_init = _ma_device_config_initPtr
      .asFunction<ma_device_config Function(int)>(isLeaf: true);

  /// General Library Documentation Undocument By General Corporation & Global Corporation & General Developer
  int ma_device_init(
    ffi.Pointer<ma_context> pContext,
    ffi.Pointer<ma_device_config> pConfig,
    ffi.Pointer<ma_device> pDevice,
  ) {
    return _ma_device_init(
      pContext,
      pConfig,
      pDevice,
    );
  }

  late final _ma_device_initPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int32 Function(
              ffi.Pointer<ma_context>,
              ffi.Pointer<ma_device_config>,
              ffi.Pointer<ma_device>)>>('ma_device_init');
  late final _ma_device_init = _ma_device_initPtr.asFunction<
      int Function(ffi.Pointer<ma_context>, ffi.Pointer<ma_device_config>,
          ffi.Pointer<ma_device>)>(isLeaf: true);

  /// General Library Documentation Undocument By General Corporation & Global Corporation & General Developer
  int ma_device_init_ex(
    ffi.Pointer<ffi.Int32> backends,
    int backendCount,
    ffi.Pointer<ma_context_config> pContextConfig,
    ffi.Pointer<ma_device_config> pConfig,
    ffi.Pointer<ma_device> pDevice,
  ) {
    return _ma_device_init_ex(
      backends,
      backendCount,
      pContextConfig,
      pConfig,
      pDevice,
    );
  }

  late final _ma_device_init_exPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int32 Function(
              ffi.Pointer<ffi.Int32>,
              ma_uint32,
              ffi.Pointer<ma_context_config>,
              ffi.Pointer<ma_device_config>,
              ffi.Pointer<ma_device>)>>('ma_device_init_ex');
  late final _ma_device_init_ex = _ma_device_init_exPtr.asFunction<
      int Function(ffi.Pointer<ffi.Int32>, int, ffi.Pointer<ma_context_config>,
          ffi.Pointer<ma_device_config>, ffi.Pointer<ma_device>)>(isLeaf: true);

  /// General Library Documentation Undocument By General Corporation & Global Corporation & General Developer
  void ma_device_uninit(
    ffi.Pointer<ma_device> pDevice,
  ) {
    return _ma_device_uninit(
      pDevice,
    );
  }

  late final _ma_device_uninitPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Pointer<ma_device>)>>(
          'ma_device_uninit');
  late final _ma_device_uninit = _ma_device_uninitPtr
      .asFunction<void Function(ffi.Pointer<ma_device>)>(isLeaf: true);

  /// General Library Documentation Undocument By General Corporation & Global Corporation & General Developer
  ffi.Pointer<ma_context> ma_device_get_context(
    ffi.Pointer<ma_device> pDevice,
  ) {
    return _ma_device_get_context(
      pDevice,
    );
  }

  late final _ma_device_get_contextPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ma_context> Function(
              ffi.Pointer<ma_device>)>>('ma_device_get_context');
  late final _ma_device_get_context = _ma_device_get_contextPtr
      .asFunction<ffi.Pointer<ma_context> Function(ffi.Pointer<ma_device>)>(
          isLeaf: true);

  /// General Library Documentation Undocument By General Corporation & Global Corporation & General Developer
  ffi.Pointer<ma_log> ma_device_get_log(
    ffi.Pointer<ma_device> pDevice,
  ) {
    return _ma_device_get_log(
      pDevice,
    );
  }

  late final _ma_device_get_logPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ma_log> Function(
              ffi.Pointer<ma_device>)>>('ma_device_get_log');
  late final _ma_device_get_log = _ma_device_get_logPtr
      .asFunction<ffi.Pointer<ma_log> Function(ffi.Pointer<ma_device>)>(
          isLeaf: true);

  /// General Library Documentation Undocument By General Corporation & Global Corporation & General Developer
  int ma_device_get_info(
    ffi.Pointer<ma_device> pDevice,
    int type,
    ffi.Pointer<ma_device_info> pDeviceInfo,
  ) {
    return _ma_device_get_info(
      pDevice,
      type,
      pDeviceInfo,
    );
  }

  late final _ma_device_get_infoPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int32 Function(ffi.Pointer<ma_device>, ffi.Int32,
              ffi.Pointer<ma_device_info>)>>('ma_device_get_info');
  late final _ma_device_get_info = _ma_device_get_infoPtr.asFunction<
      int Function(ffi.Pointer<ma_device>, int,
          ffi.Pointer<ma_device_info>)>(isLeaf: true);

  /// General Library Documentation Undocument By General Corporation & Global Corporation & General Developer
  int ma_device_get_name(
    ffi.Pointer<ma_device> pDevice,
    int type,
    ffi.Pointer<ffi.Char> pName,
    int nameCap,
    ffi.Pointer<ffi.Size> pLengthNotIncludingNullTerminator,
  ) {
    return _ma_device_get_name(
      pDevice,
      type,
      pName,
      nameCap,
      pLengthNotIncludingNullTerminator,
    );
  }

  late final _ma_device_get_namePtr = _lookup<
      ffi.NativeFunction<
          ffi.Int32 Function(
              ffi.Pointer<ma_device>,
              ffi.Int32,
              ffi.Pointer<ffi.Char>,
              ffi.Size,
              ffi.Pointer<ffi.Size>)>>('ma_device_get_name');
  late final _ma_device_get_name = _ma_device_get_namePtr.asFunction<
      int Function(ffi.Pointer<ma_device>, int, ffi.Pointer<ffi.Char>, int,
          ffi.Pointer<ffi.Size>)>(isLeaf: true);

  /// General Library Documentation Undocument By General Corporation & Global Corporation & General Developer
  int ma_device_start(
    ffi.Pointer<ma_device> pDevice,
  ) {
    return _ma_device_start(
      pDevice,
    );
  }

  late final _ma_device_startPtr =
      _lookup<ffi.NativeFunction<ffi.Int32 Function(ffi.Pointer<ma_device>)>>(
          'ma_device_start');
  late final _ma_device_start = _ma_device_startPtr
      .asFunction<int Function(ffi.Pointer<ma_device>)>(isLeaf: true);

  /// General Library Documentation Undocument By General Corporation & Global Corporation & General Developer
  int ma_device_stop(
    ffi.Pointer<ma_device> pDevice,
  ) {
    return _ma_device_stop(
      pDevice,
    );
  }

  late final _ma_device_stopPtr =
      _lookup<ffi.NativeFunction<ffi.Int32 Function(ffi.Pointer<ma_device>)>>(
          'ma_device_stop');
  late final _ma_device_stop = _ma_device_stopPtr
      .asFunction<int Function(ffi.Pointer<ma_device>)>(isLeaf: true);

  /// General Library Documentation Undocument By General Corporation & Global Corporation & General Developer
  int ma_device_is_started(
    ffi.Pointer<ma_device> pDevice,
  ) {
    return _ma_device_is_started(
      pDevice,
    );
  }

  late final _ma_device_is_startedPtr =
      _lookup<ffi.NativeFunction<ma_bool32 Function(ffi.Pointer<ma_device>)>>(
          'ma_device_is_started');
  late final _ma_device_is_started = _ma_device_is_startedPtr
      .asFunction<int Function(ffi.Pointer<ma_device>)>(isLeaf: true);

  /// General Library Documentation Undocument By General Corporation & Global Corporation & General Developer
  int ma_device_get_state(
    ffi.Pointer<ma_device> pDevice,
  ) {
    return _ma_device_get_state(
      pDevice,
    );
  }

  late final _ma_device_get_statePtr =
      _lookup<ffi.NativeFunction<ffi.Int32 Function(ffi.Pointer<ma_device>)>>(
          'ma_device_get_state');
  late final _ma_device_get_state = _ma_device_get_statePtr
      .asFunction<int Function(ffi.Pointer<ma_device>)>(isLeaf: true);

  /// General Library Documentation Undocument By General Corporation & Global Corporation & General Developer
  int ma_device_post_init(
    ffi.Pointer<ma_device> pDevice,
    int deviceType,
    ffi.Pointer<ma_device_descriptor> pPlaybackDescriptor,
    ffi.Pointer<ma_device_descriptor> pCaptureDescriptor,
  ) {
    return _ma_device_post_init(
      pDevice,
      deviceType,
      pPlaybackDescriptor,
      pCaptureDescriptor,
    );
  }

  late final _ma_device_post_initPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int32 Function(
              ffi.Pointer<ma_device>,
              ffi.Int32,
              ffi.Pointer<ma_device_descriptor>,
              ffi.Pointer<ma_device_descriptor>)>>('ma_device_post_init');
  late final _ma_device_post_init = _ma_device_post_initPtr.asFunction<
      int Function(
          ffi.Pointer<ma_device>,
          int,
          ffi.Pointer<ma_device_descriptor>,
          ffi.Pointer<ma_device_descriptor>)>(isLeaf: true);

  /// General Library Documentation Undocument By General Corporation & Global Corporation & General Developer
  int ma_device_set_master_volume(
    ffi.Pointer<ma_device> pDevice,
    double volume,
  ) {
    return _ma_device_set_master_volume(
      pDevice,
      volume,
    );
  }

  late final _ma_device_set_master_volumePtr = _lookup<
      ffi.NativeFunction<
          ffi.Int32 Function(ffi.Pointer<ma_device>,
              ffi.Float)>>('ma_device_set_master_volume');
  late final _ma_device_set_master_volume = _ma_device_set_master_volumePtr
      .asFunction<int Function(ffi.Pointer<ma_device>, double)>(isLeaf: true);

  /// General Library Documentation Undocument By General Corporation & Global Corporation & General Developer
  int ma_device_get_master_volume(
    ffi.Pointer<ma_device> pDevice,
    ffi.Pointer<ffi.Float> pVolume,
  ) {
    return _ma_device_get_master_volume(
      pDevice,
      pVolume,
    );
  }

  late final _ma_device_get_master_volumePtr = _lookup<
      ffi.NativeFunction<
          ffi.Int32 Function(ffi.Pointer<ma_device>,
              ffi.Pointer<ffi.Float>)>>('ma_device_get_master_volume');
  late final _ma_device_get_master_volume = _ma_device_get_master_volumePtr
      .asFunction<int Function(ffi.Pointer<ma_device>, ffi.Pointer<ffi.Float>)>(
          isLeaf: true);

  /// General Library Documentation Undocument By General Corporation & Global Corporation & General Developer
  int ma_device_set_master_volume_db(
    ffi.Pointer<ma_device> pDevice,
    double gainDB,
  ) {
    return _ma_device_set_master_volume_db(
      pDevice,
      gainDB,
    );
  }

  late final _ma_device_set_master_volume_dbPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int32 Function(ffi.Pointer<ma_device>,
              ffi.Float)>>('ma_device_set_master_volume_db');
  late final _ma_device_set_master_volume_db =
      _ma_device_set_master_volume_dbPtr
          .asFunction<int Function(ffi.Pointer<ma_device>, double)>(
              isLeaf: true);

  /// General Library Documentation Undocument By General Corporation & Global Corporation & General Developer
  int ma_device_get_master_volume_db(
    ffi.Pointer<ma_device> pDevice,
    ffi.Pointer<ffi.Float> pGainDB,
  ) {
    return _ma_device_get_master_volume_db(
      pDevice,
      pGainDB,
    );
  }

  late final _ma_device_get_master_volume_dbPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int32 Function(ffi.Pointer<ma_device>,
              ffi.Pointer<ffi.Float>)>>('ma_device_get_master_volume_db');
  late final _ma_device_get_master_volume_db =
      _ma_device_get_master_volume_dbPtr.asFunction<
          int Function(
              ffi.Pointer<ma_device>, ffi.Pointer<ffi.Float>)>(isLeaf: true);

  /// General Library Documentation Undocument By General Corporation & Global Corporation & General Developer
  int ma_device_handle_backend_data_callback(
    ffi.Pointer<ma_device> pDevice,
    ffi.Pointer<ffi.Void> pOutput,
    ffi.Pointer<ffi.Void> pInput,
    int frameCount,
  ) {
    return _ma_device_handle_backend_data_callback(
      pDevice,
      pOutput,
      pInput,
      frameCount,
    );
  }

  late final _ma_device_handle_backend_data_callbackPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int32 Function(
              ffi.Pointer<ma_device>,
              ffi.Pointer<ffi.Void>,
              ffi.Pointer<ffi.Void>,
              ma_uint32)>>('ma_device_handle_backend_data_callback');
  late final _ma_device_handle_backend_data_callback =
      _ma_device_handle_backend_data_callbackPtr.asFunction<
          int Function(ffi.Pointer<ma_device>, ffi.Pointer<ffi.Void>,
              ffi.Pointer<ffi.Void>, int)>(isLeaf: true);

  /// General Library Documentation Undocument By General Corporation & Global Corporation & General Developer
  int ma_calculate_buffer_size_in_frames_from_descriptor(
    ffi.Pointer<ma_device_descriptor> pDescriptor,
    int nativeSampleRate,
    int performanceProfile,
  ) {
    return _ma_calculate_buffer_size_in_frames_from_descriptor(
      pDescriptor,
      nativeSampleRate,
      performanceProfile,
    );
  }

  late final _ma_calculate_buffer_size_in_frames_from_descriptorPtr = _lookup<
          ffi.NativeFunction<
              ma_uint32 Function(
                  ffi.Pointer<ma_device_descriptor>, ma_uint32, ffi.Int32)>>(
      'ma_calculate_buffer_size_in_frames_from_descriptor');
  late final _ma_calculate_buffer_size_in_frames_from_descriptor =
      _ma_calculate_buffer_size_in_frames_from_descriptorPtr.asFunction<
          int Function(
              ffi.Pointer<ma_device_descriptor>, int, int)>(isLeaf: true);

  /// General Library Documentation Undocument By General Corporation & Global Corporation & General Developer
  ffi.Pointer<ffi.Char> ma_get_backend_name(
    int backend,
  ) {
    return _ma_get_backend_name(
      backend,
    );
  }

  late final _ma_get_backend_namePtr =
      _lookup<ffi.NativeFunction<ffi.Pointer<ffi.Char> Function(ffi.Int32)>>(
          'ma_get_backend_name');
  late final _ma_get_backend_name = _ma_get_backend_namePtr
      .asFunction<ffi.Pointer<ffi.Char> Function(int)>(isLeaf: true);

  /// General Library Documentation Undocument By General Corporation & Global Corporation & General Developer
  int ma_get_backend_from_name(
    ffi.Pointer<ffi.Char> pBackendName,
    ffi.Pointer<ffi.Int32> pBackend,
  ) {
    return _ma_get_backend_from_name(
      pBackendName,
      pBackend,
    );
  }

  late final _ma_get_backend_from_namePtr = _lookup<
      ffi.NativeFunction<
          ffi.Int32 Function(ffi.Pointer<ffi.Char>,
              ffi.Pointer<ffi.Int32>)>>('ma_get_backend_from_name');
  late final _ma_get_backend_from_name = _ma_get_backend_from_namePtr
      .asFunction<int Function(ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.Int32>)>(
          isLeaf: true);

  /// General Library Documentation Undocument By General Corporation & Global Corporation & General Developer
  int ma_is_backend_enabled(
    int backend,
  ) {
    return _ma_is_backend_enabled(
      backend,
    );
  }

  late final _ma_is_backend_enabledPtr =
      _lookup<ffi.NativeFunction<ma_bool32 Function(ffi.Int32)>>(
          'ma_is_backend_enabled');
  late final _ma_is_backend_enabled =
      _ma_is_backend_enabledPtr.asFunction<int Function(int)>(isLeaf: true);

  /// General Library Documentation Undocument By General Corporation & Global Corporation & General Developer
  int ma_get_enabled_backends(
    ffi.Pointer<ffi.Int32> pBackends,
    int backendCap,
    ffi.Pointer<ffi.Size> pBackendCount,
  ) {
    return _ma_get_enabled_backends(
      pBackends,
      backendCap,
      pBackendCount,
    );
  }

  late final _ma_get_enabled_backendsPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int32 Function(ffi.Pointer<ffi.Int32>, ffi.Size,
              ffi.Pointer<ffi.Size>)>>('ma_get_enabled_backends');
  late final _ma_get_enabled_backends = _ma_get_enabled_backendsPtr.asFunction<
      int Function(
          ffi.Pointer<ffi.Int32>, int, ffi.Pointer<ffi.Size>)>(isLeaf: true);

  /// General Library Documentation Undocument By General Corporation & Global Corporation & General Developer
  int ma_is_loopback_supported(
    int backend,
  ) {
    return _ma_is_loopback_supported(
      backend,
    );
  }

  late final _ma_is_loopback_supportedPtr =
      _lookup<ffi.NativeFunction<ma_bool32 Function(ffi.Int32)>>(
          'ma_is_loopback_supported');
  late final _ma_is_loopback_supported =
      _ma_is_loopback_supportedPtr.asFunction<int Function(int)>(isLeaf: true);

  /// Utilities
  int ma_calculate_buffer_size_in_milliseconds_from_frames(
    int bufferSizeInFrames,
    int sampleRate,
  ) {
    return _ma_calculate_buffer_size_in_milliseconds_from_frames(
      bufferSizeInFrames,
      sampleRate,
    );
  }

  late final _ma_calculate_buffer_size_in_milliseconds_from_framesPtr =
      _lookup<ffi.NativeFunction<ma_uint32 Function(ma_uint32, ma_uint32)>>(
          'ma_calculate_buffer_size_in_milliseconds_from_frames');
  late final _ma_calculate_buffer_size_in_milliseconds_from_frames =
      _ma_calculate_buffer_size_in_milliseconds_from_framesPtr
          .asFunction<int Function(int, int)>(isLeaf: true);

  /// General Library Documentation Undocument By General Corporation & Global Corporation & General Developer
  int ma_calculate_buffer_size_in_frames_from_milliseconds(
    int bufferSizeInMilliseconds,
    int sampleRate,
  ) {
    return _ma_calculate_buffer_size_in_frames_from_milliseconds(
      bufferSizeInMilliseconds,
      sampleRate,
    );
  }

  late final _ma_calculate_buffer_size_in_frames_from_millisecondsPtr =
      _lookup<ffi.NativeFunction<ma_uint32 Function(ma_uint32, ma_uint32)>>(
          'ma_calculate_buffer_size_in_frames_from_milliseconds');
  late final _ma_calculate_buffer_size_in_frames_from_milliseconds =
      _ma_calculate_buffer_size_in_frames_from_millisecondsPtr
          .asFunction<int Function(int, int)>(isLeaf: true);

  /// General Library Documentation Undocument By General Corporation & Global Corporation & General Developer
  void ma_copy_pcm_frames(
    ffi.Pointer<ffi.Void> dst,
    ffi.Pointer<ffi.Void> src,
    int frameCount,
    int format,
    int channels,
  ) {
    return _ma_copy_pcm_frames(
      dst,
      src,
      frameCount,
      format,
      channels,
    );
  }

  late final _ma_copy_pcm_framesPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Pointer<ffi.Void>, ffi.Pointer<ffi.Void>,
              ma_uint64, ffi.Int32, ma_uint32)>>('ma_copy_pcm_frames');
  late final _ma_copy_pcm_frames = _ma_copy_pcm_framesPtr.asFunction<
      void Function(ffi.Pointer<ffi.Void>, ffi.Pointer<ffi.Void>, int, int,
          int)>(isLeaf: true);

  /// General Library Documentation Undocument By General Corporation & Global Corporation & General Developer
  void ma_silence_pcm_frames(
    ffi.Pointer<ffi.Void> p,
    int frameCount,
    int format,
    int channels,
  ) {
    return _ma_silence_pcm_frames(
      p,
      frameCount,
      format,
      channels,
    );
  }

  late final _ma_silence_pcm_framesPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Pointer<ffi.Void>, ma_uint64, ffi.Int32,
              ma_uint32)>>('ma_silence_pcm_frames');
  late final _ma_silence_pcm_frames = _ma_silence_pcm_framesPtr
      .asFunction<void Function(ffi.Pointer<ffi.Void>, int, int, int)>(
          isLeaf: true);

  /// General Library Documentation Undocument By General Corporation & Global Corporation & General Developer
  ffi.Pointer<ffi.Void> ma_offset_pcm_frames_ptr(
    ffi.Pointer<ffi.Void> p,
    int offsetInFrames,
    int format,
    int channels,
  ) {
    return _ma_offset_pcm_frames_ptr(
      p,
      offsetInFrames,
      format,
      channels,
    );
  }

  late final _ma_offset_pcm_frames_ptrPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ffi.Void> Function(ffi.Pointer<ffi.Void>, ma_uint64,
              ffi.Int32, ma_uint32)>>('ma_offset_pcm_frames_ptr');
  late final _ma_offset_pcm_frames_ptr =
      _ma_offset_pcm_frames_ptrPtr.asFunction<
          ffi.Pointer<ffi.Void> Function(
              ffi.Pointer<ffi.Void>, int, int, int)>(isLeaf: true);

  /// General Library Documentation Undocument By General Corporation & Global Corporation & General Developer
  ffi.Pointer<ffi.Void> ma_offset_pcm_frames_const_ptr(
    ffi.Pointer<ffi.Void> p,
    int offsetInFrames,
    int format,
    int channels,
  ) {
    return _ma_offset_pcm_frames_const_ptr(
      p,
      offsetInFrames,
      format,
      channels,
    );
  }

  late final _ma_offset_pcm_frames_const_ptrPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ffi.Void> Function(ffi.Pointer<ffi.Void>, ma_uint64,
              ffi.Int32, ma_uint32)>>('ma_offset_pcm_frames_const_ptr');
  late final _ma_offset_pcm_frames_const_ptr =
      _ma_offset_pcm_frames_const_ptrPtr.asFunction<
          ffi.Pointer<ffi.Void> Function(
              ffi.Pointer<ffi.Void>, int, int, int)>(isLeaf: true);

  /// General Library Documentation Undocument By General Corporation & Global Corporation & General Developer
  void ma_clip_samples_u8(
    ffi.Pointer<ma_uint8> pDst,
    ffi.Pointer<ma_int16> pSrc,
    int count,
  ) {
    return _ma_clip_samples_u8(
      pDst,
      pSrc,
      count,
    );
  }

  late final _ma_clip_samples_u8Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Pointer<ma_uint8>, ffi.Pointer<ma_int16>,
              ma_uint64)>>('ma_clip_samples_u8');
  late final _ma_clip_samples_u8 = _ma_clip_samples_u8Ptr.asFunction<
      void Function(
          ffi.Pointer<ma_uint8>, ffi.Pointer<ma_int16>, int)>(isLeaf: true);

  /// General Library Documentation Undocument By General Corporation & Global Corporation & General Developer
  void ma_clip_samples_s16(
    ffi.Pointer<ma_int16> pDst,
    ffi.Pointer<ma_int32> pSrc,
    int count,
  ) {
    return _ma_clip_samples_s16(
      pDst,
      pSrc,
      count,
    );
  }

  late final _ma_clip_samples_s16Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Pointer<ma_int16>, ffi.Pointer<ma_int32>,
              ma_uint64)>>('ma_clip_samples_s16');
  late final _ma_clip_samples_s16 = _ma_clip_samples_s16Ptr.asFunction<
      void Function(
          ffi.Pointer<ma_int16>, ffi.Pointer<ma_int32>, int)>(isLeaf: true);

  /// General Library Documentation Undocument By General Corporation & Global Corporation & General Developer
  void ma_clip_samples_s24(
    ffi.Pointer<ma_uint8> pDst,
    ffi.Pointer<ma_int64> pSrc,
    int count,
  ) {
    return _ma_clip_samples_s24(
      pDst,
      pSrc,
      count,
    );
  }

  late final _ma_clip_samples_s24Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Pointer<ma_uint8>, ffi.Pointer<ma_int64>,
              ma_uint64)>>('ma_clip_samples_s24');
  late final _ma_clip_samples_s24 = _ma_clip_samples_s24Ptr.asFunction<
      void Function(
          ffi.Pointer<ma_uint8>, ffi.Pointer<ma_int64>, int)>(isLeaf: true);

  /// General Library Documentation Undocument By General Corporation & Global Corporation & General Developer
  void ma_clip_samples_s32(
    ffi.Pointer<ma_int32> pDst,
    ffi.Pointer<ma_int64> pSrc,
    int count,
  ) {
    return _ma_clip_samples_s32(
      pDst,
      pSrc,
      count,
    );
  }

  late final _ma_clip_samples_s32Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Pointer<ma_int32>, ffi.Pointer<ma_int64>,
              ma_uint64)>>('ma_clip_samples_s32');
  late final _ma_clip_samples_s32 = _ma_clip_samples_s32Ptr.asFunction<
      void Function(
          ffi.Pointer<ma_int32>, ffi.Pointer<ma_int64>, int)>(isLeaf: true);

  /// General Library Documentation Undocument By General Corporation & Global Corporation & General Developer
  void ma_clip_samples_f32(
    ffi.Pointer<ffi.Float> pDst,
    ffi.Pointer<ffi.Float> pSrc,
    int count,
  ) {
    return _ma_clip_samples_f32(
      pDst,
      pSrc,
      count,
    );
  }

  late final _ma_clip_samples_f32Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Pointer<ffi.Float>, ffi.Pointer<ffi.Float>,
              ma_uint64)>>('ma_clip_samples_f32');
  late final _ma_clip_samples_f32 = _ma_clip_samples_f32Ptr.asFunction<
      void Function(
          ffi.Pointer<ffi.Float>, ffi.Pointer<ffi.Float>, int)>(isLeaf: true);

  /// General Library Documentation Undocument By General Corporation & Global Corporation & General Developer
  void ma_clip_pcm_frames(
    ffi.Pointer<ffi.Void> pDst,
    ffi.Pointer<ffi.Void> pSrc,
    int frameCount,
    int format,
    int channels,
  ) {
    return _ma_clip_pcm_frames(
      pDst,
      pSrc,
      frameCount,
      format,
      channels,
    );
  }

  late final _ma_clip_pcm_framesPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Pointer<ffi.Void>, ffi.Pointer<ffi.Void>,
              ma_uint64, ffi.Int32, ma_uint32)>>('ma_clip_pcm_frames');
  late final _ma_clip_pcm_frames = _ma_clip_pcm_framesPtr.asFunction<
      void Function(ffi.Pointer<ffi.Void>, ffi.Pointer<ffi.Void>, int, int,
          int)>(isLeaf: true);

  /// General Library Documentation Undocument By General Corporation & Global Corporation & General Developer
  void ma_copy_and_apply_volume_factor_u8(
    ffi.Pointer<ma_uint8> pSamplesOut,
    ffi.Pointer<ma_uint8> pSamplesIn,
    int sampleCount,
    double factor,
  ) {
    return _ma_copy_and_apply_volume_factor_u8(
      pSamplesOut,
      pSamplesIn,
      sampleCount,
      factor,
    );
  }

  late final _ma_copy_and_apply_volume_factor_u8Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Pointer<ma_uint8>, ffi.Pointer<ma_uint8>,
              ma_uint64, ffi.Float)>>('ma_copy_and_apply_volume_factor_u8');
  late final _ma_copy_and_apply_volume_factor_u8 =
      _ma_copy_and_apply_volume_factor_u8Ptr.asFunction<
          void Function(ffi.Pointer<ma_uint8>, ffi.Pointer<ma_uint8>, int,
              double)>(isLeaf: true);

  /// General Library Documentation Undocument By General Corporation & Global Corporation & General Developer
  void ma_copy_and_apply_volume_factor_s16(
    ffi.Pointer<ma_int16> pSamplesOut,
    ffi.Pointer<ma_int16> pSamplesIn,
    int sampleCount,
    double factor,
  ) {
    return _ma_copy_and_apply_volume_factor_s16(
      pSamplesOut,
      pSamplesIn,
      sampleCount,
      factor,
    );
  }

  late final _ma_copy_and_apply_volume_factor_s16Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Pointer<ma_int16>, ffi.Pointer<ma_int16>,
              ma_uint64, ffi.Float)>>('ma_copy_and_apply_volume_factor_s16');
  late final _ma_copy_and_apply_volume_factor_s16 =
      _ma_copy_and_apply_volume_factor_s16Ptr.asFunction<
          void Function(ffi.Pointer<ma_int16>, ffi.Pointer<ma_int16>, int,
              double)>(isLeaf: true);

  /// General Library Documentation Undocument By General Corporation & Global Corporation & General Developer
  void ma_copy_and_apply_volume_factor_s24(
    ffi.Pointer<ffi.Void> pSamplesOut,
    ffi.Pointer<ffi.Void> pSamplesIn,
    int sampleCount,
    double factor,
  ) {
    return _ma_copy_and_apply_volume_factor_s24(
      pSamplesOut,
      pSamplesIn,
      sampleCount,
      factor,
    );
  }

  late final _ma_copy_and_apply_volume_factor_s24Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Pointer<ffi.Void>, ffi.Pointer<ffi.Void>,
              ma_uint64, ffi.Float)>>('ma_copy_and_apply_volume_factor_s24');
  late final _ma_copy_and_apply_volume_factor_s24 =
      _ma_copy_and_apply_volume_factor_s24Ptr.asFunction<
          void Function(ffi.Pointer<ffi.Void>, ffi.Pointer<ffi.Void>, int,
              double)>(isLeaf: true);

  /// General Library Documentation Undocument By General Corporation & Global Corporation & General Developer
  void ma_copy_and_apply_volume_factor_s32(
    ffi.Pointer<ma_int32> pSamplesOut,
    ffi.Pointer<ma_int32> pSamplesIn,
    int sampleCount,
    double factor,
  ) {
    return _ma_copy_and_apply_volume_factor_s32(
      pSamplesOut,
      pSamplesIn,
      sampleCount,
      factor,
    );
  }

  late final _ma_copy_and_apply_volume_factor_s32Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Pointer<ma_int32>, ffi.Pointer<ma_int32>,
              ma_uint64, ffi.Float)>>('ma_copy_and_apply_volume_factor_s32');
  late final _ma_copy_and_apply_volume_factor_s32 =
      _ma_copy_and_apply_volume_factor_s32Ptr.asFunction<
          void Function(ffi.Pointer<ma_int32>, ffi.Pointer<ma_int32>, int,
              double)>(isLeaf: true);

  /// General Library Documentation Undocument By General Corporation & Global Corporation & General Developer
  void ma_copy_and_apply_volume_factor_f32(
    ffi.Pointer<ffi.Float> pSamplesOut,
    ffi.Pointer<ffi.Float> pSamplesIn,
    int sampleCount,
    double factor,
  ) {
    return _ma_copy_and_apply_volume_factor_f32(
      pSamplesOut,
      pSamplesIn,
      sampleCount,
      factor,
    );
  }

  late final _ma_copy_and_apply_volume_factor_f32Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Pointer<ffi.Float>, ffi.Pointer<ffi.Float>,
              ma_uint64, ffi.Float)>>('ma_copy_and_apply_volume_factor_f32');
  late final _ma_copy_and_apply_volume_factor_f32 =
      _ma_copy_and_apply_volume_factor_f32Ptr.asFunction<
          void Function(ffi.Pointer<ffi.Float>, ffi.Pointer<ffi.Float>, int,
              double)>(isLeaf: true);

  /// General Library Documentation Undocument By General Corporation & Global Corporation & General Developer
  void ma_apply_volume_factor_u8(
    ffi.Pointer<ma_uint8> pSamples,
    int sampleCount,
    double factor,
  ) {
    return _ma_apply_volume_factor_u8(
      pSamples,
      sampleCount,
      factor,
    );
  }

  late final _ma_apply_volume_factor_u8Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Pointer<ma_uint8>, ma_uint64,
              ffi.Float)>>('ma_apply_volume_factor_u8');
  late final _ma_apply_volume_factor_u8 = _ma_apply_volume_factor_u8Ptr
      .asFunction<void Function(ffi.Pointer<ma_uint8>, int, double)>(
          isLeaf: true);

  /// General Library Documentation Undocument By General Corporation & Global Corporation & General Developer
  void ma_apply_volume_factor_s16(
    ffi.Pointer<ma_int16> pSamples,
    int sampleCount,
    double factor,
  ) {
    return _ma_apply_volume_factor_s16(
      pSamples,
      sampleCount,
      factor,
    );
  }

  late final _ma_apply_volume_factor_s16Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Pointer<ma_int16>, ma_uint64,
              ffi.Float)>>('ma_apply_volume_factor_s16');
  late final _ma_apply_volume_factor_s16 = _ma_apply_volume_factor_s16Ptr
      .asFunction<void Function(ffi.Pointer<ma_int16>, int, double)>(
          isLeaf: true);

  /// General Library Documentation Undocument By General Corporation & Global Corporation & General Developer
  void ma_apply_volume_factor_s24(
    ffi.Pointer<ffi.Void> pSamples,
    int sampleCount,
    double factor,
  ) {
    return _ma_apply_volume_factor_s24(
      pSamples,
      sampleCount,
      factor,
    );
  }

  late final _ma_apply_volume_factor_s24Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Pointer<ffi.Void>, ma_uint64,
              ffi.Float)>>('ma_apply_volume_factor_s24');
  late final _ma_apply_volume_factor_s24 = _ma_apply_volume_factor_s24Ptr
      .asFunction<void Function(ffi.Pointer<ffi.Void>, int, double)>(
          isLeaf: true);

  /// General Library Documentation Undocument By General Corporation & Global Corporation & General Developer
  void ma_apply_volume_factor_s32(
    ffi.Pointer<ma_int32> pSamples,
    int sampleCount,
    double factor,
  ) {
    return _ma_apply_volume_factor_s32(
      pSamples,
      sampleCount,
      factor,
    );
  }

  late final _ma_apply_volume_factor_s32Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Pointer<ma_int32>, ma_uint64,
              ffi.Float)>>('ma_apply_volume_factor_s32');
  late final _ma_apply_volume_factor_s32 = _ma_apply_volume_factor_s32Ptr
      .asFunction<void Function(ffi.Pointer<ma_int32>, int, double)>(
          isLeaf: true);

  /// General Library Documentation Undocument By General Corporation & Global Corporation & General Developer
  void ma_apply_volume_factor_f32(
    ffi.Pointer<ffi.Float> pSamples,
    int sampleCount,
    double factor,
  ) {
    return _ma_apply_volume_factor_f32(
      pSamples,
      sampleCount,
      factor,
    );
  }

  late final _ma_apply_volume_factor_f32Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Pointer<ffi.Float>, ma_uint64,
              ffi.Float)>>('ma_apply_volume_factor_f32');
  late final _ma_apply_volume_factor_f32 = _ma_apply_volume_factor_f32Ptr
      .asFunction<void Function(ffi.Pointer<ffi.Float>, int, double)>(
          isLeaf: true);

  /// General Library Documentation Undocument By General Corporation & Global Corporation & General Developer
  void ma_copy_and_apply_volume_factor_pcm_frames_u8(
    ffi.Pointer<ma_uint8> pFramesOut,
    ffi.Pointer<ma_uint8> pFramesIn,
    int frameCount,
    int channels,
    double factor,
  ) {
    return _ma_copy_and_apply_volume_factor_pcm_frames_u8(
      pFramesOut,
      pFramesIn,
      frameCount,
      channels,
      factor,
    );
  }

  late final _ma_copy_and_apply_volume_factor_pcm_frames_u8Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(
              ffi.Pointer<ma_uint8>,
              ffi.Pointer<ma_uint8>,
              ma_uint64,
              ma_uint32,
              ffi.Float)>>('ma_copy_and_apply_volume_factor_pcm_frames_u8');
  late final _ma_copy_and_apply_volume_factor_pcm_frames_u8 =
      _ma_copy_and_apply_volume_factor_pcm_frames_u8Ptr.asFunction<
          void Function(ffi.Pointer<ma_uint8>, ffi.Pointer<ma_uint8>, int, int,
              double)>(isLeaf: true);

  /// General Library Documentation Undocument By General Corporation & Global Corporation & General Developer
  void ma_copy_and_apply_volume_factor_pcm_frames_s16(
    ffi.Pointer<ma_int16> pFramesOut,
    ffi.Pointer<ma_int16> pFramesIn,
    int frameCount,
    int channels,
    double factor,
  ) {
    return _ma_copy_and_apply_volume_factor_pcm_frames_s16(
      pFramesOut,
      pFramesIn,
      frameCount,
      channels,
      factor,
    );
  }

  late final _ma_copy_and_apply_volume_factor_pcm_frames_s16Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(
              ffi.Pointer<ma_int16>,
              ffi.Pointer<ma_int16>,
              ma_uint64,
              ma_uint32,
              ffi.Float)>>('ma_copy_and_apply_volume_factor_pcm_frames_s16');
  late final _ma_copy_and_apply_volume_factor_pcm_frames_s16 =
      _ma_copy_and_apply_volume_factor_pcm_frames_s16Ptr.asFunction<
          void Function(ffi.Pointer<ma_int16>, ffi.Pointer<ma_int16>, int, int,
              double)>(isLeaf: true);

  /// General Library Documentation Undocument By General Corporation & Global Corporation & General Developer
  void ma_copy_and_apply_volume_factor_pcm_frames_s24(
    ffi.Pointer<ffi.Void> pFramesOut,
    ffi.Pointer<ffi.Void> pFramesIn,
    int frameCount,
    int channels,
    double factor,
  ) {
    return _ma_copy_and_apply_volume_factor_pcm_frames_s24(
      pFramesOut,
      pFramesIn,
      frameCount,
      channels,
      factor,
    );
  }

  late final _ma_copy_and_apply_volume_factor_pcm_frames_s24Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(
              ffi.Pointer<ffi.Void>,
              ffi.Pointer<ffi.Void>,
              ma_uint64,
              ma_uint32,
              ffi.Float)>>('ma_copy_and_apply_volume_factor_pcm_frames_s24');
  late final _ma_copy_and_apply_volume_factor_pcm_frames_s24 =
      _ma_copy_and_apply_volume_factor_pcm_frames_s24Ptr.asFunction<
          void Function(ffi.Pointer<ffi.Void>, ffi.Pointer<ffi.Void>, int, int,
              double)>(isLeaf: true);

  /// General Library Documentation Undocument By General Corporation & Global Corporation & General Developer
  void ma_copy_and_apply_volume_factor_pcm_frames_s32(
    ffi.Pointer<ma_int32> pFramesOut,
    ffi.Pointer<ma_int32> pFramesIn,
    int frameCount,
    int channels,
    double factor,
  ) {
    return _ma_copy_and_apply_volume_factor_pcm_frames_s32(
      pFramesOut,
      pFramesIn,
      frameCount,
      channels,
      factor,
    );
  }

  late final _ma_copy_and_apply_volume_factor_pcm_frames_s32Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(
              ffi.Pointer<ma_int32>,
              ffi.Pointer<ma_int32>,
              ma_uint64,
              ma_uint32,
              ffi.Float)>>('ma_copy_and_apply_volume_factor_pcm_frames_s32');
  late final _ma_copy_and_apply_volume_factor_pcm_frames_s32 =
      _ma_copy_and_apply_volume_factor_pcm_frames_s32Ptr.asFunction<
          void Function(ffi.Pointer<ma_int32>, ffi.Pointer<ma_int32>, int, int,
              double)>(isLeaf: true);

  /// General Library Documentation Undocument By General Corporation & Global Corporation & General Developer
  void ma_copy_and_apply_volume_factor_pcm_frames_f32(
    ffi.Pointer<ffi.Float> pFramesOut,
    ffi.Pointer<ffi.Float> pFramesIn,
    int frameCount,
    int channels,
    double factor,
  ) {
    return _ma_copy_and_apply_volume_factor_pcm_frames_f32(
      pFramesOut,
      pFramesIn,
      frameCount,
      channels,
      factor,
    );
  }

  late final _ma_copy_and_apply_volume_factor_pcm_frames_f32Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(
              ffi.Pointer<ffi.Float>,
              ffi.Pointer<ffi.Float>,
              ma_uint64,
              ma_uint32,
              ffi.Float)>>('ma_copy_and_apply_volume_factor_pcm_frames_f32');
  late final _ma_copy_and_apply_volume_factor_pcm_frames_f32 =
      _ma_copy_and_apply_volume_factor_pcm_frames_f32Ptr.asFunction<
          void Function(ffi.Pointer<ffi.Float>, ffi.Pointer<ffi.Float>, int,
              int, double)>(isLeaf: true);

  /// General Library Documentation Undocument By General Corporation & Global Corporation & General Developer
  void ma_copy_and_apply_volume_factor_pcm_frames(
    ffi.Pointer<ffi.Void> pFramesOut,
    ffi.Pointer<ffi.Void> pFramesIn,
    int frameCount,
    int format,
    int channels,
    double factor,
  ) {
    return _ma_copy_and_apply_volume_factor_pcm_frames(
      pFramesOut,
      pFramesIn,
      frameCount,
      format,
      channels,
      factor,
    );
  }

  late final _ma_copy_and_apply_volume_factor_pcm_framesPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(
              ffi.Pointer<ffi.Void>,
              ffi.Pointer<ffi.Void>,
              ma_uint64,
              ffi.Int32,
              ma_uint32,
              ffi.Float)>>('ma_copy_and_apply_volume_factor_pcm_frames');
  late final _ma_copy_and_apply_volume_factor_pcm_frames =
      _ma_copy_and_apply_volume_factor_pcm_framesPtr.asFunction<
          void Function(ffi.Pointer<ffi.Void>, ffi.Pointer<ffi.Void>, int, int,
              int, double)>(isLeaf: true);

  /// General Library Documentation Undocument By General Corporation & Global Corporation & General Developer
  void ma_apply_volume_factor_pcm_frames_u8(
    ffi.Pointer<ma_uint8> pFrames,
    int frameCount,
    int channels,
    double factor,
  ) {
    return _ma_apply_volume_factor_pcm_frames_u8(
      pFrames,
      frameCount,
      channels,
      factor,
    );
  }

  late final _ma_apply_volume_factor_pcm_frames_u8Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Pointer<ma_uint8>, ma_uint64, ma_uint32,
              ffi.Float)>>('ma_apply_volume_factor_pcm_frames_u8');
  late final _ma_apply_volume_factor_pcm_frames_u8 =
      _ma_apply_volume_factor_pcm_frames_u8Ptr
          .asFunction<void Function(ffi.Pointer<ma_uint8>, int, int, double)>(
              isLeaf: true);

  /// General Library Documentation Undocument By General Corporation & Global Corporation & General Developer
  void ma_apply_volume_factor_pcm_frames_s16(
    ffi.Pointer<ma_int16> pFrames,
    int frameCount,
    int channels,
    double factor,
  ) {
    return _ma_apply_volume_factor_pcm_frames_s16(
      pFrames,
      frameCount,
      channels,
      factor,
    );
  }

  late final _ma_apply_volume_factor_pcm_frames_s16Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Pointer<ma_int16>, ma_uint64, ma_uint32,
              ffi.Float)>>('ma_apply_volume_factor_pcm_frames_s16');
  late final _ma_apply_volume_factor_pcm_frames_s16 =
      _ma_apply_volume_factor_pcm_frames_s16Ptr
          .asFunction<void Function(ffi.Pointer<ma_int16>, int, int, double)>(
              isLeaf: true);

  /// General Library Documentation Undocument By General Corporation & Global Corporation & General Developer
  void ma_apply_volume_factor_pcm_frames_s24(
    ffi.Pointer<ffi.Void> pFrames,
    int frameCount,
    int channels,
    double factor,
  ) {
    return _ma_apply_volume_factor_pcm_frames_s24(
      pFrames,
      frameCount,
      channels,
      factor,
    );
  }

  late final _ma_apply_volume_factor_pcm_frames_s24Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Pointer<ffi.Void>, ma_uint64, ma_uint32,
              ffi.Float)>>('ma_apply_volume_factor_pcm_frames_s24');
  late final _ma_apply_volume_factor_pcm_frames_s24 =
      _ma_apply_volume_factor_pcm_frames_s24Ptr
          .asFunction<void Function(ffi.Pointer<ffi.Void>, int, int, double)>(
              isLeaf: true);

  /// General Library Documentation Undocument By General Corporation & Global Corporation & General Developer
  void ma_apply_volume_factor_pcm_frames_s32(
    ffi.Pointer<ma_int32> pFrames,
    int frameCount,
    int channels,
    double factor,
  ) {
    return _ma_apply_volume_factor_pcm_frames_s32(
      pFrames,
      frameCount,
      channels,
      factor,
    );
  }

  late final _ma_apply_volume_factor_pcm_frames_s32Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Pointer<ma_int32>, ma_uint64, ma_uint32,
              ffi.Float)>>('ma_apply_volume_factor_pcm_frames_s32');
  late final _ma_apply_volume_factor_pcm_frames_s32 =
      _ma_apply_volume_factor_pcm_frames_s32Ptr
          .asFunction<void Function(ffi.Pointer<ma_int32>, int, int, double)>(
              isLeaf: true);

  /// General Library Documentation Undocument By General Corporation & Global Corporation & General Developer
  void ma_apply_volume_factor_pcm_frames_f32(
    ffi.Pointer<ffi.Float> pFrames,
    int frameCount,
    int channels,
    double factor,
  ) {
    return _ma_apply_volume_factor_pcm_frames_f32(
      pFrames,
      frameCount,
      channels,
      factor,
    );
  }

  late final _ma_apply_volume_factor_pcm_frames_f32Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Pointer<ffi.Float>, ma_uint64, ma_uint32,
              ffi.Float)>>('ma_apply_volume_factor_pcm_frames_f32');
  late final _ma_apply_volume_factor_pcm_frames_f32 =
      _ma_apply_volume_factor_pcm_frames_f32Ptr
          .asFunction<void Function(ffi.Pointer<ffi.Float>, int, int, double)>(
              isLeaf: true);

  /// General Library Documentation Undocument By General Corporation & Global Corporation & General Developer
  void ma_apply_volume_factor_pcm_frames(
    ffi.Pointer<ffi.Void> pFrames,
    int frameCount,
    int format,
    int channels,
    double factor,
  ) {
    return _ma_apply_volume_factor_pcm_frames(
      pFrames,
      frameCount,
      format,
      channels,
      factor,
    );
  }

  late final _ma_apply_volume_factor_pcm_framesPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Pointer<ffi.Void>, ma_uint64, ffi.Int32,
              ma_uint32, ffi.Float)>>('ma_apply_volume_factor_pcm_frames');
  late final _ma_apply_volume_factor_pcm_frames =
      _ma_apply_volume_factor_pcm_framesPtr.asFunction<
          void Function(
              ffi.Pointer<ffi.Void>, int, int, int, double)>(isLeaf: true);

  /// General Library Documentation Undocument By General Corporation & Global Corporation & General Developer
  void ma_copy_and_apply_volume_factor_per_channel_f32(
    ffi.Pointer<ffi.Float> pFramesOut,
    ffi.Pointer<ffi.Float> pFramesIn,
    int frameCount,
    int channels,
    ffi.Pointer<ffi.Float> pChannelGains,
  ) {
    return _ma_copy_and_apply_volume_factor_per_channel_f32(
      pFramesOut,
      pFramesIn,
      frameCount,
      channels,
      pChannelGains,
    );
  }

  late final _ma_copy_and_apply_volume_factor_per_channel_f32Ptr = _lookup<
          ffi.NativeFunction<
              ffi.Void Function(ffi.Pointer<ffi.Float>, ffi.Pointer<ffi.Float>,
                  ma_uint64, ma_uint32, ffi.Pointer<ffi.Float>)>>(
      'ma_copy_and_apply_volume_factor_per_channel_f32');
  late final _ma_copy_and_apply_volume_factor_per_channel_f32 =
      _ma_copy_and_apply_volume_factor_per_channel_f32Ptr.asFunction<
          void Function(ffi.Pointer<ffi.Float>, ffi.Pointer<ffi.Float>, int,
              int, ffi.Pointer<ffi.Float>)>(isLeaf: true);

  /// General Library Documentation Undocument By General Corporation & Global Corporation & General Developer
  void ma_copy_and_apply_volume_and_clip_samples_u8(
    ffi.Pointer<ma_uint8> pDst,
    ffi.Pointer<ma_int16> pSrc,
    int count,
    double volume,
  ) {
    return _ma_copy_and_apply_volume_and_clip_samples_u8(
      pDst,
      pSrc,
      count,
      volume,
    );
  }

  late final _ma_copy_and_apply_volume_and_clip_samples_u8Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(
              ffi.Pointer<ma_uint8>,
              ffi.Pointer<ma_int16>,
              ma_uint64,
              ffi.Float)>>('ma_copy_and_apply_volume_and_clip_samples_u8');
  late final _ma_copy_and_apply_volume_and_clip_samples_u8 =
      _ma_copy_and_apply_volume_and_clip_samples_u8Ptr.asFunction<
          void Function(ffi.Pointer<ma_uint8>, ffi.Pointer<ma_int16>, int,
              double)>(isLeaf: true);

  /// General Library Documentation Undocument By General Corporation & Global Corporation & General Developer
  void ma_copy_and_apply_volume_and_clip_samples_s16(
    ffi.Pointer<ma_int16> pDst,
    ffi.Pointer<ma_int32> pSrc,
    int count,
    double volume,
  ) {
    return _ma_copy_and_apply_volume_and_clip_samples_s16(
      pDst,
      pSrc,
      count,
      volume,
    );
  }

  late final _ma_copy_and_apply_volume_and_clip_samples_s16Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(
              ffi.Pointer<ma_int16>,
              ffi.Pointer<ma_int32>,
              ma_uint64,
              ffi.Float)>>('ma_copy_and_apply_volume_and_clip_samples_s16');
  late final _ma_copy_and_apply_volume_and_clip_samples_s16 =
      _ma_copy_and_apply_volume_and_clip_samples_s16Ptr.asFunction<
          void Function(ffi.Pointer<ma_int16>, ffi.Pointer<ma_int32>, int,
              double)>(isLeaf: true);

  /// General Library Documentation Undocument By General Corporation & Global Corporation & General Developer
  void ma_copy_and_apply_volume_and_clip_samples_s24(
    ffi.Pointer<ma_uint8> pDst,
    ffi.Pointer<ma_int64> pSrc,
    int count,
    double volume,
  ) {
    return _ma_copy_and_apply_volume_and_clip_samples_s24(
      pDst,
      pSrc,
      count,
      volume,
    );
  }

  late final _ma_copy_and_apply_volume_and_clip_samples_s24Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(
              ffi.Pointer<ma_uint8>,
              ffi.Pointer<ma_int64>,
              ma_uint64,
              ffi.Float)>>('ma_copy_and_apply_volume_and_clip_samples_s24');
  late final _ma_copy_and_apply_volume_and_clip_samples_s24 =
      _ma_copy_and_apply_volume_and_clip_samples_s24Ptr.asFunction<
          void Function(ffi.Pointer<ma_uint8>, ffi.Pointer<ma_int64>, int,
              double)>(isLeaf: true);

  /// General Library Documentation Undocument By General Corporation & Global Corporation & General Developer
  void ma_copy_and_apply_volume_and_clip_samples_s32(
    ffi.Pointer<ma_int32> pDst,
    ffi.Pointer<ma_int64> pSrc,
    int count,
    double volume,
  ) {
    return _ma_copy_and_apply_volume_and_clip_samples_s32(
      pDst,
      pSrc,
      count,
      volume,
    );
  }

  late final _ma_copy_and_apply_volume_and_clip_samples_s32Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(
              ffi.Pointer<ma_int32>,
              ffi.Pointer<ma_int64>,
              ma_uint64,
              ffi.Float)>>('ma_copy_and_apply_volume_and_clip_samples_s32');
  late final _ma_copy_and_apply_volume_and_clip_samples_s32 =
      _ma_copy_and_apply_volume_and_clip_samples_s32Ptr.asFunction<
          void Function(ffi.Pointer<ma_int32>, ffi.Pointer<ma_int64>, int,
              double)>(isLeaf: true);

  /// General Library Documentation Undocument By General Corporation & Global Corporation & General Developer
  void ma_copy_and_apply_volume_and_clip_samples_f32(
    ffi.Pointer<ffi.Float> pDst,
    ffi.Pointer<ffi.Float> pSrc,
    int count,
    double volume,
  ) {
    return _ma_copy_and_apply_volume_and_clip_samples_f32(
      pDst,
      pSrc,
      count,
      volume,
    );
  }

  late final _ma_copy_and_apply_volume_and_clip_samples_f32Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(
              ffi.Pointer<ffi.Float>,
              ffi.Pointer<ffi.Float>,
              ma_uint64,
              ffi.Float)>>('ma_copy_and_apply_volume_and_clip_samples_f32');
  late final _ma_copy_and_apply_volume_and_clip_samples_f32 =
      _ma_copy_and_apply_volume_and_clip_samples_f32Ptr.asFunction<
          void Function(ffi.Pointer<ffi.Float>, ffi.Pointer<ffi.Float>, int,
              double)>(isLeaf: true);

  /// General Library Documentation Undocument By General Corporation & Global Corporation & General Developer
  void ma_copy_and_apply_volume_and_clip_pcm_frames(
    ffi.Pointer<ffi.Void> pDst,
    ffi.Pointer<ffi.Void> pSrc,
    int frameCount,
    int format,
    int channels,
    double volume,
  ) {
    return _ma_copy_and_apply_volume_and_clip_pcm_frames(
      pDst,
      pSrc,
      frameCount,
      format,
      channels,
      volume,
    );
  }

  late final _ma_copy_and_apply_volume_and_clip_pcm_framesPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(
              ffi.Pointer<ffi.Void>,
              ffi.Pointer<ffi.Void>,
              ma_uint64,
              ffi.Int32,
              ma_uint32,
              ffi.Float)>>('ma_copy_and_apply_volume_and_clip_pcm_frames');
  late final _ma_copy_and_apply_volume_and_clip_pcm_frames =
      _ma_copy_and_apply_volume_and_clip_pcm_framesPtr.asFunction<
          void Function(ffi.Pointer<ffi.Void>, ffi.Pointer<ffi.Void>, int, int,
              int, double)>(isLeaf: true);

  /// General Library Documentation Undocument By General Corporation & Global Corporation & General Developer
  double ma_volume_linear_to_db(
    double factor,
  ) {
    return _ma_volume_linear_to_db(
      factor,
    );
  }

  late final _ma_volume_linear_to_dbPtr =
      _lookup<ffi.NativeFunction<ffi.Float Function(ffi.Float)>>(
          'ma_volume_linear_to_db');
  late final _ma_volume_linear_to_db = _ma_volume_linear_to_dbPtr
      .asFunction<double Function(double)>(isLeaf: true);

  /// General Library Documentation Undocument By General Corporation & Global Corporation & General Developer
  double ma_volume_db_to_linear(
    double gain,
  ) {
    return _ma_volume_db_to_linear(
      gain,
    );
  }

  late final _ma_volume_db_to_linearPtr =
      _lookup<ffi.NativeFunction<ffi.Float Function(ffi.Float)>>(
          'ma_volume_db_to_linear');
  late final _ma_volume_db_to_linear = _ma_volume_db_to_linearPtr
      .asFunction<double Function(double)>(isLeaf: true);

  /// General Library Documentation Undocument By General Corporation & Global Corporation & General Developer
  int ma_mix_pcm_frames_f32(
    ffi.Pointer<ffi.Float> pDst,
    ffi.Pointer<ffi.Float> pSrc,
    int frameCount,
    int channels,
    double volume,
  ) {
    return _ma_mix_pcm_frames_f32(
      pDst,
      pSrc,
      frameCount,
      channels,
      volume,
    );
  }

  late final _ma_mix_pcm_frames_f32Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Int32 Function(ffi.Pointer<ffi.Float>, ffi.Pointer<ffi.Float>,
              ma_uint64, ma_uint32, ffi.Float)>>('ma_mix_pcm_frames_f32');
  late final _ma_mix_pcm_frames_f32 = _ma_mix_pcm_frames_f32Ptr.asFunction<
      int Function(ffi.Pointer<ffi.Float>, ffi.Pointer<ffi.Float>, int, int,
          double)>(isLeaf: true);

  /// General Library Documentation Undocument By General Corporation & Global Corporation & General Developer
  int ma_vfs_open(
    ffi.Pointer<ma_vfs> pVFS,
    ffi.Pointer<ffi.Char> pFilePath,
    int openMode,
    ffi.Pointer<ma_vfs_file> pFile,
  ) {
    return _ma_vfs_open(
      pVFS,
      pFilePath,
      openMode,
      pFile,
    );
  }

  late final _ma_vfs_openPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int32 Function(ffi.Pointer<ma_vfs>, ffi.Pointer<ffi.Char>,
              ma_uint32, ffi.Pointer<ma_vfs_file>)>>('ma_vfs_open');
  late final _ma_vfs_open = _ma_vfs_openPtr.asFunction<
      int Function(ffi.Pointer<ma_vfs>, ffi.Pointer<ffi.Char>, int,
          ffi.Pointer<ma_vfs_file>)>(isLeaf: true);

  /// General Library Documentation Undocument By General Corporation & Global Corporation & General Developer
  int ma_vfs_open_w(
    ffi.Pointer<ma_vfs> pVFS,
    ffi.Pointer<ffi.WChar> pFilePath,
    int openMode,
    ffi.Pointer<ma_vfs_file> pFile,
  ) {
    return _ma_vfs_open_w(
      pVFS,
      pFilePath,
      openMode,
      pFile,
    );
  }

  late final _ma_vfs_open_wPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int32 Function(ffi.Pointer<ma_vfs>, ffi.Pointer<ffi.WChar>,
              ma_uint32, ffi.Pointer<ma_vfs_file>)>>('ma_vfs_open_w');
  late final _ma_vfs_open_w = _ma_vfs_open_wPtr.asFunction<
      int Function(ffi.Pointer<ma_vfs>, ffi.Pointer<ffi.WChar>, int,
          ffi.Pointer<ma_vfs_file>)>(isLeaf: true);

  /// General Library Documentation Undocument By General Corporation & Global Corporation & General Developer
  int ma_vfs_close(
    ffi.Pointer<ma_vfs> pVFS,
    ma_vfs_file file,
  ) {
    return _ma_vfs_close(
      pVFS,
      file,
    );
  }

  late final _ma_vfs_closePtr = _lookup<
      ffi.NativeFunction<
          ffi.Int32 Function(
              ffi.Pointer<ma_vfs>, ma_vfs_file)>>('ma_vfs_close');
  late final _ma_vfs_close = _ma_vfs_closePtr
      .asFunction<int Function(ffi.Pointer<ma_vfs>, ma_vfs_file)>(isLeaf: true);

  /// General Library Documentation Undocument By General Corporation & Global Corporation & General Developer
  int ma_vfs_read(
    ffi.Pointer<ma_vfs> pVFS,
    ma_vfs_file file,
    ffi.Pointer<ffi.Void> pDst,
    int sizeInBytes,
    ffi.Pointer<ffi.Size> pBytesRead,
  ) {
    return _ma_vfs_read(
      pVFS,
      file,
      pDst,
      sizeInBytes,
      pBytesRead,
    );
  }

  late final _ma_vfs_readPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int32 Function(
              ffi.Pointer<ma_vfs>,
              ma_vfs_file,
              ffi.Pointer<ffi.Void>,
              ffi.Size,
              ffi.Pointer<ffi.Size>)>>('ma_vfs_read');
  late final _ma_vfs_read = _ma_vfs_readPtr.asFunction<
      int Function(ffi.Pointer<ma_vfs>, ma_vfs_file, ffi.Pointer<ffi.Void>, int,
          ffi.Pointer<ffi.Size>)>(isLeaf: true);

  /// General Library Documentation Undocument By General Corporation & Global Corporation & General Developer
  int ma_vfs_write(
    ffi.Pointer<ma_vfs> pVFS,
    ma_vfs_file file,
    ffi.Pointer<ffi.Void> pSrc,
    int sizeInBytes,
    ffi.Pointer<ffi.Size> pBytesWritten,
  ) {
    return _ma_vfs_write(
      pVFS,
      file,
      pSrc,
      sizeInBytes,
      pBytesWritten,
    );
  }

  late final _ma_vfs_writePtr = _lookup<
      ffi.NativeFunction<
          ffi.Int32 Function(
              ffi.Pointer<ma_vfs>,
              ma_vfs_file,
              ffi.Pointer<ffi.Void>,
              ffi.Size,
              ffi.Pointer<ffi.Size>)>>('ma_vfs_write');
  late final _ma_vfs_write = _ma_vfs_writePtr.asFunction<
      int Function(ffi.Pointer<ma_vfs>, ma_vfs_file, ffi.Pointer<ffi.Void>, int,
          ffi.Pointer<ffi.Size>)>(isLeaf: true);

  /// General Library Documentation Undocument By General Corporation & Global Corporation & General Developer
  int ma_vfs_seek(
    ffi.Pointer<ma_vfs> pVFS,
    ma_vfs_file file,
    int offset,
    int origin,
  ) {
    return _ma_vfs_seek(
      pVFS,
      file,
      offset,
      origin,
    );
  }

  late final _ma_vfs_seekPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int32 Function(ffi.Pointer<ma_vfs>, ma_vfs_file, ma_int64,
              ffi.Int32)>>('ma_vfs_seek');
  late final _ma_vfs_seek = _ma_vfs_seekPtr
      .asFunction<int Function(ffi.Pointer<ma_vfs>, ma_vfs_file, int, int)>(
          isLeaf: true);

  /// General Library Documentation Undocument By General Corporation & Global Corporation & General Developer
  int ma_vfs_tell(
    ffi.Pointer<ma_vfs> pVFS,
    ma_vfs_file file,
    ffi.Pointer<ma_int64> pCursor,
  ) {
    return _ma_vfs_tell(
      pVFS,
      file,
      pCursor,
    );
  }

  late final _ma_vfs_tellPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int32 Function(ffi.Pointer<ma_vfs>, ma_vfs_file,
              ffi.Pointer<ma_int64>)>>('ma_vfs_tell');
  late final _ma_vfs_tell = _ma_vfs_tellPtr.asFunction<
      int Function(ffi.Pointer<ma_vfs>, ma_vfs_file,
          ffi.Pointer<ma_int64>)>(isLeaf: true);

  /// General Library Documentation Undocument By General Corporation & Global Corporation & General Developer
  int ma_vfs_info(
    ffi.Pointer<ma_vfs> pVFS,
    ma_vfs_file file,
    ffi.Pointer<ma_file_info> pInfo,
  ) {
    return _ma_vfs_info(
      pVFS,
      file,
      pInfo,
    );
  }

  late final _ma_vfs_infoPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int32 Function(ffi.Pointer<ma_vfs>, ma_vfs_file,
              ffi.Pointer<ma_file_info>)>>('ma_vfs_info');
  late final _ma_vfs_info = _ma_vfs_infoPtr.asFunction<
      int Function(ffi.Pointer<ma_vfs>, ma_vfs_file,
          ffi.Pointer<ma_file_info>)>(isLeaf: true);

  /// General Library Documentation Undocument By General Corporation & Global Corporation & General Developer
  int ma_vfs_open_and_read_file(
    ffi.Pointer<ma_vfs> pVFS,
    ffi.Pointer<ffi.Char> pFilePath,
    ffi.Pointer<ffi.Pointer<ffi.Void>> ppData,
    ffi.Pointer<ffi.Size> pSize,
    ffi.Pointer<ma_allocation_callbacks> pAllocationCallbacks,
  ) {
    return _ma_vfs_open_and_read_file(
      pVFS,
      pFilePath,
      ppData,
      pSize,
      pAllocationCallbacks,
    );
  }

  late final _ma_vfs_open_and_read_filePtr = _lookup<
          ffi.NativeFunction<
              ffi.Int32 Function(
                  ffi.Pointer<ma_vfs>,
                  ffi.Pointer<ffi.Char>,
                  ffi.Pointer<ffi.Pointer<ffi.Void>>,
                  ffi.Pointer<ffi.Size>,
                  ffi.Pointer<ma_allocation_callbacks>)>>(
      'ma_vfs_open_and_read_file');
  late final _ma_vfs_open_and_read_file =
      _ma_vfs_open_and_read_filePtr.asFunction<
          int Function(
              ffi.Pointer<ma_vfs>,
              ffi.Pointer<ffi.Char>,
              ffi.Pointer<ffi.Pointer<ffi.Void>>,
              ffi.Pointer<ffi.Size>,
              ffi.Pointer<ma_allocation_callbacks>)>(isLeaf: true);

  /// General Library Documentation Undocument By General Corporation & Global Corporation & General Developer
  int ma_default_vfs_init(
    ffi.Pointer<ma_default_vfs> pVFS,
    ffi.Pointer<ma_allocation_callbacks> pAllocationCallbacks,
  ) {
    return _ma_default_vfs_init(
      pVFS,
      pAllocationCallbacks,
    );
  }

  late final _ma_default_vfs_initPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int32 Function(ffi.Pointer<ma_default_vfs>,
              ffi.Pointer<ma_allocation_callbacks>)>>('ma_default_vfs_init');
  late final _ma_default_vfs_init = _ma_default_vfs_initPtr.asFunction<
      int Function(ffi.Pointer<ma_default_vfs>,
          ffi.Pointer<ma_allocation_callbacks>)>(isLeaf: true);

  /// General Library Documentation Undocument By General Corporation & Global Corporation & General Developer
  ma_decoding_backend_config ma_decoding_backend_config_init(
    int preferredFormat,
    int seekPointCount,
  ) {
    return _ma_decoding_backend_config_init(
      preferredFormat,
      seekPointCount,
    );
  }

  late final _ma_decoding_backend_config_initPtr = _lookup<
      ffi.NativeFunction<
          ma_decoding_backend_config Function(
              ffi.Int32, ma_uint32)>>('ma_decoding_backend_config_init');
  late final _ma_decoding_backend_config_init =
      _ma_decoding_backend_config_initPtr
          .asFunction<ma_decoding_backend_config Function(int, int)>(
              isLeaf: true);

  /// General Library Documentation Undocument By General Corporation & Global Corporation & General Developer
  ma_decoder_config ma_decoder_config_init(
    int outputFormat,
    int outputChannels,
    int outputSampleRate,
  ) {
    return _ma_decoder_config_init(
      outputFormat,
      outputChannels,
      outputSampleRate,
    );
  }

  late final _ma_decoder_config_initPtr = _lookup<
      ffi.NativeFunction<
          ma_decoder_config Function(
              ffi.Int32, ma_uint32, ma_uint32)>>('ma_decoder_config_init');
  late final _ma_decoder_config_init = _ma_decoder_config_initPtr
      .asFunction<ma_decoder_config Function(int, int, int)>();

  /// General Library Documentation Undocument By General Corporation & Global Corporation & General Developer
  ma_decoder_config ma_decoder_config_init_default() {
    return _ma_decoder_config_init_default();
  }

  late final _ma_decoder_config_init_defaultPtr =
      _lookup<ffi.NativeFunction<ma_decoder_config Function()>>(
          'ma_decoder_config_init_default');
  late final _ma_decoder_config_init_default =
      _ma_decoder_config_init_defaultPtr
          .asFunction<ma_decoder_config Function()>();

  /// General Library Documentation Undocument By General Corporation & Global Corporation & General Developer
  int ma_decoder_init(
    ma_decoder_read_proc onRead,
    ma_decoder_seek_proc onSeek,
    ffi.Pointer<ffi.Void> pUserData,
    ffi.Pointer<ma_decoder_config> pConfig,
    ffi.Pointer<ma_decoder> pDecoder,
  ) {
    return _ma_decoder_init(
      onRead,
      onSeek,
      pUserData,
      pConfig,
      pDecoder,
    );
  }

  late final _ma_decoder_initPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int32 Function(
              ma_decoder_read_proc,
              ma_decoder_seek_proc,
              ffi.Pointer<ffi.Void>,
              ffi.Pointer<ma_decoder_config>,
              ffi.Pointer<ma_decoder>)>>('ma_decoder_init');
  late final _ma_decoder_init = _ma_decoder_initPtr.asFunction<
      int Function(
          ma_decoder_read_proc,
          ma_decoder_seek_proc,
          ffi.Pointer<ffi.Void>,
          ffi.Pointer<ma_decoder_config>,
          ffi.Pointer<ma_decoder>)>();

  /// General Library Documentation Undocument By General Corporation & Global Corporation & General Developer
  int ma_decoder_init_memory(
    ffi.Pointer<ffi.Void> pData,
    int dataSize,
    ffi.Pointer<ma_decoder_config> pConfig,
    ffi.Pointer<ma_decoder> pDecoder,
  ) {
    return _ma_decoder_init_memory(
      pData,
      dataSize,
      pConfig,
      pDecoder,
    );
  }

  late final _ma_decoder_init_memoryPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int32 Function(
              ffi.Pointer<ffi.Void>,
              ffi.Size,
              ffi.Pointer<ma_decoder_config>,
              ffi.Pointer<ma_decoder>)>>('ma_decoder_init_memory');
  late final _ma_decoder_init_memory = _ma_decoder_init_memoryPtr.asFunction<
      int Function(ffi.Pointer<ffi.Void>, int, ffi.Pointer<ma_decoder_config>,
          ffi.Pointer<ma_decoder>)>();

  /// General Library Documentation Undocument By General Corporation & Global Corporation & General Developer
  int ma_decoder_init_vfs(
    ffi.Pointer<ma_vfs> pVFS,
    ffi.Pointer<ffi.Char> pFilePath,
    ffi.Pointer<ma_decoder_config> pConfig,
    ffi.Pointer<ma_decoder> pDecoder,
  ) {
    return _ma_decoder_init_vfs(
      pVFS,
      pFilePath,
      pConfig,
      pDecoder,
    );
  }

  late final _ma_decoder_init_vfsPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int32 Function(
              ffi.Pointer<ma_vfs>,
              ffi.Pointer<ffi.Char>,
              ffi.Pointer<ma_decoder_config>,
              ffi.Pointer<ma_decoder>)>>('ma_decoder_init_vfs');
  late final _ma_decoder_init_vfs = _ma_decoder_init_vfsPtr.asFunction<
      int Function(ffi.Pointer<ma_vfs>, ffi.Pointer<ffi.Char>,
          ffi.Pointer<ma_decoder_config>, ffi.Pointer<ma_decoder>)>();

  /// General Library Documentation Undocument By General Corporation & Global Corporation & General Developer
  int ma_decoder_init_vfs_w(
    ffi.Pointer<ma_vfs> pVFS,
    ffi.Pointer<ffi.WChar> pFilePath,
    ffi.Pointer<ma_decoder_config> pConfig,
    ffi.Pointer<ma_decoder> pDecoder,
  ) {
    return _ma_decoder_init_vfs_w(
      pVFS,
      pFilePath,
      pConfig,
      pDecoder,
    );
  }

  late final _ma_decoder_init_vfs_wPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int32 Function(
              ffi.Pointer<ma_vfs>,
              ffi.Pointer<ffi.WChar>,
              ffi.Pointer<ma_decoder_config>,
              ffi.Pointer<ma_decoder>)>>('ma_decoder_init_vfs_w');
  late final _ma_decoder_init_vfs_w = _ma_decoder_init_vfs_wPtr.asFunction<
      int Function(ffi.Pointer<ma_vfs>, ffi.Pointer<ffi.WChar>,
          ffi.Pointer<ma_decoder_config>, ffi.Pointer<ma_decoder>)>();

  /// General Library Documentation Undocument By General Corporation & Global Corporation & General Developer
  int ma_decoder_init_file(
    ffi.Pointer<ffi.Char> pFilePath,
    ffi.Pointer<ma_decoder_config> pConfig,
    ffi.Pointer<ma_decoder> pDecoder,
  ) {
    return _ma_decoder_init_file(
      pFilePath,
      pConfig,
      pDecoder,
    );
  }

  late final _ma_decoder_init_filePtr = _lookup<
      ffi.NativeFunction<
          ffi.Int32 Function(
              ffi.Pointer<ffi.Char>,
              ffi.Pointer<ma_decoder_config>,
              ffi.Pointer<ma_decoder>)>>('ma_decoder_init_file');
  late final _ma_decoder_init_file = _ma_decoder_init_filePtr.asFunction<
      int Function(ffi.Pointer<ffi.Char>, ffi.Pointer<ma_decoder_config>,
          ffi.Pointer<ma_decoder>)>();

  /// General Library Documentation Undocument By General Corporation & Global Corporation & General Developer
  int ma_decoder_init_file_w(
    ffi.Pointer<ffi.WChar> pFilePath,
    ffi.Pointer<ma_decoder_config> pConfig,
    ffi.Pointer<ma_decoder> pDecoder,
  ) {
    return _ma_decoder_init_file_w(
      pFilePath,
      pConfig,
      pDecoder,
    );
  }

  late final _ma_decoder_init_file_wPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int32 Function(
              ffi.Pointer<ffi.WChar>,
              ffi.Pointer<ma_decoder_config>,
              ffi.Pointer<ma_decoder>)>>('ma_decoder_init_file_w');
  late final _ma_decoder_init_file_w = _ma_decoder_init_file_wPtr.asFunction<
      int Function(ffi.Pointer<ffi.WChar>, ffi.Pointer<ma_decoder_config>,
          ffi.Pointer<ma_decoder>)>();

  /// General Library Documentation Undocument By General Corporation & Global Corporation & General Developer
  int ma_decoder_uninit(
    ffi.Pointer<ma_decoder> pDecoder,
  ) {
    return _ma_decoder_uninit(
      pDecoder,
    );
  }

  late final _ma_decoder_uninitPtr =
      _lookup<ffi.NativeFunction<ffi.Int32 Function(ffi.Pointer<ma_decoder>)>>(
          'ma_decoder_uninit');
  late final _ma_decoder_uninit =
      _ma_decoder_uninitPtr.asFunction<int Function(ffi.Pointer<ma_decoder>)>();

  /// General Library Documentation Undocument By General Corporation & Global Corporation & General Developer
  int ma_decoder_read_pcm_frames(
    ffi.Pointer<ma_decoder> pDecoder,
    ffi.Pointer<ffi.Void> pFramesOut,
    int frameCount,
    ffi.Pointer<ma_uint64> pFramesRead,
  ) {
    return _ma_decoder_read_pcm_frames(
      pDecoder,
      pFramesOut,
      frameCount,
      pFramesRead,
    );
  }

  late final _ma_decoder_read_pcm_framesPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int32 Function(
              ffi.Pointer<ma_decoder>,
              ffi.Pointer<ffi.Void>,
              ma_uint64,
              ffi.Pointer<ma_uint64>)>>('ma_decoder_read_pcm_frames');
  late final _ma_decoder_read_pcm_frames =
      _ma_decoder_read_pcm_framesPtr.asFunction<
          int Function(ffi.Pointer<ma_decoder>, ffi.Pointer<ffi.Void>, int,
              ffi.Pointer<ma_uint64>)>();

  /// General Library Documentation Undocument By General Corporation & Global Corporation & General Developer
  int ma_decoder_seek_to_pcm_frame(
    ffi.Pointer<ma_decoder> pDecoder,
    int frameIndex,
  ) {
    return _ma_decoder_seek_to_pcm_frame(
      pDecoder,
      frameIndex,
    );
  }

  late final _ma_decoder_seek_to_pcm_framePtr = _lookup<
      ffi.NativeFunction<
          ffi.Int32 Function(ffi.Pointer<ma_decoder>,
              ma_uint64)>>('ma_decoder_seek_to_pcm_frame');
  late final _ma_decoder_seek_to_pcm_frame = _ma_decoder_seek_to_pcm_framePtr
      .asFunction<int Function(ffi.Pointer<ma_decoder>, int)>();

  /// General Library Documentation Undocument By General Corporation & Global Corporation & General Developer
  int ma_decoder_get_data_format(
    ffi.Pointer<ma_decoder> pDecoder,
    ffi.Pointer<ffi.Int32> pFormat,
    ffi.Pointer<ma_uint32> pChannels,
    ffi.Pointer<ma_uint32> pSampleRate,
    ffi.Pointer<ma_channel> pChannelMap,
    int channelMapCap,
  ) {
    return _ma_decoder_get_data_format(
      pDecoder,
      pFormat,
      pChannels,
      pSampleRate,
      pChannelMap,
      channelMapCap,
    );
  }

  late final _ma_decoder_get_data_formatPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int32 Function(
              ffi.Pointer<ma_decoder>,
              ffi.Pointer<ffi.Int32>,
              ffi.Pointer<ma_uint32>,
              ffi.Pointer<ma_uint32>,
              ffi.Pointer<ma_channel>,
              ffi.Size)>>('ma_decoder_get_data_format');
  late final _ma_decoder_get_data_format =
      _ma_decoder_get_data_formatPtr.asFunction<
          int Function(
              ffi.Pointer<ma_decoder>,
              ffi.Pointer<ffi.Int32>,
              ffi.Pointer<ma_uint32>,
              ffi.Pointer<ma_uint32>,
              ffi.Pointer<ma_channel>,
              int)>();

  /// General Library Documentation Undocument By General Corporation & Global Corporation & General Developer
  int ma_decoder_get_cursor_in_pcm_frames(
    ffi.Pointer<ma_decoder> pDecoder,
    ffi.Pointer<ma_uint64> pCursor,
  ) {
    return _ma_decoder_get_cursor_in_pcm_frames(
      pDecoder,
      pCursor,
    );
  }

  late final _ma_decoder_get_cursor_in_pcm_framesPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int32 Function(ffi.Pointer<ma_decoder>,
              ffi.Pointer<ma_uint64>)>>('ma_decoder_get_cursor_in_pcm_frames');
  late final _ma_decoder_get_cursor_in_pcm_frames =
      _ma_decoder_get_cursor_in_pcm_framesPtr.asFunction<
          int Function(ffi.Pointer<ma_decoder>, ffi.Pointer<ma_uint64>)>();

  /// General Library Documentation Undocument By General Corporation & Global Corporation & General Developer
  int ma_decoder_get_length_in_pcm_frames(
    ffi.Pointer<ma_decoder> pDecoder,
    ffi.Pointer<ma_uint64> pLength,
  ) {
    return _ma_decoder_get_length_in_pcm_frames(
      pDecoder,
      pLength,
    );
  }

  late final _ma_decoder_get_length_in_pcm_framesPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int32 Function(ffi.Pointer<ma_decoder>,
              ffi.Pointer<ma_uint64>)>>('ma_decoder_get_length_in_pcm_frames');
  late final _ma_decoder_get_length_in_pcm_frames =
      _ma_decoder_get_length_in_pcm_framesPtr.asFunction<
          int Function(ffi.Pointer<ma_decoder>, ffi.Pointer<ma_uint64>)>();

  /// General Library Documentation Undocument By General Corporation & Global Corporation & General Developer
  int ma_decoder_get_available_frames(
    ffi.Pointer<ma_decoder> pDecoder,
    ffi.Pointer<ma_uint64> pAvailableFrames,
  ) {
    return _ma_decoder_get_available_frames(
      pDecoder,
      pAvailableFrames,
    );
  }

  late final _ma_decoder_get_available_framesPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int32 Function(ffi.Pointer<ma_decoder>,
              ffi.Pointer<ma_uint64>)>>('ma_decoder_get_available_frames');
  late final _ma_decoder_get_available_frames =
      _ma_decoder_get_available_framesPtr.asFunction<
          int Function(ffi.Pointer<ma_decoder>, ffi.Pointer<ma_uint64>)>();

  /// General Library Documentation Undocument By General Corporation & Global Corporation & General Developer
  int ma_decode_from_vfs(
    ffi.Pointer<ma_vfs> pVFS,
    ffi.Pointer<ffi.Char> pFilePath,
    ffi.Pointer<ma_decoder_config> pConfig,
    ffi.Pointer<ma_uint64> pFrameCountOut,
    ffi.Pointer<ffi.Pointer<ffi.Void>> ppPCMFramesOut,
  ) {
    return _ma_decode_from_vfs(
      pVFS,
      pFilePath,
      pConfig,
      pFrameCountOut,
      ppPCMFramesOut,
    );
  }

  late final _ma_decode_from_vfsPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int32 Function(
              ffi.Pointer<ma_vfs>,
              ffi.Pointer<ffi.Char>,
              ffi.Pointer<ma_decoder_config>,
              ffi.Pointer<ma_uint64>,
              ffi.Pointer<ffi.Pointer<ffi.Void>>)>>('ma_decode_from_vfs');
  late final _ma_decode_from_vfs = _ma_decode_from_vfsPtr.asFunction<
      int Function(
          ffi.Pointer<ma_vfs>,
          ffi.Pointer<ffi.Char>,
          ffi.Pointer<ma_decoder_config>,
          ffi.Pointer<ma_uint64>,
          ffi.Pointer<ffi.Pointer<ffi.Void>>)>(isLeaf: true);

  /// General Library Documentation Undocument By General Corporation & Global Corporation & General Developer
  int ma_decode_file(
    ffi.Pointer<ffi.Char> pFilePath,
    ffi.Pointer<ma_decoder_config> pConfig,
    ffi.Pointer<ma_uint64> pFrameCountOut,
    ffi.Pointer<ffi.Pointer<ffi.Void>> ppPCMFramesOut,
  ) {
    return _ma_decode_file(
      pFilePath,
      pConfig,
      pFrameCountOut,
      ppPCMFramesOut,
    );
  }

  late final _ma_decode_filePtr = _lookup<
      ffi.NativeFunction<
          ffi.Int32 Function(
              ffi.Pointer<ffi.Char>,
              ffi.Pointer<ma_decoder_config>,
              ffi.Pointer<ma_uint64>,
              ffi.Pointer<ffi.Pointer<ffi.Void>>)>>('ma_decode_file');
  late final _ma_decode_file = _ma_decode_filePtr.asFunction<
      int Function(
          ffi.Pointer<ffi.Char>,
          ffi.Pointer<ma_decoder_config>,
          ffi.Pointer<ma_uint64>,
          ffi.Pointer<ffi.Pointer<ffi.Void>>)>(isLeaf: true);

  /// General Library Documentation Undocument By General Corporation & Global Corporation & General Developer
  int ma_decode_memory(
    ffi.Pointer<ffi.Void> pData,
    int dataSize,
    ffi.Pointer<ma_decoder_config> pConfig,
    ffi.Pointer<ma_uint64> pFrameCountOut,
    ffi.Pointer<ffi.Pointer<ffi.Void>> ppPCMFramesOut,
  ) {
    return _ma_decode_memory(
      pData,
      dataSize,
      pConfig,
      pFrameCountOut,
      ppPCMFramesOut,
    );
  }

  late final _ma_decode_memoryPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int32 Function(
              ffi.Pointer<ffi.Void>,
              ffi.Size,
              ffi.Pointer<ma_decoder_config>,
              ffi.Pointer<ma_uint64>,
              ffi.Pointer<ffi.Pointer<ffi.Void>>)>>('ma_decode_memory');
  late final _ma_decode_memory = _ma_decode_memoryPtr.asFunction<
      int Function(
          ffi.Pointer<ffi.Void>,
          int,
          ffi.Pointer<ma_decoder_config>,
          ffi.Pointer<ma_uint64>,
          ffi.Pointer<ffi.Pointer<ffi.Void>>)>(isLeaf: true);

  /// General Library Documentation Undocument By General Corporation & Global Corporation & General Developer
  ma_encoder_config ma_encoder_config_init(
    int encodingFormat,
    int format,
    int channels,
    int sampleRate,
  ) {
    return _ma_encoder_config_init(
      encodingFormat,
      format,
      channels,
      sampleRate,
    );
  }

  late final _ma_encoder_config_initPtr = _lookup<
      ffi.NativeFunction<
          ma_encoder_config Function(ffi.Int32, ffi.Int32, ma_uint32,
              ma_uint32)>>('ma_encoder_config_init');
  late final _ma_encoder_config_init = _ma_encoder_config_initPtr
      .asFunction<ma_encoder_config Function(int, int, int, int)>();

  /// General Library Documentation Undocument By General Corporation & Global Corporation & General Developer
  int ma_encoder_init(
    ma_encoder_write_proc onWrite,
    ma_encoder_seek_proc onSeek,
    ffi.Pointer<ffi.Void> pUserData,
    ffi.Pointer<ma_encoder_config> pConfig,
    ffi.Pointer<ma_encoder> pEncoder,
  ) {
    return _ma_encoder_init(
      onWrite,
      onSeek,
      pUserData,
      pConfig,
      pEncoder,
    );
  }

  late final _ma_encoder_initPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int32 Function(
              ma_encoder_write_proc,
              ma_encoder_seek_proc,
              ffi.Pointer<ffi.Void>,
              ffi.Pointer<ma_encoder_config>,
              ffi.Pointer<ma_encoder>)>>('ma_encoder_init');
  late final _ma_encoder_init = _ma_encoder_initPtr.asFunction<
      int Function(
          ma_encoder_write_proc,
          ma_encoder_seek_proc,
          ffi.Pointer<ffi.Void>,
          ffi.Pointer<ma_encoder_config>,
          ffi.Pointer<ma_encoder>)>();

  /// General Library Documentation Undocument By General Corporation & Global Corporation & General Developer
  int ma_encoder_init_vfs(
    ffi.Pointer<ma_vfs> pVFS,
    ffi.Pointer<ffi.Char> pFilePath,
    ffi.Pointer<ma_encoder_config> pConfig,
    ffi.Pointer<ma_encoder> pEncoder,
  ) {
    return _ma_encoder_init_vfs(
      pVFS,
      pFilePath,
      pConfig,
      pEncoder,
    );
  }

  late final _ma_encoder_init_vfsPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int32 Function(
              ffi.Pointer<ma_vfs>,
              ffi.Pointer<ffi.Char>,
              ffi.Pointer<ma_encoder_config>,
              ffi.Pointer<ma_encoder>)>>('ma_encoder_init_vfs');
  late final _ma_encoder_init_vfs = _ma_encoder_init_vfsPtr.asFunction<
      int Function(ffi.Pointer<ma_vfs>, ffi.Pointer<ffi.Char>,
          ffi.Pointer<ma_encoder_config>, ffi.Pointer<ma_encoder>)>();

  /// General Library Documentation Undocument By General Corporation & Global Corporation & General Developer
  int ma_encoder_init_vfs_w(
    ffi.Pointer<ma_vfs> pVFS,
    ffi.Pointer<ffi.WChar> pFilePath,
    ffi.Pointer<ma_encoder_config> pConfig,
    ffi.Pointer<ma_encoder> pEncoder,
  ) {
    return _ma_encoder_init_vfs_w(
      pVFS,
      pFilePath,
      pConfig,
      pEncoder,
    );
  }

  late final _ma_encoder_init_vfs_wPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int32 Function(
              ffi.Pointer<ma_vfs>,
              ffi.Pointer<ffi.WChar>,
              ffi.Pointer<ma_encoder_config>,
              ffi.Pointer<ma_encoder>)>>('ma_encoder_init_vfs_w');
  late final _ma_encoder_init_vfs_w = _ma_encoder_init_vfs_wPtr.asFunction<
      int Function(ffi.Pointer<ma_vfs>, ffi.Pointer<ffi.WChar>,
          ffi.Pointer<ma_encoder_config>, ffi.Pointer<ma_encoder>)>();

  /// General Library Documentation Undocument By General Corporation & Global Corporation & General Developer
  int ma_encoder_init_file(
    ffi.Pointer<ffi.Char> pFilePath,
    ffi.Pointer<ma_encoder_config> pConfig,
    ffi.Pointer<ma_encoder> pEncoder,
  ) {
    return _ma_encoder_init_file(
      pFilePath,
      pConfig,
      pEncoder,
    );
  }

  late final _ma_encoder_init_filePtr = _lookup<
      ffi.NativeFunction<
          ffi.Int32 Function(
              ffi.Pointer<ffi.Char>,
              ffi.Pointer<ma_encoder_config>,
              ffi.Pointer<ma_encoder>)>>('ma_encoder_init_file');
  late final _ma_encoder_init_file = _ma_encoder_init_filePtr.asFunction<
      int Function(ffi.Pointer<ffi.Char>, ffi.Pointer<ma_encoder_config>,
          ffi.Pointer<ma_encoder>)>();

  /// General Library Documentation Undocument By General Corporation & Global Corporation & General Developer
  int ma_encoder_init_file_w(
    ffi.Pointer<ffi.WChar> pFilePath,
    ffi.Pointer<ma_encoder_config> pConfig,
    ffi.Pointer<ma_encoder> pEncoder,
  ) {
    return _ma_encoder_init_file_w(
      pFilePath,
      pConfig,
      pEncoder,
    );
  }

  late final _ma_encoder_init_file_wPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int32 Function(
              ffi.Pointer<ffi.WChar>,
              ffi.Pointer<ma_encoder_config>,
              ffi.Pointer<ma_encoder>)>>('ma_encoder_init_file_w');
  late final _ma_encoder_init_file_w = _ma_encoder_init_file_wPtr.asFunction<
      int Function(ffi.Pointer<ffi.WChar>, ffi.Pointer<ma_encoder_config>,
          ffi.Pointer<ma_encoder>)>();

  /// General Library Documentation Undocument By General Corporation & Global Corporation & General Developer
  void ma_encoder_uninit(
    ffi.Pointer<ma_encoder> pEncoder,
  ) {
    return _ma_encoder_uninit(
      pEncoder,
    );
  }

  late final _ma_encoder_uninitPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Pointer<ma_encoder>)>>(
          'ma_encoder_uninit');
  late final _ma_encoder_uninit = _ma_encoder_uninitPtr
      .asFunction<void Function(ffi.Pointer<ma_encoder>)>();

  /// General Library Documentation Undocument By General Corporation & Global Corporation & General Developer
  int ma_encoder_write_pcm_frames(
    ffi.Pointer<ma_encoder> pEncoder,
    ffi.Pointer<ffi.Void> pFramesIn,
    int frameCount,
    ffi.Pointer<ma_uint64> pFramesWritten,
  ) {
    return _ma_encoder_write_pcm_frames(
      pEncoder,
      pFramesIn,
      frameCount,
      pFramesWritten,
    );
  }

  late final _ma_encoder_write_pcm_framesPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int32 Function(
              ffi.Pointer<ma_encoder>,
              ffi.Pointer<ffi.Void>,
              ma_uint64,
              ffi.Pointer<ma_uint64>)>>('ma_encoder_write_pcm_frames');
  late final _ma_encoder_write_pcm_frames =
      _ma_encoder_write_pcm_framesPtr.asFunction<
          int Function(ffi.Pointer<ma_encoder>, ffi.Pointer<ffi.Void>, int,
              ffi.Pointer<ma_uint64>)>();

  /// General Library Documentation Undocument By General Corporation & Global Corporation & General Developer
  ma_waveform_config ma_waveform_config_init(
    int format,
    int channels,
    int sampleRate,
    int type,
    double amplitude,
    double frequency,
  ) {
    return _ma_waveform_config_init(
      format,
      channels,
      sampleRate,
      type,
      amplitude,
      frequency,
    );
  }

  late final _ma_waveform_config_initPtr = _lookup<
      ffi.NativeFunction<
          ma_waveform_config Function(ffi.Int32, ma_uint32, ma_uint32,
              ffi.Int32, ffi.Double, ffi.Double)>>('ma_waveform_config_init');
  late final _ma_waveform_config_init = _ma_waveform_config_initPtr.asFunction<
      ma_waveform_config Function(
          int, int, int, int, double, double)>(isLeaf: true);

  /// General Library Documentation Undocument By General Corporation & Global Corporation & General Developer
  int ma_waveform_init(
    ffi.Pointer<ma_waveform_config> pConfig,
    ffi.Pointer<ma_waveform> pWaveform,
  ) {
    return _ma_waveform_init(
      pConfig,
      pWaveform,
    );
  }

  late final _ma_waveform_initPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int32 Function(ffi.Pointer<ma_waveform_config>,
              ffi.Pointer<ma_waveform>)>>('ma_waveform_init');
  late final _ma_waveform_init = _ma_waveform_initPtr.asFunction<
      int Function(ffi.Pointer<ma_waveform_config>,
          ffi.Pointer<ma_waveform>)>(isLeaf: true);

  /// General Library Documentation Undocument By General Corporation & Global Corporation & General Developer
  void ma_waveform_uninit(
    ffi.Pointer<ma_waveform> pWaveform,
  ) {
    return _ma_waveform_uninit(
      pWaveform,
    );
  }

  late final _ma_waveform_uninitPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Pointer<ma_waveform>)>>(
          'ma_waveform_uninit');
  late final _ma_waveform_uninit = _ma_waveform_uninitPtr
      .asFunction<void Function(ffi.Pointer<ma_waveform>)>(isLeaf: true);

  /// General Library Documentation Undocument By General Corporation & Global Corporation & General Developer
  int ma_waveform_read_pcm_frames(
    ffi.Pointer<ma_waveform> pWaveform,
    ffi.Pointer<ffi.Void> pFramesOut,
    int frameCount,
    ffi.Pointer<ma_uint64> pFramesRead,
  ) {
    return _ma_waveform_read_pcm_frames(
      pWaveform,
      pFramesOut,
      frameCount,
      pFramesRead,
    );
  }

  late final _ma_waveform_read_pcm_framesPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int32 Function(
              ffi.Pointer<ma_waveform>,
              ffi.Pointer<ffi.Void>,
              ma_uint64,
              ffi.Pointer<ma_uint64>)>>('ma_waveform_read_pcm_frames');
  late final _ma_waveform_read_pcm_frames =
      _ma_waveform_read_pcm_framesPtr.asFunction<
          int Function(ffi.Pointer<ma_waveform>, ffi.Pointer<ffi.Void>, int,
              ffi.Pointer<ma_uint64>)>(isLeaf: true);

  /// General Library Documentation Undocument By General Corporation & Global Corporation & General Developer
  int ma_waveform_seek_to_pcm_frame(
    ffi.Pointer<ma_waveform> pWaveform,
    int frameIndex,
  ) {
    return _ma_waveform_seek_to_pcm_frame(
      pWaveform,
      frameIndex,
    );
  }

  late final _ma_waveform_seek_to_pcm_framePtr = _lookup<
      ffi.NativeFunction<
          ffi.Int32 Function(ffi.Pointer<ma_waveform>,
              ma_uint64)>>('ma_waveform_seek_to_pcm_frame');
  late final _ma_waveform_seek_to_pcm_frame = _ma_waveform_seek_to_pcm_framePtr
      .asFunction<int Function(ffi.Pointer<ma_waveform>, int)>(isLeaf: true);

  /// General Library Documentation Undocument By General Corporation & Global Corporation & General Developer
  int ma_waveform_set_amplitude(
    ffi.Pointer<ma_waveform> pWaveform,
    double amplitude,
  ) {
    return _ma_waveform_set_amplitude(
      pWaveform,
      amplitude,
    );
  }

  late final _ma_waveform_set_amplitudePtr = _lookup<
      ffi.NativeFunction<
          ffi.Int32 Function(ffi.Pointer<ma_waveform>,
              ffi.Double)>>('ma_waveform_set_amplitude');
  late final _ma_waveform_set_amplitude = _ma_waveform_set_amplitudePtr
      .asFunction<int Function(ffi.Pointer<ma_waveform>, double)>(isLeaf: true);

  /// General Library Documentation Undocument By General Corporation & Global Corporation & General Developer
  int ma_waveform_set_frequency(
    ffi.Pointer<ma_waveform> pWaveform,
    double frequency,
  ) {
    return _ma_waveform_set_frequency(
      pWaveform,
      frequency,
    );
  }

  late final _ma_waveform_set_frequencyPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int32 Function(ffi.Pointer<ma_waveform>,
              ffi.Double)>>('ma_waveform_set_frequency');
  late final _ma_waveform_set_frequency = _ma_waveform_set_frequencyPtr
      .asFunction<int Function(ffi.Pointer<ma_waveform>, double)>(isLeaf: true);

  /// General Library Documentation Undocument By General Corporation & Global Corporation & General Developer
  int ma_waveform_set_type(
    ffi.Pointer<ma_waveform> pWaveform,
    int type,
  ) {
    return _ma_waveform_set_type(
      pWaveform,
      type,
    );
  }

  late final _ma_waveform_set_typePtr = _lookup<
      ffi.NativeFunction<
          ffi.Int32 Function(
              ffi.Pointer<ma_waveform>, ffi.Int32)>>('ma_waveform_set_type');
  late final _ma_waveform_set_type = _ma_waveform_set_typePtr
      .asFunction<int Function(ffi.Pointer<ma_waveform>, int)>(isLeaf: true);

  /// General Library Documentation Undocument By General Corporation & Global Corporation & General Developer
  int ma_waveform_set_sample_rate(
    ffi.Pointer<ma_waveform> pWaveform,
    int sampleRate,
  ) {
    return _ma_waveform_set_sample_rate(
      pWaveform,
      sampleRate,
    );
  }

  late final _ma_waveform_set_sample_ratePtr = _lookup<
      ffi.NativeFunction<
          ffi.Int32 Function(ffi.Pointer<ma_waveform>,
              ma_uint32)>>('ma_waveform_set_sample_rate');
  late final _ma_waveform_set_sample_rate = _ma_waveform_set_sample_ratePtr
      .asFunction<int Function(ffi.Pointer<ma_waveform>, int)>(isLeaf: true);

  /// General Library Documentation Undocument By General Corporation & Global Corporation & General Developer
  ma_pulsewave_config ma_pulsewave_config_init(
    int format,
    int channels,
    int sampleRate,
    double dutyCycle,
    double amplitude,
    double frequency,
  ) {
    return _ma_pulsewave_config_init(
      format,
      channels,
      sampleRate,
      dutyCycle,
      amplitude,
      frequency,
    );
  }

  late final _ma_pulsewave_config_initPtr = _lookup<
      ffi.NativeFunction<
          ma_pulsewave_config Function(ffi.Int32, ma_uint32, ma_uint32,
              ffi.Double, ffi.Double, ffi.Double)>>('ma_pulsewave_config_init');
  late final _ma_pulsewave_config_init =
      _ma_pulsewave_config_initPtr.asFunction<
          ma_pulsewave_config Function(
              int, int, int, double, double, double)>(isLeaf: true);

  /// General Library Documentation Undocument By General Corporation & Global Corporation & General Developer
  int ma_pulsewave_init(
    ffi.Pointer<ma_pulsewave_config> pConfig,
    ffi.Pointer<ma_pulsewave> pWaveform,
  ) {
    return _ma_pulsewave_init(
      pConfig,
      pWaveform,
    );
  }

  late final _ma_pulsewave_initPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int32 Function(ffi.Pointer<ma_pulsewave_config>,
              ffi.Pointer<ma_pulsewave>)>>('ma_pulsewave_init');
  late final _ma_pulsewave_init = _ma_pulsewave_initPtr.asFunction<
      int Function(ffi.Pointer<ma_pulsewave_config>,
          ffi.Pointer<ma_pulsewave>)>(isLeaf: true);

  /// General Library Documentation Undocument By General Corporation & Global Corporation & General Developer
  void ma_pulsewave_uninit(
    ffi.Pointer<ma_pulsewave> pWaveform,
  ) {
    return _ma_pulsewave_uninit(
      pWaveform,
    );
  }

  late final _ma_pulsewave_uninitPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Pointer<ma_pulsewave>)>>(
          'ma_pulsewave_uninit');
  late final _ma_pulsewave_uninit = _ma_pulsewave_uninitPtr
      .asFunction<void Function(ffi.Pointer<ma_pulsewave>)>(isLeaf: true);

  /// General Library Documentation Undocument By General Corporation & Global Corporation & General Developer
  int ma_pulsewave_read_pcm_frames(
    ffi.Pointer<ma_pulsewave> pWaveform,
    ffi.Pointer<ffi.Void> pFramesOut,
    int frameCount,
    ffi.Pointer<ma_uint64> pFramesRead,
  ) {
    return _ma_pulsewave_read_pcm_frames(
      pWaveform,
      pFramesOut,
      frameCount,
      pFramesRead,
    );
  }

  late final _ma_pulsewave_read_pcm_framesPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int32 Function(
              ffi.Pointer<ma_pulsewave>,
              ffi.Pointer<ffi.Void>,
              ma_uint64,
              ffi.Pointer<ma_uint64>)>>('ma_pulsewave_read_pcm_frames');
  late final _ma_pulsewave_read_pcm_frames =
      _ma_pulsewave_read_pcm_framesPtr.asFunction<
          int Function(ffi.Pointer<ma_pulsewave>, ffi.Pointer<ffi.Void>, int,
              ffi.Pointer<ma_uint64>)>(isLeaf: true);

  /// General Library Documentation Undocument By General Corporation & Global Corporation & General Developer
  int ma_pulsewave_seek_to_pcm_frame(
    ffi.Pointer<ma_pulsewave> pWaveform,
    int frameIndex,
  ) {
    return _ma_pulsewave_seek_to_pcm_frame(
      pWaveform,
      frameIndex,
    );
  }

  late final _ma_pulsewave_seek_to_pcm_framePtr = _lookup<
      ffi.NativeFunction<
          ffi.Int32 Function(ffi.Pointer<ma_pulsewave>,
              ma_uint64)>>('ma_pulsewave_seek_to_pcm_frame');
  late final _ma_pulsewave_seek_to_pcm_frame =
      _ma_pulsewave_seek_to_pcm_framePtr
          .asFunction<int Function(ffi.Pointer<ma_pulsewave>, int)>(
              isLeaf: true);

  /// General Library Documentation Undocument By General Corporation & Global Corporation & General Developer
  int ma_pulsewave_set_amplitude(
    ffi.Pointer<ma_pulsewave> pWaveform,
    double amplitude,
  ) {
    return _ma_pulsewave_set_amplitude(
      pWaveform,
      amplitude,
    );
  }

  late final _ma_pulsewave_set_amplitudePtr = _lookup<
      ffi.NativeFunction<
          ffi.Int32 Function(ffi.Pointer<ma_pulsewave>,
              ffi.Double)>>('ma_pulsewave_set_amplitude');
  late final _ma_pulsewave_set_amplitude = _ma_pulsewave_set_amplitudePtr
      .asFunction<int Function(ffi.Pointer<ma_pulsewave>, double)>(
          isLeaf: true);

  /// General Library Documentation Undocument By General Corporation & Global Corporation & General Developer
  int ma_pulsewave_set_frequency(
    ffi.Pointer<ma_pulsewave> pWaveform,
    double frequency,
  ) {
    return _ma_pulsewave_set_frequency(
      pWaveform,
      frequency,
    );
  }

  late final _ma_pulsewave_set_frequencyPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int32 Function(ffi.Pointer<ma_pulsewave>,
              ffi.Double)>>('ma_pulsewave_set_frequency');
  late final _ma_pulsewave_set_frequency = _ma_pulsewave_set_frequencyPtr
      .asFunction<int Function(ffi.Pointer<ma_pulsewave>, double)>(
          isLeaf: true);

  /// General Library Documentation Undocument By General Corporation & Global Corporation & General Developer
  int ma_pulsewave_set_sample_rate(
    ffi.Pointer<ma_pulsewave> pWaveform,
    int sampleRate,
  ) {
    return _ma_pulsewave_set_sample_rate(
      pWaveform,
      sampleRate,
    );
  }

  late final _ma_pulsewave_set_sample_ratePtr = _lookup<
      ffi.NativeFunction<
          ffi.Int32 Function(ffi.Pointer<ma_pulsewave>,
              ma_uint32)>>('ma_pulsewave_set_sample_rate');
  late final _ma_pulsewave_set_sample_rate = _ma_pulsewave_set_sample_ratePtr
      .asFunction<int Function(ffi.Pointer<ma_pulsewave>, int)>(isLeaf: true);

  /// General Library Documentation Undocument By General Corporation & Global Corporation & General Developer
  int ma_pulsewave_set_duty_cycle(
    ffi.Pointer<ma_pulsewave> pWaveform,
    double dutyCycle,
  ) {
    return _ma_pulsewave_set_duty_cycle(
      pWaveform,
      dutyCycle,
    );
  }

  late final _ma_pulsewave_set_duty_cyclePtr = _lookup<
      ffi.NativeFunction<
          ffi.Int32 Function(ffi.Pointer<ma_pulsewave>,
              ffi.Double)>>('ma_pulsewave_set_duty_cycle');
  late final _ma_pulsewave_set_duty_cycle = _ma_pulsewave_set_duty_cyclePtr
      .asFunction<int Function(ffi.Pointer<ma_pulsewave>, double)>(
          isLeaf: true);

  /// General Library Documentation Undocument By General Corporation & Global Corporation & General Developer
  ma_noise_config ma_noise_config_init(
    int format,
    int channels,
    int type,
    int seed,
    double amplitude,
  ) {
    return _ma_noise_config_init(
      format,
      channels,
      type,
      seed,
      amplitude,
    );
  }

  late final _ma_noise_config_initPtr = _lookup<
      ffi.NativeFunction<
          ma_noise_config Function(ffi.Int32, ma_uint32, ffi.Int32, ma_int32,
              ffi.Double)>>('ma_noise_config_init');
  late final _ma_noise_config_init = _ma_noise_config_initPtr
      .asFunction<ma_noise_config Function(int, int, int, int, double)>(
          isLeaf: true);

  /// General Library Documentation Undocument By General Corporation & Global Corporation & General Developer
  int ma_noise_get_heap_size(
    ffi.Pointer<ma_noise_config> pConfig,
    ffi.Pointer<ffi.Size> pHeapSizeInBytes,
  ) {
    return _ma_noise_get_heap_size(
      pConfig,
      pHeapSizeInBytes,
    );
  }

  late final _ma_noise_get_heap_sizePtr = _lookup<
      ffi.NativeFunction<
          ffi.Int32 Function(ffi.Pointer<ma_noise_config>,
              ffi.Pointer<ffi.Size>)>>('ma_noise_get_heap_size');
  late final _ma_noise_get_heap_size = _ma_noise_get_heap_sizePtr.asFunction<
      int Function(
          ffi.Pointer<ma_noise_config>, ffi.Pointer<ffi.Size>)>(isLeaf: true);

  /// General Library Documentation Undocument By General Corporation & Global Corporation & General Developer
  int ma_noise_init_preallocated(
    ffi.Pointer<ma_noise_config> pConfig,
    ffi.Pointer<ffi.Void> pHeap,
    ffi.Pointer<ma_noise> pNoise,
  ) {
    return _ma_noise_init_preallocated(
      pConfig,
      pHeap,
      pNoise,
    );
  }

  late final _ma_noise_init_preallocatedPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int32 Function(
              ffi.Pointer<ma_noise_config>,
              ffi.Pointer<ffi.Void>,
              ffi.Pointer<ma_noise>)>>('ma_noise_init_preallocated');
  late final _ma_noise_init_preallocated =
      _ma_noise_init_preallocatedPtr.asFunction<
          int Function(ffi.Pointer<ma_noise_config>, ffi.Pointer<ffi.Void>,
              ffi.Pointer<ma_noise>)>(isLeaf: true);

  /// General Library Documentation Undocument By General Corporation & Global Corporation & General Developer
  int ma_noise_init(
    ffi.Pointer<ma_noise_config> pConfig,
    ffi.Pointer<ma_allocation_callbacks> pAllocationCallbacks,
    ffi.Pointer<ma_noise> pNoise,
  ) {
    return _ma_noise_init(
      pConfig,
      pAllocationCallbacks,
      pNoise,
    );
  }

  late final _ma_noise_initPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int32 Function(
              ffi.Pointer<ma_noise_config>,
              ffi.Pointer<ma_allocation_callbacks>,
              ffi.Pointer<ma_noise>)>>('ma_noise_init');
  late final _ma_noise_init = _ma_noise_initPtr.asFunction<
      int Function(
          ffi.Pointer<ma_noise_config>,
          ffi.Pointer<ma_allocation_callbacks>,
          ffi.Pointer<ma_noise>)>(isLeaf: true);

  /// General Library Documentation Undocument By General Corporation & Global Corporation & General Developer
  void ma_noise_uninit(
    ffi.Pointer<ma_noise> pNoise,
    ffi.Pointer<ma_allocation_callbacks> pAllocationCallbacks,
  ) {
    return _ma_noise_uninit(
      pNoise,
      pAllocationCallbacks,
    );
  }

  late final _ma_noise_uninitPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Pointer<ma_noise>,
              ffi.Pointer<ma_allocation_callbacks>)>>('ma_noise_uninit');
  late final _ma_noise_uninit = _ma_noise_uninitPtr.asFunction<
      void Function(ffi.Pointer<ma_noise>,
          ffi.Pointer<ma_allocation_callbacks>)>(isLeaf: true);

  /// General Library Documentation Undocument By General Corporation & Global Corporation & General Developer
  int ma_noise_read_pcm_frames(
    ffi.Pointer<ma_noise> pNoise,
    ffi.Pointer<ffi.Void> pFramesOut,
    int frameCount,
    ffi.Pointer<ma_uint64> pFramesRead,
  ) {
    return _ma_noise_read_pcm_frames(
      pNoise,
      pFramesOut,
      frameCount,
      pFramesRead,
    );
  }

  late final _ma_noise_read_pcm_framesPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int32 Function(ffi.Pointer<ma_noise>, ffi.Pointer<ffi.Void>,
              ma_uint64, ffi.Pointer<ma_uint64>)>>('ma_noise_read_pcm_frames');
  late final _ma_noise_read_pcm_frames =
      _ma_noise_read_pcm_framesPtr.asFunction<
          int Function(ffi.Pointer<ma_noise>, ffi.Pointer<ffi.Void>, int,
              ffi.Pointer<ma_uint64>)>(isLeaf: true);

  /// General Library Documentation Undocument By General Corporation & Global Corporation & General Developer
  int ma_noise_set_amplitude(
    ffi.Pointer<ma_noise> pNoise,
    double amplitude,
  ) {
    return _ma_noise_set_amplitude(
      pNoise,
      amplitude,
    );
  }

  late final _ma_noise_set_amplitudePtr = _lookup<
      ffi.NativeFunction<
          ffi.Int32 Function(
              ffi.Pointer<ma_noise>, ffi.Double)>>('ma_noise_set_amplitude');
  late final _ma_noise_set_amplitude = _ma_noise_set_amplitudePtr
      .asFunction<int Function(ffi.Pointer<ma_noise>, double)>(isLeaf: true);

  /// General Library Documentation Undocument By General Corporation & Global Corporation & General Developer
  int ma_noise_set_seed(
    ffi.Pointer<ma_noise> pNoise,
    int seed,
  ) {
    return _ma_noise_set_seed(
      pNoise,
      seed,
    );
  }

  late final _ma_noise_set_seedPtr = _lookup<
          ffi
          .NativeFunction<ffi.Int32 Function(ffi.Pointer<ma_noise>, ma_int32)>>(
      'ma_noise_set_seed');
  late final _ma_noise_set_seed = _ma_noise_set_seedPtr
      .asFunction<int Function(ffi.Pointer<ma_noise>, int)>(isLeaf: true);

  /// General Library Documentation Undocument By General Corporation & Global Corporation & General Developer
  int ma_noise_set_type(
    ffi.Pointer<ma_noise> pNoise,
    int type,
  ) {
    return _ma_noise_set_type(
      pNoise,
      type,
    );
  }

  late final _ma_noise_set_typePtr = _lookup<
      ffi.NativeFunction<
          ffi.Int32 Function(
              ffi.Pointer<ma_noise>, ffi.Int32)>>('ma_noise_set_type');
  late final _ma_noise_set_type = _ma_noise_set_typePtr
      .asFunction<int Function(ffi.Pointer<ma_noise>, int)>(isLeaf: true);

  /// General Library Documentation Undocument By General Corporation & Global Corporation & General Developer
  void ca_dart_configure(
    Dart_PostCObject_Def pDartPostCObject,
  ) {
    return _ca_dart_configure(
      pDartPostCObject,
    );
  }

  late final _ca_dart_configurePtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(Dart_PostCObject_Def)>>(
          'ca_dart_configure');
  late final _ca_dart_configure = _ca_dart_configurePtr
      .asFunction<void Function(Dart_PostCObject_Def)>(isLeaf: true);

  /// General Library Documentation Undocument By General Corporation & Global Corporation & General Developer
  void ca_dart_post_cobject(
    int port_id,
    ffi.Pointer<Dart_CObject> message,
  ) {
    return _ca_dart_post_cobject(
      port_id,
      message,
    );
  }

  late final _ca_dart_post_cobjectPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(Dart_Port_DL,
              ffi.Pointer<Dart_CObject>)>>('ca_dart_post_cobject');
  late final _ca_dart_post_cobject = _ca_dart_post_cobjectPtr
      .asFunction<void Function(int, ffi.Pointer<Dart_CObject>)>(isLeaf: true);

  /// General Library Documentation Undocument By General Corporation & Global Corporation & General Developer
  int ca_context_init(
    ffi.Pointer<ffi.Int32> backends,
    int backendCount,
    ffi.Pointer<ma_context_config> pConfig,
    ffi.Pointer<ca_context> pContext,
  ) {
    return _ca_context_init(
      backends,
      backendCount,
      pConfig,
      pContext,
    );
  }

  late final _ca_context_initPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int32 Function(
              ffi.Pointer<ffi.Int32>,
              ma_uint32,
              ffi.Pointer<ma_context_config>,
              ffi.Pointer<ca_context>)>>('ca_context_init');
  late final _ca_context_init = _ca_context_initPtr.asFunction<
      int Function(ffi.Pointer<ffi.Int32>, int, ffi.Pointer<ma_context_config>,
          ffi.Pointer<ca_context>)>(isLeaf: true);

  /// General Library Documentation Undocument By General Corporation & Global Corporation & General Developer
  ffi.Pointer<ma_context> ca_context_get_ref(
    ffi.Pointer<ca_context> pContext,
  ) {
    return _ca_context_get_ref(
      pContext,
    );
  }

  late final _ca_context_get_refPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ma_context> Function(
              ffi.Pointer<ca_context>)>>('ca_context_get_ref');
  late final _ca_context_get_ref = _ca_context_get_refPtr
      .asFunction<ffi.Pointer<ma_context> Function(ffi.Pointer<ca_context>)>(
          isLeaf: true);

  /// General Library Documentation Undocument By General Corporation & Global Corporation & General Developer
  int ca_context_uninit(
    ffi.Pointer<ca_context> pContext,
  ) {
    return _ca_context_uninit(
      pContext,
    );
  }

  late final _ca_context_uninitPtr =
      _lookup<ffi.NativeFunction<ffi.Int32 Function(ffi.Pointer<ca_context>)>>(
          'ca_context_uninit');
  late final _ca_context_uninit = _ca_context_uninitPtr
      .asFunction<int Function(ffi.Pointer<ca_context>)>(isLeaf: true);

  /// General Library Documentation Undocument By General Corporation & Global Corporation & General Developer
  ca_device_config ca_device_config_init(
    int type,
    int format,
    int sampleRate,
    int channels,
    int bufferFrameSize,
    int notificationPortId,
  ) {
    return _ca_device_config_init(
      type,
      format,
      sampleRate,
      channels,
      bufferFrameSize,
      notificationPortId,
    );
  }

  late final _ca_device_config_initPtr = _lookup<
      ffi.NativeFunction<
          ca_device_config Function(ffi.Int32, ffi.Int32, ffi.Int, ffi.Int,
              ffi.Int, ffi.Int64)>>('ca_device_config_init');
  late final _ca_device_config_init = _ca_device_config_initPtr
      .asFunction<ca_device_config Function(int, int, int, int, int, int)>(
          isLeaf: true);

  /// General Library Documentation Undocument By General Corporation & Global Corporation & General Developer
  int ca_device_init(
    ffi.Pointer<ca_device> pDevice,
    ca_device_config config,
    ffi.Pointer<ma_context> pContext,
    ffi.Pointer<ma_device_id> pDeviceId,
  ) {
    return _ca_device_init(
      pDevice,
      config,
      pContext,
      pDeviceId,
    );
  }

  late final _ca_device_initPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int32 Function(
              ffi.Pointer<ca_device>,
              ca_device_config,
              ffi.Pointer<ma_context>,
              ffi.Pointer<ma_device_id>)>>('ca_device_init');
  late final _ca_device_init = _ca_device_initPtr.asFunction<
      int Function(ffi.Pointer<ca_device>, ca_device_config,
          ffi.Pointer<ma_context>, ffi.Pointer<ma_device_id>)>(isLeaf: true);

  /// General Library Documentation Undocument By General Corporation & Global Corporation & General Developer
  int ca_device_capture_read(
    ffi.Pointer<ca_device> pDevice,
    ffi.Pointer<ffi.Float> pBuffer,
    int frameCount,
    ffi.Pointer<ffi.Int> pFramesRead,
  ) {
    return _ca_device_capture_read(
      pDevice,
      pBuffer,
      frameCount,
      pFramesRead,
    );
  }

  late final _ca_device_capture_readPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int32 Function(ffi.Pointer<ca_device>, ffi.Pointer<ffi.Float>,
              ffi.Int, ffi.Pointer<ffi.Int>)>>('ca_device_capture_read');
  late final _ca_device_capture_read = _ca_device_capture_readPtr.asFunction<
      int Function(ffi.Pointer<ca_device>, ffi.Pointer<ffi.Float>, int,
          ffi.Pointer<ffi.Int>)>(isLeaf: true);

  /// General Library Documentation Undocument By General Corporation & Global Corporation & General Developer
  int ca_device_playback_write(
    ffi.Pointer<ca_device> pDevice,
    ffi.Pointer<ffi.Float> pBuffer,
    int frameCount,
    ffi.Pointer<ffi.Int> pFramesWrite,
  ) {
    return _ca_device_playback_write(
      pDevice,
      pBuffer,
      frameCount,
      pFramesWrite,
    );
  }

  late final _ca_device_playback_writePtr = _lookup<
      ffi.NativeFunction<
          ffi.Int32 Function(ffi.Pointer<ca_device>, ffi.Pointer<ffi.Float>,
              ffi.Int, ffi.Pointer<ffi.Int>)>>('ca_device_playback_write');
  late final _ca_device_playback_write =
      _ca_device_playback_writePtr.asFunction<
          int Function(ffi.Pointer<ca_device>, ffi.Pointer<ffi.Float>, int,
              ffi.Pointer<ffi.Int>)>(isLeaf: true);

  /// General Library Documentation Undocument By General Corporation & Global Corporation & General Developer
  int ca_device_get_device_info(
    ffi.Pointer<ca_device> pDevice,
    ffi.Pointer<ma_device_info> pDeviceInfo,
  ) {
    return _ca_device_get_device_info(
      pDevice,
      pDeviceInfo,
    );
  }

  late final _ca_device_get_device_infoPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int32 Function(ffi.Pointer<ca_device>,
              ffi.Pointer<ma_device_info>)>>('ca_device_get_device_info');
  late final _ca_device_get_device_info =
      _ca_device_get_device_infoPtr.asFunction<
          int Function(ffi.Pointer<ca_device>,
              ffi.Pointer<ma_device_info>)>(isLeaf: true);

  /// General Library Documentation Undocument By General Corporation & Global Corporation & General Developer
  int ca_device_set_volume(
    ffi.Pointer<ca_device> pDevice,
    double volume,
  ) {
    return _ca_device_set_volume(
      pDevice,
      volume,
    );
  }

  late final _ca_device_set_volumePtr = _lookup<
      ffi.NativeFunction<
          ffi.Int32 Function(
              ffi.Pointer<ca_device>, ffi.Float)>>('ca_device_set_volume');
  late final _ca_device_set_volume = _ca_device_set_volumePtr
      .asFunction<int Function(ffi.Pointer<ca_device>, double)>(isLeaf: true);

  /// General Library Documentation Undocument By General Corporation & Global Corporation & General Developer
  int ca_device_get_volume(
    ffi.Pointer<ca_device> pDevice,
    ffi.Pointer<ffi.Float> pVolume,
  ) {
    return _ca_device_get_volume(
      pDevice,
      pVolume,
    );
  }

  late final _ca_device_get_volumePtr = _lookup<
      ffi.NativeFunction<
          ffi.Int32 Function(ffi.Pointer<ca_device>,
              ffi.Pointer<ffi.Float>)>>('ca_device_get_volume');
  late final _ca_device_get_volume = _ca_device_get_volumePtr
      .asFunction<int Function(ffi.Pointer<ca_device>, ffi.Pointer<ffi.Float>)>(
          isLeaf: true);

  /// General Library Documentation Undocument By General Corporation & Global Corporation & General Developer
  int ca_device_start(
    ffi.Pointer<ca_device> pDevice,
  ) {
    return _ca_device_start(
      pDevice,
    );
  }

  late final _ca_device_startPtr =
      _lookup<ffi.NativeFunction<ffi.Int32 Function(ffi.Pointer<ca_device>)>>(
          'ca_device_start');
  late final _ca_device_start = _ca_device_startPtr
      .asFunction<int Function(ffi.Pointer<ca_device>)>(isLeaf: true);

  /// General Library Documentation Undocument By General Corporation & Global Corporation & General Developer
  int ca_device_stop(
    ffi.Pointer<ca_device> pDevice,
  ) {
    return _ca_device_stop(
      pDevice,
    );
  }

  late final _ca_device_stopPtr =
      _lookup<ffi.NativeFunction<ffi.Int32 Function(ffi.Pointer<ca_device>)>>(
          'ca_device_stop');
  late final _ca_device_stop = _ca_device_stopPtr
      .asFunction<int Function(ffi.Pointer<ca_device>)>(isLeaf: true);

  /// General Library Documentation Undocument By General Corporation & Global Corporation & General Developer
  int ca_device_get_state(
    ffi.Pointer<ca_device> pDevice,
  ) {
    return _ca_device_get_state(
      pDevice,
    );
  }

  late final _ca_device_get_statePtr =
      _lookup<ffi.NativeFunction<ffi.Int32 Function(ffi.Pointer<ca_device>)>>(
          'ca_device_get_state');
  late final _ca_device_get_state = _ca_device_get_statePtr
      .asFunction<int Function(ffi.Pointer<ca_device>)>(isLeaf: true);

  /// General Library Documentation Undocument By General Corporation & Global Corporation & General Developer
  void ca_device_clear_buffer(
    ffi.Pointer<ca_device> pDevice,
  ) {
    return _ca_device_clear_buffer(
      pDevice,
    );
  }

  late final _ca_device_clear_bufferPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Pointer<ca_device>)>>(
          'ca_device_clear_buffer');
  late final _ca_device_clear_buffer = _ca_device_clear_bufferPtr
      .asFunction<void Function(ffi.Pointer<ca_device>)>(isLeaf: true);

  /// General Library Documentation Undocument By General Corporation & Global Corporation & General Developer
  int ca_device_available_read(
    ffi.Pointer<ca_device> pDevice,
  ) {
    return _ca_device_available_read(
      pDevice,
    );
  }

  late final _ca_device_available_readPtr =
      _lookup<ffi.NativeFunction<ffi.Int Function(ffi.Pointer<ca_device>)>>(
          'ca_device_available_read');
  late final _ca_device_available_read = _ca_device_available_readPtr
      .asFunction<int Function(ffi.Pointer<ca_device>)>(isLeaf: true);

  /// General Library Documentation Undocument By General Corporation & Global Corporation & General Developer
  int ca_device_available_write(
    ffi.Pointer<ca_device> pDevice,
  ) {
    return _ca_device_available_write(
      pDevice,
    );
  }

  late final _ca_device_available_writePtr =
      _lookup<ffi.NativeFunction<ffi.Int Function(ffi.Pointer<ca_device>)>>(
          'ca_device_available_write');
  late final _ca_device_available_write = _ca_device_available_writePtr
      .asFunction<int Function(ffi.Pointer<ca_device>)>(isLeaf: true);

  /// General Library Documentation Undocument By General Corporation & Global Corporation & General Developer
  void ca_device_uninit(
    ffi.Pointer<ca_device> pDevice,
  ) {
    return _ca_device_uninit(
      pDevice,
    );
  }

  late final _ca_device_uninitPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Pointer<ca_device>)>>(
          'ca_device_uninit');
  late final _ca_device_uninit = _ca_device_uninitPtr
      .asFunction<void Function(ffi.Pointer<ca_device>)>(isLeaf: true);

  /// General Library Documentation Undocument By General Corporation & Global Corporation & General Developer
  int ca_log_init(
    ffi.Pointer<ca_log> pLog,
  ) {
    return _ca_log_init(
      pLog,
    );
  }

  late final _ca_log_initPtr =
      _lookup<ffi.NativeFunction<ffi.Int32 Function(ffi.Pointer<ca_log>)>>(
          'ca_log_init');
  late final _ca_log_init = _ca_log_initPtr
      .asFunction<int Function(ffi.Pointer<ca_log>)>(isLeaf: true);

  /// General Library Documentation Undocument By General Corporation & Global Corporation & General Developer
  ffi.Pointer<ma_log> ca_log_get_ref(
    ffi.Pointer<ca_log> pLog,
  ) {
    return _ca_log_get_ref(
      pLog,
    );
  }

  late final _ca_log_get_refPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ma_log> Function(ffi.Pointer<ca_log>)>>('ca_log_get_ref');
  late final _ca_log_get_ref = _ca_log_get_refPtr
      .asFunction<ffi.Pointer<ma_log> Function(ffi.Pointer<ca_log>)>(
          isLeaf: true);

  /// General Library Documentation Undocument By General Corporation & Global Corporation & General Developer
  void ca_log_get_messages(
    ffi.Pointer<ca_log> pLog,
    ffi.Pointer<ffi.Pointer<ca_log_message>> ppMessages,
    ffi.Pointer<ma_uint32> pCount,
  ) {
    return _ca_log_get_messages(
      pLog,
      ppMessages,
      pCount,
    );
  }

  late final _ca_log_get_messagesPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(
              ffi.Pointer<ca_log>,
              ffi.Pointer<ffi.Pointer<ca_log_message>>,
              ffi.Pointer<ma_uint32>)>>('ca_log_get_messages');
  late final _ca_log_get_messages = _ca_log_get_messagesPtr.asFunction<
      void Function(
          ffi.Pointer<ca_log>,
          ffi.Pointer<ffi.Pointer<ca_log_message>>,
          ffi.Pointer<ma_uint32>)>(isLeaf: true);

  /// General Library Documentation Undocument By General Corporation & Global Corporation & General Developer
  void ca_log_release_messages(
    ffi.Pointer<ca_log> pLog,
    int count,
  ) {
    return _ca_log_release_messages(
      pLog,
      count,
    );
  }

  late final _ca_log_release_messagesPtr = _lookup<
          ffi
          .NativeFunction<ffi.Void Function(ffi.Pointer<ca_log>, ma_uint32)>>(
      'ca_log_release_messages');
  late final _ca_log_release_messages = _ca_log_release_messagesPtr
      .asFunction<void Function(ffi.Pointer<ca_log>, int)>(isLeaf: true);

  /// General Library Documentation Undocument By General Corporation & Global Corporation & General Developer
  void ca_log_set_notification(
    ffi.Pointer<ca_log> pLog,
    int portId,
  ) {
    return _ca_log_set_notification(
      pLog,
      portId,
    );
  }

  late final _ca_log_set_notificationPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(
              ffi.Pointer<ca_log>, Dart_Port_DL)>>('ca_log_set_notification');
  late final _ca_log_set_notification = _ca_log_set_notificationPtr
      .asFunction<void Function(ffi.Pointer<ca_log>, int)>(isLeaf: true);

  /// General Library Documentation Undocument By General Corporation & Global Corporation & General Developer
  void ca_log_uninit(
    ffi.Pointer<ca_log> pLog,
  ) {
    return _ca_log_uninit(
      pLog,
    );
  }

  late final _ca_log_uninitPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Pointer<ca_log>)>>(
          'ca_log_uninit');
  late final _ca_log_uninit = _ca_log_uninitPtr
      .asFunction<void Function(ffi.Pointer<ca_log>)>(isLeaf: true);

  /// General Library Documentation Undocument By General Corporation & Global Corporation & General Developer
  void general_audio_get_version(
    ffi.Pointer<ffi.Char> pMajor,
    ffi.Pointer<ffi.Char> pMinor,
    ffi.Pointer<ffi.Char> pPatch,
  ) {
    return _general_audio_get_version(
      pMajor,
      pMinor,
      pPatch,
    );
  }

  late final _general_audio_get_versionPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.Char>,
              ffi.Pointer<ffi.Char>)>>('general_audio_get_version');
  late final _general_audio_get_version =
      _general_audio_get_versionPtr.asFunction<
          void Function(ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.Char>,
              ffi.Pointer<ffi.Char>)>();

  /// General Library Documentation Undocument By General Corporation & Global Corporation & General Developer
  ma_resource_manager_pipeline_notifications
      ma_resource_manager_pipeline_notifications_init() {
    return _ma_resource_manager_pipeline_notifications_init();
  }

  late final _ma_resource_manager_pipeline_notifications_initPtr = _lookup<
      ffi.NativeFunction<
          ma_resource_manager_pipeline_notifications
              Function()>>('ma_resource_manager_pipeline_notifications_init');
  late final _ma_resource_manager_pipeline_notifications_init =
      _ma_resource_manager_pipeline_notifications_initPtr
          .asFunction<ma_resource_manager_pipeline_notifications Function()>(
              isLeaf: true);

  /// General Library Documentation Undocument By General Corporation & Global Corporation & General Developer
  ma_resource_manager_data_source_config
      ma_resource_manager_data_source_config_init() {
    return _ma_resource_manager_data_source_config_init();
  }

  late final _ma_resource_manager_data_source_config_initPtr = _lookup<
          ffi
          .NativeFunction<ma_resource_manager_data_source_config Function()>>(
      'ma_resource_manager_data_source_config_init');
  late final _ma_resource_manager_data_source_config_init =
      _ma_resource_manager_data_source_config_initPtr
          .asFunction<ma_resource_manager_data_source_config Function()>(
              isLeaf: true);

  /// General Library Documentation Undocument By General Corporation & Global Corporation & General Developer
  ma_resource_manager_config ma_resource_manager_config_init() {
    return _ma_resource_manager_config_init();
  }

  late final _ma_resource_manager_config_initPtr =
      _lookup<ffi.NativeFunction<ma_resource_manager_config Function()>>(
          'ma_resource_manager_config_init');
  late final _ma_resource_manager_config_init =
      _ma_resource_manager_config_initPtr
          .asFunction<ma_resource_manager_config Function()>(isLeaf: true);

  /// General Library Documentation Undocument By General Corporation & Global Corporation & General Developer
  int ma_resource_manager_init(
    ffi.Pointer<ma_resource_manager_config> pConfig,
    ffi.Pointer<ma_resource_manager> pResourceManager,
  ) {
    return _ma_resource_manager_init(
      pConfig,
      pResourceManager,
    );
  }

  late final _ma_resource_manager_initPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int32 Function(ffi.Pointer<ma_resource_manager_config>,
              ffi.Pointer<ma_resource_manager>)>>('ma_resource_manager_init');
  late final _ma_resource_manager_init =
      _ma_resource_manager_initPtr.asFunction<
          int Function(ffi.Pointer<ma_resource_manager_config>,
              ffi.Pointer<ma_resource_manager>)>(isLeaf: true);

  /// General Library Documentation Undocument By General Corporation & Global Corporation & General Developer
  void ma_resource_manager_uninit(
    ffi.Pointer<ma_resource_manager> pResourceManager,
  ) {
    return _ma_resource_manager_uninit(
      pResourceManager,
    );
  }

  late final _ma_resource_manager_uninitPtr = _lookup<
          ffi
          .NativeFunction<ffi.Void Function(ffi.Pointer<ma_resource_manager>)>>(
      'ma_resource_manager_uninit');
  late final _ma_resource_manager_uninit = _ma_resource_manager_uninitPtr
      .asFunction<void Function(ffi.Pointer<ma_resource_manager>)>(
          isLeaf: true);

  /// General Library Documentation Undocument By General Corporation & Global Corporation & General Developer
  ffi.Pointer<ma_log> ma_resource_manager_get_log(
    ffi.Pointer<ma_resource_manager> pResourceManager,
  ) {
    return _ma_resource_manager_get_log(
      pResourceManager,
    );
  }

  late final _ma_resource_manager_get_logPtr = _lookup<
          ffi.NativeFunction<
              ffi.Pointer<ma_log> Function(ffi.Pointer<ma_resource_manager>)>>(
      'ma_resource_manager_get_log');
  late final _ma_resource_manager_get_log =
      _ma_resource_manager_get_logPtr.asFunction<
          ffi.Pointer<ma_log> Function(
              ffi.Pointer<ma_resource_manager>)>(isLeaf: true);

  /// General Library Documentation Undocument By General Corporation & Global Corporation & General Developer
  int ma_resource_manager_register_file(
    ffi.Pointer<ma_resource_manager> pResourceManager,
    ffi.Pointer<ffi.Char> pFilePath,
    int flags,
  ) {
    return _ma_resource_manager_register_file(
      pResourceManager,
      pFilePath,
      flags,
    );
  }

  late final _ma_resource_manager_register_filePtr = _lookup<
      ffi.NativeFunction<
          ffi.Int32 Function(
              ffi.Pointer<ma_resource_manager>,
              ffi.Pointer<ffi.Char>,
              ma_uint32)>>('ma_resource_manager_register_file');
  late final _ma_resource_manager_register_file =
      _ma_resource_manager_register_filePtr.asFunction<
          int Function(ffi.Pointer<ma_resource_manager>, ffi.Pointer<ffi.Char>,
              int)>(isLeaf: true);

  /// General Library Documentation Undocument By General Corporation & Global Corporation & General Developer
  int ma_resource_manager_register_file_w(
    ffi.Pointer<ma_resource_manager> pResourceManager,
    ffi.Pointer<ffi.WChar> pFilePath,
    int flags,
  ) {
    return _ma_resource_manager_register_file_w(
      pResourceManager,
      pFilePath,
      flags,
    );
  }

  late final _ma_resource_manager_register_file_wPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int32 Function(
              ffi.Pointer<ma_resource_manager>,
              ffi.Pointer<ffi.WChar>,
              ma_uint32)>>('ma_resource_manager_register_file_w');
  late final _ma_resource_manager_register_file_w =
      _ma_resource_manager_register_file_wPtr.asFunction<
          int Function(ffi.Pointer<ma_resource_manager>, ffi.Pointer<ffi.WChar>,
              int)>(isLeaf: true);

  /// General Library Documentation Undocument By General Corporation & Global Corporation & General Developer
  int ma_resource_manager_register_decoded_data(
    ffi.Pointer<ma_resource_manager> pResourceManager,
    ffi.Pointer<ffi.Char> pName,
    ffi.Pointer<ffi.Void> pData,
    int frameCount,
    int format,
    int channels,
    int sampleRate,
  ) {
    return _ma_resource_manager_register_decoded_data(
      pResourceManager,
      pName,
      pData,
      frameCount,
      format,
      channels,
      sampleRate,
    );
  }

  late final _ma_resource_manager_register_decoded_dataPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int32 Function(
              ffi.Pointer<ma_resource_manager>,
              ffi.Pointer<ffi.Char>,
              ffi.Pointer<ffi.Void>,
              ma_uint64,
              ffi.Int32,
              ma_uint32,
              ma_uint32)>>('ma_resource_manager_register_decoded_data');
  late final _ma_resource_manager_register_decoded_data =
      _ma_resource_manager_register_decoded_dataPtr.asFunction<
          int Function(ffi.Pointer<ma_resource_manager>, ffi.Pointer<ffi.Char>,
              ffi.Pointer<ffi.Void>, int, int, int, int)>(isLeaf: true);

  /// General Library Documentation Undocument By General Corporation & Global Corporation & General Developer
  int ma_resource_manager_register_decoded_data_w(
    ffi.Pointer<ma_resource_manager> pResourceManager,
    ffi.Pointer<ffi.WChar> pName,
    ffi.Pointer<ffi.Void> pData,
    int frameCount,
    int format,
    int channels,
    int sampleRate,
  ) {
    return _ma_resource_manager_register_decoded_data_w(
      pResourceManager,
      pName,
      pData,
      frameCount,
      format,
      channels,
      sampleRate,
    );
  }

  late final _ma_resource_manager_register_decoded_data_wPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int32 Function(
              ffi.Pointer<ma_resource_manager>,
              ffi.Pointer<ffi.WChar>,
              ffi.Pointer<ffi.Void>,
              ma_uint64,
              ffi.Int32,
              ma_uint32,
              ma_uint32)>>('ma_resource_manager_register_decoded_data_w');
  late final _ma_resource_manager_register_decoded_data_w =
      _ma_resource_manager_register_decoded_data_wPtr.asFunction<
          int Function(ffi.Pointer<ma_resource_manager>, ffi.Pointer<ffi.WChar>,
              ffi.Pointer<ffi.Void>, int, int, int, int)>(isLeaf: true);

  /// General Library Documentation Undocument By General Corporation & Global Corporation & General Developer
  int ma_resource_manager_register_encoded_data(
    ffi.Pointer<ma_resource_manager> pResourceManager,
    ffi.Pointer<ffi.Char> pName,
    ffi.Pointer<ffi.Void> pData,
    int sizeInBytes,
  ) {
    return _ma_resource_manager_register_encoded_data(
      pResourceManager,
      pName,
      pData,
      sizeInBytes,
    );
  }

  late final _ma_resource_manager_register_encoded_dataPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int32 Function(
              ffi.Pointer<ma_resource_manager>,
              ffi.Pointer<ffi.Char>,
              ffi.Pointer<ffi.Void>,
              ffi.Size)>>('ma_resource_manager_register_encoded_data');
  late final _ma_resource_manager_register_encoded_data =
      _ma_resource_manager_register_encoded_dataPtr.asFunction<
          int Function(ffi.Pointer<ma_resource_manager>, ffi.Pointer<ffi.Char>,
              ffi.Pointer<ffi.Void>, int)>(isLeaf: true);

  /// General Library Documentation Undocument By General Corporation & Global Corporation & General Developer
  int ma_resource_manager_register_encoded_data_w(
    ffi.Pointer<ma_resource_manager> pResourceManager,
    ffi.Pointer<ffi.WChar> pName,
    ffi.Pointer<ffi.Void> pData,
    int sizeInBytes,
  ) {
    return _ma_resource_manager_register_encoded_data_w(
      pResourceManager,
      pName,
      pData,
      sizeInBytes,
    );
  }

  late final _ma_resource_manager_register_encoded_data_wPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int32 Function(
              ffi.Pointer<ma_resource_manager>,
              ffi.Pointer<ffi.WChar>,
              ffi.Pointer<ffi.Void>,
              ffi.Size)>>('ma_resource_manager_register_encoded_data_w');
  late final _ma_resource_manager_register_encoded_data_w =
      _ma_resource_manager_register_encoded_data_wPtr.asFunction<
          int Function(ffi.Pointer<ma_resource_manager>, ffi.Pointer<ffi.WChar>,
              ffi.Pointer<ffi.Void>, int)>(isLeaf: true);

  /// General Library Documentation Undocument By General Corporation & Global Corporation & General Developer
  int ma_resource_manager_unregister_file(
    ffi.Pointer<ma_resource_manager> pResourceManager,
    ffi.Pointer<ffi.Char> pFilePath,
  ) {
    return _ma_resource_manager_unregister_file(
      pResourceManager,
      pFilePath,
    );
  }

  late final _ma_resource_manager_unregister_filePtr = _lookup<
      ffi.NativeFunction<
          ffi.Int32 Function(ffi.Pointer<ma_resource_manager>,
              ffi.Pointer<ffi.Char>)>>('ma_resource_manager_unregister_file');
  late final _ma_resource_manager_unregister_file =
      _ma_resource_manager_unregister_filePtr.asFunction<
          int Function(ffi.Pointer<ma_resource_manager>,
              ffi.Pointer<ffi.Char>)>(isLeaf: true);

  /// General Library Documentation Undocument By General Corporation & Global Corporation & General Developer
  int ma_resource_manager_unregister_file_w(
    ffi.Pointer<ma_resource_manager> pResourceManager,
    ffi.Pointer<ffi.WChar> pFilePath,
  ) {
    return _ma_resource_manager_unregister_file_w(
      pResourceManager,
      pFilePath,
    );
  }

  late final _ma_resource_manager_unregister_file_wPtr = _lookup<
          ffi.NativeFunction<
              ffi.Int32 Function(
                  ffi.Pointer<ma_resource_manager>, ffi.Pointer<ffi.WChar>)>>(
      'ma_resource_manager_unregister_file_w');
  late final _ma_resource_manager_unregister_file_w =
      _ma_resource_manager_unregister_file_wPtr.asFunction<
          int Function(ffi.Pointer<ma_resource_manager>,
              ffi.Pointer<ffi.WChar>)>(isLeaf: true);

  /// General Library Documentation Undocument By General Corporation & Global Corporation & General Developer
  int ma_resource_manager_unregister_data(
    ffi.Pointer<ma_resource_manager> pResourceManager,
    ffi.Pointer<ffi.Char> pName,
  ) {
    return _ma_resource_manager_unregister_data(
      pResourceManager,
      pName,
    );
  }

  late final _ma_resource_manager_unregister_dataPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int32 Function(ffi.Pointer<ma_resource_manager>,
              ffi.Pointer<ffi.Char>)>>('ma_resource_manager_unregister_data');
  late final _ma_resource_manager_unregister_data =
      _ma_resource_manager_unregister_dataPtr.asFunction<
          int Function(ffi.Pointer<ma_resource_manager>,
              ffi.Pointer<ffi.Char>)>(isLeaf: true);

  /// General Library Documentation Undocument By General Corporation & Global Corporation & General Developer
  int ma_resource_manager_unregister_data_w(
    ffi.Pointer<ma_resource_manager> pResourceManager,
    ffi.Pointer<ffi.WChar> pName,
  ) {
    return _ma_resource_manager_unregister_data_w(
      pResourceManager,
      pName,
    );
  }

  late final _ma_resource_manager_unregister_data_wPtr = _lookup<
          ffi.NativeFunction<
              ffi.Int32 Function(
                  ffi.Pointer<ma_resource_manager>, ffi.Pointer<ffi.WChar>)>>(
      'ma_resource_manager_unregister_data_w');
  late final _ma_resource_manager_unregister_data_w =
      _ma_resource_manager_unregister_data_wPtr.asFunction<
          int Function(ffi.Pointer<ma_resource_manager>,
              ffi.Pointer<ffi.WChar>)>(isLeaf: true);

  /// General Library Documentation Undocument By General Corporation & Global Corporation & General Developer
  int ma_resource_manager_data_buffer_init_ex(
    ffi.Pointer<ma_resource_manager> pResourceManager,
    ffi.Pointer<ma_resource_manager_data_source_config> pConfig,
    ffi.Pointer<ma_resource_manager_data_buffer> pDataBuffer,
  ) {
    return _ma_resource_manager_data_buffer_init_ex(
      pResourceManager,
      pConfig,
      pDataBuffer,
    );
  }

  late final _ma_resource_manager_data_buffer_init_exPtr = _lookup<
          ffi.NativeFunction<
              ffi.Int32 Function(
                  ffi.Pointer<ma_resource_manager>,
                  ffi.Pointer<ma_resource_manager_data_source_config>,
                  ffi.Pointer<ma_resource_manager_data_buffer>)>>(
      'ma_resource_manager_data_buffer_init_ex');
  late final _ma_resource_manager_data_buffer_init_ex =
      _ma_resource_manager_data_buffer_init_exPtr.asFunction<
          int Function(
              ffi.Pointer<ma_resource_manager>,
              ffi.Pointer<ma_resource_manager_data_source_config>,
              ffi.Pointer<ma_resource_manager_data_buffer>)>(isLeaf: true);

  /// General Library Documentation Undocument By General Corporation & Global Corporation & General Developer
  int ma_resource_manager_data_buffer_init(
    ffi.Pointer<ma_resource_manager> pResourceManager,
    ffi.Pointer<ffi.Char> pFilePath,
    int flags,
    ffi.Pointer<ma_resource_manager_pipeline_notifications> pNotifications,
    ffi.Pointer<ma_resource_manager_data_buffer> pDataBuffer,
  ) {
    return _ma_resource_manager_data_buffer_init(
      pResourceManager,
      pFilePath,
      flags,
      pNotifications,
      pDataBuffer,
    );
  }

  late final _ma_resource_manager_data_buffer_initPtr = _lookup<
          ffi.NativeFunction<
              ffi.Int32 Function(
                  ffi.Pointer<ma_resource_manager>,
                  ffi.Pointer<ffi.Char>,
                  ma_uint32,
                  ffi.Pointer<ma_resource_manager_pipeline_notifications>,
                  ffi.Pointer<ma_resource_manager_data_buffer>)>>(
      'ma_resource_manager_data_buffer_init');
  late final _ma_resource_manager_data_buffer_init =
      _ma_resource_manager_data_buffer_initPtr.asFunction<
          int Function(
              ffi.Pointer<ma_resource_manager>,
              ffi.Pointer<ffi.Char>,
              int,
              ffi.Pointer<ma_resource_manager_pipeline_notifications>,
              ffi.Pointer<ma_resource_manager_data_buffer>)>(isLeaf: true);

  /// General Library Documentation Undocument By General Corporation & Global Corporation & General Developer
  int ma_resource_manager_data_buffer_init_w(
    ffi.Pointer<ma_resource_manager> pResourceManager,
    ffi.Pointer<ffi.WChar> pFilePath,
    int flags,
    ffi.Pointer<ma_resource_manager_pipeline_notifications> pNotifications,
    ffi.Pointer<ma_resource_manager_data_buffer> pDataBuffer,
  ) {
    return _ma_resource_manager_data_buffer_init_w(
      pResourceManager,
      pFilePath,
      flags,
      pNotifications,
      pDataBuffer,
    );
  }

  late final _ma_resource_manager_data_buffer_init_wPtr = _lookup<
          ffi.NativeFunction<
              ffi.Int32 Function(
                  ffi.Pointer<ma_resource_manager>,
                  ffi.Pointer<ffi.WChar>,
                  ma_uint32,
                  ffi.Pointer<ma_resource_manager_pipeline_notifications>,
                  ffi.Pointer<ma_resource_manager_data_buffer>)>>(
      'ma_resource_manager_data_buffer_init_w');
  late final _ma_resource_manager_data_buffer_init_w =
      _ma_resource_manager_data_buffer_init_wPtr.asFunction<
          int Function(
              ffi.Pointer<ma_resource_manager>,
              ffi.Pointer<ffi.WChar>,
              int,
              ffi.Pointer<ma_resource_manager_pipeline_notifications>,
              ffi.Pointer<ma_resource_manager_data_buffer>)>(isLeaf: true);

  /// General Library Documentation Undocument By General Corporation & Global Corporation & General Developer
  int ma_resource_manager_data_buffer_init_copy(
    ffi.Pointer<ma_resource_manager> pResourceManager,
    ffi.Pointer<ma_resource_manager_data_buffer> pExistingDataBuffer,
    ffi.Pointer<ma_resource_manager_data_buffer> pDataBuffer,
  ) {
    return _ma_resource_manager_data_buffer_init_copy(
      pResourceManager,
      pExistingDataBuffer,
      pDataBuffer,
    );
  }

  late final _ma_resource_manager_data_buffer_init_copyPtr = _lookup<
          ffi.NativeFunction<
              ffi.Int32 Function(
                  ffi.Pointer<ma_resource_manager>,
                  ffi.Pointer<ma_resource_manager_data_buffer>,
                  ffi.Pointer<ma_resource_manager_data_buffer>)>>(
      'ma_resource_manager_data_buffer_init_copy');
  late final _ma_resource_manager_data_buffer_init_copy =
      _ma_resource_manager_data_buffer_init_copyPtr.asFunction<
          int Function(
              ffi.Pointer<ma_resource_manager>,
              ffi.Pointer<ma_resource_manager_data_buffer>,
              ffi.Pointer<ma_resource_manager_data_buffer>)>(isLeaf: true);

  /// General Library Documentation Undocument By General Corporation & Global Corporation & General Developer
  int ma_resource_manager_data_buffer_uninit(
    ffi.Pointer<ma_resource_manager_data_buffer> pDataBuffer,
  ) {
    return _ma_resource_manager_data_buffer_uninit(
      pDataBuffer,
    );
  }

  late final _ma_resource_manager_data_buffer_uninitPtr = _lookup<
          ffi.NativeFunction<
              ffi.Int32 Function(
                  ffi.Pointer<ma_resource_manager_data_buffer>)>>(
      'ma_resource_manager_data_buffer_uninit');
  late final _ma_resource_manager_data_buffer_uninit =
      _ma_resource_manager_data_buffer_uninitPtr.asFunction<
          int Function(
              ffi.Pointer<ma_resource_manager_data_buffer>)>(isLeaf: true);

  /// General Library Documentation Undocument By General Corporation & Global Corporation & General Developer
  int ma_resource_manager_data_buffer_read_pcm_frames(
    ffi.Pointer<ma_resource_manager_data_buffer> pDataBuffer,
    ffi.Pointer<ffi.Void> pFramesOut,
    int frameCount,
    ffi.Pointer<ma_uint64> pFramesRead,
  ) {
    return _ma_resource_manager_data_buffer_read_pcm_frames(
      pDataBuffer,
      pFramesOut,
      frameCount,
      pFramesRead,
    );
  }

  late final _ma_resource_manager_data_buffer_read_pcm_framesPtr = _lookup<
          ffi.NativeFunction<
              ffi.Int32 Function(ffi.Pointer<ma_resource_manager_data_buffer>,
                  ffi.Pointer<ffi.Void>, ma_uint64, ffi.Pointer<ma_uint64>)>>(
      'ma_resource_manager_data_buffer_read_pcm_frames');
  late final _ma_resource_manager_data_buffer_read_pcm_frames =
      _ma_resource_manager_data_buffer_read_pcm_framesPtr.asFunction<
          int Function(
              ffi.Pointer<ma_resource_manager_data_buffer>,
              ffi.Pointer<ffi.Void>,
              int,
              ffi.Pointer<ma_uint64>)>(isLeaf: true);

  /// General Library Documentation Undocument By General Corporation & Global Corporation & General Developer
  int ma_resource_manager_data_buffer_seek_to_pcm_frame(
    ffi.Pointer<ma_resource_manager_data_buffer> pDataBuffer,
    int frameIndex,
  ) {
    return _ma_resource_manager_data_buffer_seek_to_pcm_frame(
      pDataBuffer,
      frameIndex,
    );
  }

  late final _ma_resource_manager_data_buffer_seek_to_pcm_framePtr = _lookup<
      ffi.NativeFunction<
          ffi.Int32 Function(ffi.Pointer<ma_resource_manager_data_buffer>,
              ma_uint64)>>('ma_resource_manager_data_buffer_seek_to_pcm_frame');
  late final _ma_resource_manager_data_buffer_seek_to_pcm_frame =
      _ma_resource_manager_data_buffer_seek_to_pcm_framePtr.asFunction<
          int Function(
              ffi.Pointer<ma_resource_manager_data_buffer>, int)>(isLeaf: true);

  /// General Library Documentation Undocument By General Corporation & Global Corporation & General Developer
  int ma_resource_manager_data_buffer_get_data_format(
    ffi.Pointer<ma_resource_manager_data_buffer> pDataBuffer,
    ffi.Pointer<ffi.Int32> pFormat,
    ffi.Pointer<ma_uint32> pChannels,
    ffi.Pointer<ma_uint32> pSampleRate,
    ffi.Pointer<ma_channel> pChannelMap,
    int channelMapCap,
  ) {
    return _ma_resource_manager_data_buffer_get_data_format(
      pDataBuffer,
      pFormat,
      pChannels,
      pSampleRate,
      pChannelMap,
      channelMapCap,
    );
  }

  late final _ma_resource_manager_data_buffer_get_data_formatPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int32 Function(
              ffi.Pointer<ma_resource_manager_data_buffer>,
              ffi.Pointer<ffi.Int32>,
              ffi.Pointer<ma_uint32>,
              ffi.Pointer<ma_uint32>,
              ffi.Pointer<ma_channel>,
              ffi.Size)>>('ma_resource_manager_data_buffer_get_data_format');
  late final _ma_resource_manager_data_buffer_get_data_format =
      _ma_resource_manager_data_buffer_get_data_formatPtr.asFunction<
          int Function(
              ffi.Pointer<ma_resource_manager_data_buffer>,
              ffi.Pointer<ffi.Int32>,
              ffi.Pointer<ma_uint32>,
              ffi.Pointer<ma_uint32>,
              ffi.Pointer<ma_channel>,
              int)>(isLeaf: true);

  /// General Library Documentation Undocument By General Corporation & Global Corporation & General Developer
  int ma_resource_manager_data_buffer_get_cursor_in_pcm_frames(
    ffi.Pointer<ma_resource_manager_data_buffer> pDataBuffer,
    ffi.Pointer<ma_uint64> pCursor,
  ) {
    return _ma_resource_manager_data_buffer_get_cursor_in_pcm_frames(
      pDataBuffer,
      pCursor,
    );
  }

  late final _ma_resource_manager_data_buffer_get_cursor_in_pcm_framesPtr =
      _lookup<
              ffi.NativeFunction<
                  ffi.Int32 Function(
                      ffi.Pointer<ma_resource_manager_data_buffer>,
                      ffi.Pointer<ma_uint64>)>>(
          'ma_resource_manager_data_buffer_get_cursor_in_pcm_frames');
  late final _ma_resource_manager_data_buffer_get_cursor_in_pcm_frames =
      _ma_resource_manager_data_buffer_get_cursor_in_pcm_framesPtr.asFunction<
          int Function(ffi.Pointer<ma_resource_manager_data_buffer>,
              ffi.Pointer<ma_uint64>)>(isLeaf: true);

  /// General Library Documentation Undocument By General Corporation & Global Corporation & General Developer
  int ma_resource_manager_data_buffer_get_length_in_pcm_frames(
    ffi.Pointer<ma_resource_manager_data_buffer> pDataBuffer,
    ffi.Pointer<ma_uint64> pLength,
  ) {
    return _ma_resource_manager_data_buffer_get_length_in_pcm_frames(
      pDataBuffer,
      pLength,
    );
  }

  late final _ma_resource_manager_data_buffer_get_length_in_pcm_framesPtr =
      _lookup<
              ffi.NativeFunction<
                  ffi.Int32 Function(
                      ffi.Pointer<ma_resource_manager_data_buffer>,
                      ffi.Pointer<ma_uint64>)>>(
          'ma_resource_manager_data_buffer_get_length_in_pcm_frames');
  late final _ma_resource_manager_data_buffer_get_length_in_pcm_frames =
      _ma_resource_manager_data_buffer_get_length_in_pcm_framesPtr.asFunction<
          int Function(ffi.Pointer<ma_resource_manager_data_buffer>,
              ffi.Pointer<ma_uint64>)>(isLeaf: true);

  /// General Library Documentation Undocument By General Corporation & Global Corporation & General Developer
  int ma_resource_manager_data_buffer_result(
    ffi.Pointer<ma_resource_manager_data_buffer> pDataBuffer,
  ) {
    return _ma_resource_manager_data_buffer_result(
      pDataBuffer,
    );
  }

  late final _ma_resource_manager_data_buffer_resultPtr = _lookup<
          ffi.NativeFunction<
              ffi.Int32 Function(
                  ffi.Pointer<ma_resource_manager_data_buffer>)>>(
      'ma_resource_manager_data_buffer_result');
  late final _ma_resource_manager_data_buffer_result =
      _ma_resource_manager_data_buffer_resultPtr.asFunction<
          int Function(
              ffi.Pointer<ma_resource_manager_data_buffer>)>(isLeaf: true);

  /// General Library Documentation Undocument By General Corporation & Global Corporation & General Developer
  int ma_resource_manager_data_buffer_set_looping(
    ffi.Pointer<ma_resource_manager_data_buffer> pDataBuffer,
    int isLooping,
  ) {
    return _ma_resource_manager_data_buffer_set_looping(
      pDataBuffer,
      isLooping,
    );
  }

  late final _ma_resource_manager_data_buffer_set_loopingPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int32 Function(ffi.Pointer<ma_resource_manager_data_buffer>,
              ma_bool32)>>('ma_resource_manager_data_buffer_set_looping');
  late final _ma_resource_manager_data_buffer_set_looping =
      _ma_resource_manager_data_buffer_set_loopingPtr.asFunction<
          int Function(
              ffi.Pointer<ma_resource_manager_data_buffer>, int)>(isLeaf: true);

  /// General Library Documentation Undocument By General Corporation & Global Corporation & General Developer
  int ma_resource_manager_data_buffer_is_looping(
    ffi.Pointer<ma_resource_manager_data_buffer> pDataBuffer,
  ) {
    return _ma_resource_manager_data_buffer_is_looping(
      pDataBuffer,
    );
  }

  late final _ma_resource_manager_data_buffer_is_loopingPtr = _lookup<
          ffi.NativeFunction<
              ma_bool32 Function(
                  ffi.Pointer<ma_resource_manager_data_buffer>)>>(
      'ma_resource_manager_data_buffer_is_looping');
  late final _ma_resource_manager_data_buffer_is_looping =
      _ma_resource_manager_data_buffer_is_loopingPtr.asFunction<
          int Function(
              ffi.Pointer<ma_resource_manager_data_buffer>)>(isLeaf: true);

  /// General Library Documentation Undocument By General Corporation & Global Corporation & General Developer
  int ma_resource_manager_data_buffer_get_available_frames(
    ffi.Pointer<ma_resource_manager_data_buffer> pDataBuffer,
    ffi.Pointer<ma_uint64> pAvailableFrames,
  ) {
    return _ma_resource_manager_data_buffer_get_available_frames(
      pDataBuffer,
      pAvailableFrames,
    );
  }

  late final _ma_resource_manager_data_buffer_get_available_framesPtr = _lookup<
          ffi.NativeFunction<
              ffi.Int32 Function(ffi.Pointer<ma_resource_manager_data_buffer>,
                  ffi.Pointer<ma_uint64>)>>(
      'ma_resource_manager_data_buffer_get_available_frames');
  late final _ma_resource_manager_data_buffer_get_available_frames =
      _ma_resource_manager_data_buffer_get_available_framesPtr.asFunction<
          int Function(ffi.Pointer<ma_resource_manager_data_buffer>,
              ffi.Pointer<ma_uint64>)>(isLeaf: true);

  /// General Library Documentation Undocument By General Corporation & Global Corporation & General Developer
  int ma_resource_manager_data_stream_init_ex(
    ffi.Pointer<ma_resource_manager> pResourceManager,
    ffi.Pointer<ma_resource_manager_data_source_config> pConfig,
    ffi.Pointer<ma_resource_manager_data_stream> pDataStream,
  ) {
    return _ma_resource_manager_data_stream_init_ex(
      pResourceManager,
      pConfig,
      pDataStream,
    );
  }

  late final _ma_resource_manager_data_stream_init_exPtr = _lookup<
          ffi.NativeFunction<
              ffi.Int32 Function(
                  ffi.Pointer<ma_resource_manager>,
                  ffi.Pointer<ma_resource_manager_data_source_config>,
                  ffi.Pointer<ma_resource_manager_data_stream>)>>(
      'ma_resource_manager_data_stream_init_ex');
  late final _ma_resource_manager_data_stream_init_ex =
      _ma_resource_manager_data_stream_init_exPtr.asFunction<
          int Function(
              ffi.Pointer<ma_resource_manager>,
              ffi.Pointer<ma_resource_manager_data_source_config>,
              ffi.Pointer<ma_resource_manager_data_stream>)>(isLeaf: true);

  /// General Library Documentation Undocument By General Corporation & Global Corporation & General Developer
  int ma_resource_manager_data_stream_init(
    ffi.Pointer<ma_resource_manager> pResourceManager,
    ffi.Pointer<ffi.Char> pFilePath,
    int flags,
    ffi.Pointer<ma_resource_manager_pipeline_notifications> pNotifications,
    ffi.Pointer<ma_resource_manager_data_stream> pDataStream,
  ) {
    return _ma_resource_manager_data_stream_init(
      pResourceManager,
      pFilePath,
      flags,
      pNotifications,
      pDataStream,
    );
  }

  late final _ma_resource_manager_data_stream_initPtr = _lookup<
          ffi.NativeFunction<
              ffi.Int32 Function(
                  ffi.Pointer<ma_resource_manager>,
                  ffi.Pointer<ffi.Char>,
                  ma_uint32,
                  ffi.Pointer<ma_resource_manager_pipeline_notifications>,
                  ffi.Pointer<ma_resource_manager_data_stream>)>>(
      'ma_resource_manager_data_stream_init');
  late final _ma_resource_manager_data_stream_init =
      _ma_resource_manager_data_stream_initPtr.asFunction<
          int Function(
              ffi.Pointer<ma_resource_manager>,
              ffi.Pointer<ffi.Char>,
              int,
              ffi.Pointer<ma_resource_manager_pipeline_notifications>,
              ffi.Pointer<ma_resource_manager_data_stream>)>(isLeaf: true);

  /// General Library Documentation Undocument By General Corporation & Global Corporation & General Developer
  int ma_resource_manager_data_stream_init_w(
    ffi.Pointer<ma_resource_manager> pResourceManager,
    ffi.Pointer<ffi.WChar> pFilePath,
    int flags,
    ffi.Pointer<ma_resource_manager_pipeline_notifications> pNotifications,
    ffi.Pointer<ma_resource_manager_data_stream> pDataStream,
  ) {
    return _ma_resource_manager_data_stream_init_w(
      pResourceManager,
      pFilePath,
      flags,
      pNotifications,
      pDataStream,
    );
  }

  late final _ma_resource_manager_data_stream_init_wPtr = _lookup<
          ffi.NativeFunction<
              ffi.Int32 Function(
                  ffi.Pointer<ma_resource_manager>,
                  ffi.Pointer<ffi.WChar>,
                  ma_uint32,
                  ffi.Pointer<ma_resource_manager_pipeline_notifications>,
                  ffi.Pointer<ma_resource_manager_data_stream>)>>(
      'ma_resource_manager_data_stream_init_w');
  late final _ma_resource_manager_data_stream_init_w =
      _ma_resource_manager_data_stream_init_wPtr.asFunction<
          int Function(
              ffi.Pointer<ma_resource_manager>,
              ffi.Pointer<ffi.WChar>,
              int,
              ffi.Pointer<ma_resource_manager_pipeline_notifications>,
              ffi.Pointer<ma_resource_manager_data_stream>)>(isLeaf: true);

  /// General Library Documentation Undocument By General Corporation & Global Corporation & General Developer
  int ma_resource_manager_data_stream_uninit(
    ffi.Pointer<ma_resource_manager_data_stream> pDataStream,
  ) {
    return _ma_resource_manager_data_stream_uninit(
      pDataStream,
    );
  }

  late final _ma_resource_manager_data_stream_uninitPtr = _lookup<
          ffi.NativeFunction<
              ffi.Int32 Function(
                  ffi.Pointer<ma_resource_manager_data_stream>)>>(
      'ma_resource_manager_data_stream_uninit');
  late final _ma_resource_manager_data_stream_uninit =
      _ma_resource_manager_data_stream_uninitPtr.asFunction<
          int Function(
              ffi.Pointer<ma_resource_manager_data_stream>)>(isLeaf: true);

  /// General Library Documentation Undocument By General Corporation & Global Corporation & General Developer
  int ma_resource_manager_data_stream_read_pcm_frames(
    ffi.Pointer<ma_resource_manager_data_stream> pDataStream,
    ffi.Pointer<ffi.Void> pFramesOut,
    int frameCount,
    ffi.Pointer<ma_uint64> pFramesRead,
  ) {
    return _ma_resource_manager_data_stream_read_pcm_frames(
      pDataStream,
      pFramesOut,
      frameCount,
      pFramesRead,
    );
  }

  late final _ma_resource_manager_data_stream_read_pcm_framesPtr = _lookup<
          ffi.NativeFunction<
              ffi.Int32 Function(ffi.Pointer<ma_resource_manager_data_stream>,
                  ffi.Pointer<ffi.Void>, ma_uint64, ffi.Pointer<ma_uint64>)>>(
      'ma_resource_manager_data_stream_read_pcm_frames');
  late final _ma_resource_manager_data_stream_read_pcm_frames =
      _ma_resource_manager_data_stream_read_pcm_framesPtr.asFunction<
          int Function(
              ffi.Pointer<ma_resource_manager_data_stream>,
              ffi.Pointer<ffi.Void>,
              int,
              ffi.Pointer<ma_uint64>)>(isLeaf: true);

  /// General Library Documentation Undocument By General Corporation & Global Corporation & General Developer
  int ma_resource_manager_data_stream_seek_to_pcm_frame(
    ffi.Pointer<ma_resource_manager_data_stream> pDataStream,
    int frameIndex,
  ) {
    return _ma_resource_manager_data_stream_seek_to_pcm_frame(
      pDataStream,
      frameIndex,
    );
  }

  late final _ma_resource_manager_data_stream_seek_to_pcm_framePtr = _lookup<
      ffi.NativeFunction<
          ffi.Int32 Function(ffi.Pointer<ma_resource_manager_data_stream>,
              ma_uint64)>>('ma_resource_manager_data_stream_seek_to_pcm_frame');
  late final _ma_resource_manager_data_stream_seek_to_pcm_frame =
      _ma_resource_manager_data_stream_seek_to_pcm_framePtr.asFunction<
          int Function(
              ffi.Pointer<ma_resource_manager_data_stream>, int)>(isLeaf: true);

  /// General Library Documentation Undocument By General Corporation & Global Corporation & General Developer
  int ma_resource_manager_data_stream_get_data_format(
    ffi.Pointer<ma_resource_manager_data_stream> pDataStream,
    ffi.Pointer<ffi.Int32> pFormat,
    ffi.Pointer<ma_uint32> pChannels,
    ffi.Pointer<ma_uint32> pSampleRate,
    ffi.Pointer<ma_channel> pChannelMap,
    int channelMapCap,
  ) {
    return _ma_resource_manager_data_stream_get_data_format(
      pDataStream,
      pFormat,
      pChannels,
      pSampleRate,
      pChannelMap,
      channelMapCap,
    );
  }

  late final _ma_resource_manager_data_stream_get_data_formatPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int32 Function(
              ffi.Pointer<ma_resource_manager_data_stream>,
              ffi.Pointer<ffi.Int32>,
              ffi.Pointer<ma_uint32>,
              ffi.Pointer<ma_uint32>,
              ffi.Pointer<ma_channel>,
              ffi.Size)>>('ma_resource_manager_data_stream_get_data_format');
  late final _ma_resource_manager_data_stream_get_data_format =
      _ma_resource_manager_data_stream_get_data_formatPtr.asFunction<
          int Function(
              ffi.Pointer<ma_resource_manager_data_stream>,
              ffi.Pointer<ffi.Int32>,
              ffi.Pointer<ma_uint32>,
              ffi.Pointer<ma_uint32>,
              ffi.Pointer<ma_channel>,
              int)>(isLeaf: true);

  /// General Library Documentation Undocument By General Corporation & Global Corporation & General Developer
  int ma_resource_manager_data_stream_get_cursor_in_pcm_frames(
    ffi.Pointer<ma_resource_manager_data_stream> pDataStream,
    ffi.Pointer<ma_uint64> pCursor,
  ) {
    return _ma_resource_manager_data_stream_get_cursor_in_pcm_frames(
      pDataStream,
      pCursor,
    );
  }

  late final _ma_resource_manager_data_stream_get_cursor_in_pcm_framesPtr =
      _lookup<
              ffi.NativeFunction<
                  ffi.Int32 Function(
                      ffi.Pointer<ma_resource_manager_data_stream>,
                      ffi.Pointer<ma_uint64>)>>(
          'ma_resource_manager_data_stream_get_cursor_in_pcm_frames');
  late final _ma_resource_manager_data_stream_get_cursor_in_pcm_frames =
      _ma_resource_manager_data_stream_get_cursor_in_pcm_framesPtr.asFunction<
          int Function(ffi.Pointer<ma_resource_manager_data_stream>,
              ffi.Pointer<ma_uint64>)>(isLeaf: true);

  /// General Library Documentation Undocument By General Corporation & Global Corporation & General Developer
  int ma_resource_manager_data_stream_get_length_in_pcm_frames(
    ffi.Pointer<ma_resource_manager_data_stream> pDataStream,
    ffi.Pointer<ma_uint64> pLength,
  ) {
    return _ma_resource_manager_data_stream_get_length_in_pcm_frames(
      pDataStream,
      pLength,
    );
  }

  late final _ma_resource_manager_data_stream_get_length_in_pcm_framesPtr =
      _lookup<
              ffi.NativeFunction<
                  ffi.Int32 Function(
                      ffi.Pointer<ma_resource_manager_data_stream>,
                      ffi.Pointer<ma_uint64>)>>(
          'ma_resource_manager_data_stream_get_length_in_pcm_frames');
  late final _ma_resource_manager_data_stream_get_length_in_pcm_frames =
      _ma_resource_manager_data_stream_get_length_in_pcm_framesPtr.asFunction<
          int Function(ffi.Pointer<ma_resource_manager_data_stream>,
              ffi.Pointer<ma_uint64>)>(isLeaf: true);

  /// General Library Documentation Undocument By General Corporation & Global Corporation & General Developer
  int ma_resource_manager_data_stream_result(
    ffi.Pointer<ma_resource_manager_data_stream> pDataStream,
  ) {
    return _ma_resource_manager_data_stream_result(
      pDataStream,
    );
  }

  late final _ma_resource_manager_data_stream_resultPtr = _lookup<
          ffi.NativeFunction<
              ffi.Int32 Function(
                  ffi.Pointer<ma_resource_manager_data_stream>)>>(
      'ma_resource_manager_data_stream_result');
  late final _ma_resource_manager_data_stream_result =
      _ma_resource_manager_data_stream_resultPtr.asFunction<
          int Function(
              ffi.Pointer<ma_resource_manager_data_stream>)>(isLeaf: true);

  /// General Library Documentation Undocument By General Corporation & Global Corporation & General Developer
  int ma_resource_manager_data_stream_set_looping(
    ffi.Pointer<ma_resource_manager_data_stream> pDataStream,
    int isLooping,
  ) {
    return _ma_resource_manager_data_stream_set_looping(
      pDataStream,
      isLooping,
    );
  }

  late final _ma_resource_manager_data_stream_set_loopingPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int32 Function(ffi.Pointer<ma_resource_manager_data_stream>,
              ma_bool32)>>('ma_resource_manager_data_stream_set_looping');
  late final _ma_resource_manager_data_stream_set_looping =
      _ma_resource_manager_data_stream_set_loopingPtr.asFunction<
          int Function(
              ffi.Pointer<ma_resource_manager_data_stream>, int)>(isLeaf: true);

  /// General Library Documentation Undocument By General Corporation & Global Corporation & General Developer
  int ma_resource_manager_data_stream_is_looping(
    ffi.Pointer<ma_resource_manager_data_stream> pDataStream,
  ) {
    return _ma_resource_manager_data_stream_is_looping(
      pDataStream,
    );
  }

  late final _ma_resource_manager_data_stream_is_loopingPtr = _lookup<
          ffi.NativeFunction<
              ma_bool32 Function(
                  ffi.Pointer<ma_resource_manager_data_stream>)>>(
      'ma_resource_manager_data_stream_is_looping');
  late final _ma_resource_manager_data_stream_is_looping =
      _ma_resource_manager_data_stream_is_loopingPtr.asFunction<
          int Function(
              ffi.Pointer<ma_resource_manager_data_stream>)>(isLeaf: true);

  /// General Library Documentation Undocument By General Corporation & Global Corporation & General Developer
  int ma_resource_manager_data_stream_get_available_frames(
    ffi.Pointer<ma_resource_manager_data_stream> pDataStream,
    ffi.Pointer<ma_uint64> pAvailableFrames,
  ) {
    return _ma_resource_manager_data_stream_get_available_frames(
      pDataStream,
      pAvailableFrames,
    );
  }

  late final _ma_resource_manager_data_stream_get_available_framesPtr = _lookup<
          ffi.NativeFunction<
              ffi.Int32 Function(ffi.Pointer<ma_resource_manager_data_stream>,
                  ffi.Pointer<ma_uint64>)>>(
      'ma_resource_manager_data_stream_get_available_frames');
  late final _ma_resource_manager_data_stream_get_available_frames =
      _ma_resource_manager_data_stream_get_available_framesPtr.asFunction<
          int Function(ffi.Pointer<ma_resource_manager_data_stream>,
              ffi.Pointer<ma_uint64>)>(isLeaf: true);

  /// General Library Documentation Undocument By General Corporation & Global Corporation & General Developer
  int ma_resource_manager_data_source_init_ex(
    ffi.Pointer<ma_resource_manager> pResourceManager,
    ffi.Pointer<ma_resource_manager_data_source_config> pConfig,
    ffi.Pointer<ma_resource_manager_data_source> pDataSource,
  ) {
    return _ma_resource_manager_data_source_init_ex(
      pResourceManager,
      pConfig,
      pDataSource,
    );
  }

  late final _ma_resource_manager_data_source_init_exPtr = _lookup<
          ffi.NativeFunction<
              ffi.Int32 Function(
                  ffi.Pointer<ma_resource_manager>,
                  ffi.Pointer<ma_resource_manager_data_source_config>,
                  ffi.Pointer<ma_resource_manager_data_source>)>>(
      'ma_resource_manager_data_source_init_ex');
  late final _ma_resource_manager_data_source_init_ex =
      _ma_resource_manager_data_source_init_exPtr.asFunction<
          int Function(
              ffi.Pointer<ma_resource_manager>,
              ffi.Pointer<ma_resource_manager_data_source_config>,
              ffi.Pointer<ma_resource_manager_data_source>)>(isLeaf: true);

  /// General Library Documentation Undocument By General Corporation & Global Corporation & General Developer
  int ma_resource_manager_data_source_init(
    ffi.Pointer<ma_resource_manager> pResourceManager,
    ffi.Pointer<ffi.Char> pName,
    int flags,
    ffi.Pointer<ma_resource_manager_pipeline_notifications> pNotifications,
    ffi.Pointer<ma_resource_manager_data_source> pDataSource,
  ) {
    return _ma_resource_manager_data_source_init(
      pResourceManager,
      pName,
      flags,
      pNotifications,
      pDataSource,
    );
  }

  late final _ma_resource_manager_data_source_initPtr = _lookup<
          ffi.NativeFunction<
              ffi.Int32 Function(
                  ffi.Pointer<ma_resource_manager>,
                  ffi.Pointer<ffi.Char>,
                  ma_uint32,
                  ffi.Pointer<ma_resource_manager_pipeline_notifications>,
                  ffi.Pointer<ma_resource_manager_data_source>)>>(
      'ma_resource_manager_data_source_init');
  late final _ma_resource_manager_data_source_init =
      _ma_resource_manager_data_source_initPtr.asFunction<
          int Function(
              ffi.Pointer<ma_resource_manager>,
              ffi.Pointer<ffi.Char>,
              int,
              ffi.Pointer<ma_resource_manager_pipeline_notifications>,
              ffi.Pointer<ma_resource_manager_data_source>)>(isLeaf: true);

  /// General Library Documentation Undocument By General Corporation & Global Corporation & General Developer
  int ma_resource_manager_data_source_init_w(
    ffi.Pointer<ma_resource_manager> pResourceManager,
    ffi.Pointer<ffi.WChar> pName,
    int flags,
    ffi.Pointer<ma_resource_manager_pipeline_notifications> pNotifications,
    ffi.Pointer<ma_resource_manager_data_source> pDataSource,
  ) {
    return _ma_resource_manager_data_source_init_w(
      pResourceManager,
      pName,
      flags,
      pNotifications,
      pDataSource,
    );
  }

  late final _ma_resource_manager_data_source_init_wPtr = _lookup<
          ffi.NativeFunction<
              ffi.Int32 Function(
                  ffi.Pointer<ma_resource_manager>,
                  ffi.Pointer<ffi.WChar>,
                  ma_uint32,
                  ffi.Pointer<ma_resource_manager_pipeline_notifications>,
                  ffi.Pointer<ma_resource_manager_data_source>)>>(
      'ma_resource_manager_data_source_init_w');
  late final _ma_resource_manager_data_source_init_w =
      _ma_resource_manager_data_source_init_wPtr.asFunction<
          int Function(
              ffi.Pointer<ma_resource_manager>,
              ffi.Pointer<ffi.WChar>,
              int,
              ffi.Pointer<ma_resource_manager_pipeline_notifications>,
              ffi.Pointer<ma_resource_manager_data_source>)>(isLeaf: true);

  /// General Library Documentation Undocument By General Corporation & Global Corporation & General Developer
  int ma_resource_manager_data_source_init_copy(
    ffi.Pointer<ma_resource_manager> pResourceManager,
    ffi.Pointer<ma_resource_manager_data_source> pExistingDataSource,
    ffi.Pointer<ma_resource_manager_data_source> pDataSource,
  ) {
    return _ma_resource_manager_data_source_init_copy(
      pResourceManager,
      pExistingDataSource,
      pDataSource,
    );
  }

  late final _ma_resource_manager_data_source_init_copyPtr = _lookup<
          ffi.NativeFunction<
              ffi.Int32 Function(
                  ffi.Pointer<ma_resource_manager>,
                  ffi.Pointer<ma_resource_manager_data_source>,
                  ffi.Pointer<ma_resource_manager_data_source>)>>(
      'ma_resource_manager_data_source_init_copy');
  late final _ma_resource_manager_data_source_init_copy =
      _ma_resource_manager_data_source_init_copyPtr.asFunction<
          int Function(
              ffi.Pointer<ma_resource_manager>,
              ffi.Pointer<ma_resource_manager_data_source>,
              ffi.Pointer<ma_resource_manager_data_source>)>(isLeaf: true);

  /// General Library Documentation Undocument By General Corporation & Global Corporation & General Developer
  int ma_resource_manager_data_source_uninit(
    ffi.Pointer<ma_resource_manager_data_source> pDataSource,
  ) {
    return _ma_resource_manager_data_source_uninit(
      pDataSource,
    );
  }

  late final _ma_resource_manager_data_source_uninitPtr = _lookup<
          ffi.NativeFunction<
              ffi.Int32 Function(
                  ffi.Pointer<ma_resource_manager_data_source>)>>(
      'ma_resource_manager_data_source_uninit');
  late final _ma_resource_manager_data_source_uninit =
      _ma_resource_manager_data_source_uninitPtr.asFunction<
          int Function(
              ffi.Pointer<ma_resource_manager_data_source>)>(isLeaf: true);

  /// General Library Documentation Undocument By General Corporation & Global Corporation & General Developer
  int ma_resource_manager_data_source_read_pcm_frames(
    ffi.Pointer<ma_resource_manager_data_source> pDataSource,
    ffi.Pointer<ffi.Void> pFramesOut,
    int frameCount,
    ffi.Pointer<ma_uint64> pFramesRead,
  ) {
    return _ma_resource_manager_data_source_read_pcm_frames(
      pDataSource,
      pFramesOut,
      frameCount,
      pFramesRead,
    );
  }

  late final _ma_resource_manager_data_source_read_pcm_framesPtr = _lookup<
          ffi.NativeFunction<
              ffi.Int32 Function(ffi.Pointer<ma_resource_manager_data_source>,
                  ffi.Pointer<ffi.Void>, ma_uint64, ffi.Pointer<ma_uint64>)>>(
      'ma_resource_manager_data_source_read_pcm_frames');
  late final _ma_resource_manager_data_source_read_pcm_frames =
      _ma_resource_manager_data_source_read_pcm_framesPtr.asFunction<
          int Function(
              ffi.Pointer<ma_resource_manager_data_source>,
              ffi.Pointer<ffi.Void>,
              int,
              ffi.Pointer<ma_uint64>)>(isLeaf: true);

  /// General Library Documentation Undocument By General Corporation & Global Corporation & General Developer
  int ma_resource_manager_data_source_seek_to_pcm_frame(
    ffi.Pointer<ma_resource_manager_data_source> pDataSource,
    int frameIndex,
  ) {
    return _ma_resource_manager_data_source_seek_to_pcm_frame(
      pDataSource,
      frameIndex,
    );
  }

  late final _ma_resource_manager_data_source_seek_to_pcm_framePtr = _lookup<
      ffi.NativeFunction<
          ffi.Int32 Function(ffi.Pointer<ma_resource_manager_data_source>,
              ma_uint64)>>('ma_resource_manager_data_source_seek_to_pcm_frame');
  late final _ma_resource_manager_data_source_seek_to_pcm_frame =
      _ma_resource_manager_data_source_seek_to_pcm_framePtr.asFunction<
          int Function(
              ffi.Pointer<ma_resource_manager_data_source>, int)>(isLeaf: true);

  /// General Library Documentation Undocument By General Corporation & Global Corporation & General Developer
  int ma_resource_manager_data_source_get_data_format(
    ffi.Pointer<ma_resource_manager_data_source> pDataSource,
    ffi.Pointer<ffi.Int32> pFormat,
    ffi.Pointer<ma_uint32> pChannels,
    ffi.Pointer<ma_uint32> pSampleRate,
    ffi.Pointer<ma_channel> pChannelMap,
    int channelMapCap,
  ) {
    return _ma_resource_manager_data_source_get_data_format(
      pDataSource,
      pFormat,
      pChannels,
      pSampleRate,
      pChannelMap,
      channelMapCap,
    );
  }

  late final _ma_resource_manager_data_source_get_data_formatPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int32 Function(
              ffi.Pointer<ma_resource_manager_data_source>,
              ffi.Pointer<ffi.Int32>,
              ffi.Pointer<ma_uint32>,
              ffi.Pointer<ma_uint32>,
              ffi.Pointer<ma_channel>,
              ffi.Size)>>('ma_resource_manager_data_source_get_data_format');
  late final _ma_resource_manager_data_source_get_data_format =
      _ma_resource_manager_data_source_get_data_formatPtr.asFunction<
          int Function(
              ffi.Pointer<ma_resource_manager_data_source>,
              ffi.Pointer<ffi.Int32>,
              ffi.Pointer<ma_uint32>,
              ffi.Pointer<ma_uint32>,
              ffi.Pointer<ma_channel>,
              int)>(isLeaf: true);

  /// General Library Documentation Undocument By General Corporation & Global Corporation & General Developer
  int ma_resource_manager_data_source_get_cursor_in_pcm_frames(
    ffi.Pointer<ma_resource_manager_data_source> pDataSource,
    ffi.Pointer<ma_uint64> pCursor,
  ) {
    return _ma_resource_manager_data_source_get_cursor_in_pcm_frames(
      pDataSource,
      pCursor,
    );
  }

  late final _ma_resource_manager_data_source_get_cursor_in_pcm_framesPtr =
      _lookup<
              ffi.NativeFunction<
                  ffi.Int32 Function(
                      ffi.Pointer<ma_resource_manager_data_source>,
                      ffi.Pointer<ma_uint64>)>>(
          'ma_resource_manager_data_source_get_cursor_in_pcm_frames');
  late final _ma_resource_manager_data_source_get_cursor_in_pcm_frames =
      _ma_resource_manager_data_source_get_cursor_in_pcm_framesPtr.asFunction<
          int Function(ffi.Pointer<ma_resource_manager_data_source>,
              ffi.Pointer<ma_uint64>)>(isLeaf: true);

  /// General Library Documentation Undocument By General Corporation & Global Corporation & General Developer
  int ma_resource_manager_data_source_get_length_in_pcm_frames(
    ffi.Pointer<ma_resource_manager_data_source> pDataSource,
    ffi.Pointer<ma_uint64> pLength,
  ) {
    return _ma_resource_manager_data_source_get_length_in_pcm_frames(
      pDataSource,
      pLength,
    );
  }

  late final _ma_resource_manager_data_source_get_length_in_pcm_framesPtr =
      _lookup<
              ffi.NativeFunction<
                  ffi.Int32 Function(
                      ffi.Pointer<ma_resource_manager_data_source>,
                      ffi.Pointer<ma_uint64>)>>(
          'ma_resource_manager_data_source_get_length_in_pcm_frames');
  late final _ma_resource_manager_data_source_get_length_in_pcm_frames =
      _ma_resource_manager_data_source_get_length_in_pcm_framesPtr.asFunction<
          int Function(ffi.Pointer<ma_resource_manager_data_source>,
              ffi.Pointer<ma_uint64>)>(isLeaf: true);

  /// General Library Documentation Undocument By General Corporation & Global Corporation & General Developer
  int ma_resource_manager_data_source_result(
    ffi.Pointer<ma_resource_manager_data_source> pDataSource,
  ) {
    return _ma_resource_manager_data_source_result(
      pDataSource,
    );
  }

  late final _ma_resource_manager_data_source_resultPtr = _lookup<
          ffi.NativeFunction<
              ffi.Int32 Function(
                  ffi.Pointer<ma_resource_manager_data_source>)>>(
      'ma_resource_manager_data_source_result');
  late final _ma_resource_manager_data_source_result =
      _ma_resource_manager_data_source_resultPtr.asFunction<
          int Function(
              ffi.Pointer<ma_resource_manager_data_source>)>(isLeaf: true);

  /// General Library Documentation Undocument By General Corporation & Global Corporation & General Developer
  int ma_resource_manager_data_source_set_looping(
    ffi.Pointer<ma_resource_manager_data_source> pDataSource,
    int isLooping,
  ) {
    return _ma_resource_manager_data_source_set_looping(
      pDataSource,
      isLooping,
    );
  }

  late final _ma_resource_manager_data_source_set_loopingPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int32 Function(ffi.Pointer<ma_resource_manager_data_source>,
              ma_bool32)>>('ma_resource_manager_data_source_set_looping');
  late final _ma_resource_manager_data_source_set_looping =
      _ma_resource_manager_data_source_set_loopingPtr.asFunction<
          int Function(
              ffi.Pointer<ma_resource_manager_data_source>, int)>(isLeaf: true);

  /// General Library Documentation Undocument By General Corporation & Global Corporation & General Developer
  int ma_resource_manager_data_source_is_looping(
    ffi.Pointer<ma_resource_manager_data_source> pDataSource,
  ) {
    return _ma_resource_manager_data_source_is_looping(
      pDataSource,
    );
  }

  late final _ma_resource_manager_data_source_is_loopingPtr = _lookup<
          ffi.NativeFunction<
              ma_bool32 Function(
                  ffi.Pointer<ma_resource_manager_data_source>)>>(
      'ma_resource_manager_data_source_is_looping');
  late final _ma_resource_manager_data_source_is_looping =
      _ma_resource_manager_data_source_is_loopingPtr.asFunction<
          int Function(
              ffi.Pointer<ma_resource_manager_data_source>)>(isLeaf: true);

  /// General Library Documentation Undocument By General Corporation & Global Corporation & General Developer
  int ma_resource_manager_data_source_get_available_frames(
    ffi.Pointer<ma_resource_manager_data_source> pDataSource,
    ffi.Pointer<ma_uint64> pAvailableFrames,
  ) {
    return _ma_resource_manager_data_source_get_available_frames(
      pDataSource,
      pAvailableFrames,
    );
  }

  late final _ma_resource_manager_data_source_get_available_framesPtr = _lookup<
          ffi.NativeFunction<
              ffi.Int32 Function(ffi.Pointer<ma_resource_manager_data_source>,
                  ffi.Pointer<ma_uint64>)>>(
      'ma_resource_manager_data_source_get_available_frames');
  late final _ma_resource_manager_data_source_get_available_frames =
      _ma_resource_manager_data_source_get_available_framesPtr.asFunction<
          int Function(ffi.Pointer<ma_resource_manager_data_source>,
              ffi.Pointer<ma_uint64>)>(isLeaf: true);

  /// General Library Documentation Undocument By General Corporation & Global Corporation & General Developer
  int ma_resource_manager_post_job(
    ffi.Pointer<ma_resource_manager> pResourceManager,
    ffi.Pointer<ma_job> pJob,
  ) {
    return _ma_resource_manager_post_job(
      pResourceManager,
      pJob,
    );
  }

  late final _ma_resource_manager_post_jobPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int32 Function(ffi.Pointer<ma_resource_manager>,
              ffi.Pointer<ma_job>)>>('ma_resource_manager_post_job');
  late final _ma_resource_manager_post_job =
      _ma_resource_manager_post_jobPtr.asFunction<
          int Function(ffi.Pointer<ma_resource_manager>,
              ffi.Pointer<ma_job>)>(isLeaf: true);

  /// General Library Documentation Undocument By General Corporation & Global Corporation & General Developer
  int ma_resource_manager_post_job_quit(
    ffi.Pointer<ma_resource_manager> pResourceManager,
  ) {
    return _ma_resource_manager_post_job_quit(
      pResourceManager,
    );
  }

  late final _ma_resource_manager_post_job_quitPtr = _lookup<
          ffi.NativeFunction<
              ffi.Int32 Function(ffi.Pointer<ma_resource_manager>)>>(
      'ma_resource_manager_post_job_quit');
  late final _ma_resource_manager_post_job_quit =
      _ma_resource_manager_post_job_quitPtr
          .asFunction<int Function(ffi.Pointer<ma_resource_manager>)>(
              isLeaf: true);

  /// General Library Documentation Undocument By General Corporation & Global Corporation & General Developer
  int ma_resource_manager_next_job(
    ffi.Pointer<ma_resource_manager> pResourceManager,
    ffi.Pointer<ma_job> pJob,
  ) {
    return _ma_resource_manager_next_job(
      pResourceManager,
      pJob,
    );
  }

  late final _ma_resource_manager_next_jobPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int32 Function(ffi.Pointer<ma_resource_manager>,
              ffi.Pointer<ma_job>)>>('ma_resource_manager_next_job');
  late final _ma_resource_manager_next_job =
      _ma_resource_manager_next_jobPtr.asFunction<
          int Function(ffi.Pointer<ma_resource_manager>,
              ffi.Pointer<ma_job>)>(isLeaf: true);

  /// General Library Documentation Undocument By General Corporation & Global Corporation & General Developer
  int ma_resource_manager_process_job(
    ffi.Pointer<ma_resource_manager> pResourceManager,
    ffi.Pointer<ma_job> pJob,
  ) {
    return _ma_resource_manager_process_job(
      pResourceManager,
      pJob,
    );
  }

  late final _ma_resource_manager_process_jobPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int32 Function(ffi.Pointer<ma_resource_manager>,
              ffi.Pointer<ma_job>)>>('ma_resource_manager_process_job');
  late final _ma_resource_manager_process_job =
      _ma_resource_manager_process_jobPtr.asFunction<
          int Function(ffi.Pointer<ma_resource_manager>,
              ffi.Pointer<ma_job>)>(isLeaf: true);

  /// General Library Documentation Undocument By General Corporation & Global Corporation & General Developer
  int ma_resource_manager_process_next_job(
    ffi.Pointer<ma_resource_manager> pResourceManager,
  ) {
    return _ma_resource_manager_process_next_job(
      pResourceManager,
    );
  }

  late final _ma_resource_manager_process_next_jobPtr = _lookup<
          ffi.NativeFunction<
              ffi.Int32 Function(ffi.Pointer<ma_resource_manager>)>>(
      'ma_resource_manager_process_next_job');
  late final _ma_resource_manager_process_next_job =
      _ma_resource_manager_process_next_jobPtr
          .asFunction<int Function(ffi.Pointer<ma_resource_manager>)>(
              isLeaf: true);

  /// General Library Documentation Undocument By General Corporation & Global Corporation & General Developer
  ma_node_config ma_node_config_init() {
    return _ma_node_config_init();
  }

  late final _ma_node_config_initPtr =
      _lookup<ffi.NativeFunction<ma_node_config Function()>>(
          'ma_node_config_init');
  late final _ma_node_config_init = _ma_node_config_initPtr
      .asFunction<ma_node_config Function()>(isLeaf: true);

  /// General Library Documentation Undocument By General Corporation & Global Corporation & General Developer
  int ma_node_get_heap_size(
    ffi.Pointer<ma_node_graph> pNodeGraph,
    ffi.Pointer<ma_node_config> pConfig,
    ffi.Pointer<ffi.Size> pHeapSizeInBytes,
  ) {
    return _ma_node_get_heap_size(
      pNodeGraph,
      pConfig,
      pHeapSizeInBytes,
    );
  }

  late final _ma_node_get_heap_sizePtr = _lookup<
      ffi.NativeFunction<
          ffi.Int32 Function(
              ffi.Pointer<ma_node_graph>,
              ffi.Pointer<ma_node_config>,
              ffi.Pointer<ffi.Size>)>>('ma_node_get_heap_size');
  late final _ma_node_get_heap_size = _ma_node_get_heap_sizePtr.asFunction<
      int Function(ffi.Pointer<ma_node_graph>, ffi.Pointer<ma_node_config>,
          ffi.Pointer<ffi.Size>)>(isLeaf: true);

  /// General Library Documentation Undocument By General Corporation & Global Corporation & General Developer
  int ma_node_init_preallocated(
    ffi.Pointer<ma_node_graph> pNodeGraph,
    ffi.Pointer<ma_node_config> pConfig,
    ffi.Pointer<ffi.Void> pHeap,
    ffi.Pointer<ma_node> pNode,
  ) {
    return _ma_node_init_preallocated(
      pNodeGraph,
      pConfig,
      pHeap,
      pNode,
    );
  }

  late final _ma_node_init_preallocatedPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int32 Function(
              ffi.Pointer<ma_node_graph>,
              ffi.Pointer<ma_node_config>,
              ffi.Pointer<ffi.Void>,
              ffi.Pointer<ma_node>)>>('ma_node_init_preallocated');
  late final _ma_node_init_preallocated =
      _ma_node_init_preallocatedPtr.asFunction<
          int Function(ffi.Pointer<ma_node_graph>, ffi.Pointer<ma_node_config>,
              ffi.Pointer<ffi.Void>, ffi.Pointer<ma_node>)>(isLeaf: true);

  /// General Library Documentation Undocument By General Corporation & Global Corporation & General Developer
  int ma_node_init(
    ffi.Pointer<ma_node_graph> pNodeGraph,
    ffi.Pointer<ma_node_config> pConfig,
    ffi.Pointer<ma_allocation_callbacks> pAllocationCallbacks,
    ffi.Pointer<ma_node> pNode,
  ) {
    return _ma_node_init(
      pNodeGraph,
      pConfig,
      pAllocationCallbacks,
      pNode,
    );
  }

  late final _ma_node_initPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int32 Function(
              ffi.Pointer<ma_node_graph>,
              ffi.Pointer<ma_node_config>,
              ffi.Pointer<ma_allocation_callbacks>,
              ffi.Pointer<ma_node>)>>('ma_node_init');
  late final _ma_node_init = _ma_node_initPtr.asFunction<
      int Function(
          ffi.Pointer<ma_node_graph>,
          ffi.Pointer<ma_node_config>,
          ffi.Pointer<ma_allocation_callbacks>,
          ffi.Pointer<ma_node>)>(isLeaf: true);

  /// General Library Documentation Undocument By General Corporation & Global Corporation & General Developer
  void ma_node_uninit(
    ffi.Pointer<ma_node> pNode,
    ffi.Pointer<ma_allocation_callbacks> pAllocationCallbacks,
  ) {
    return _ma_node_uninit(
      pNode,
      pAllocationCallbacks,
    );
  }

  late final _ma_node_uninitPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Pointer<ma_node>,
              ffi.Pointer<ma_allocation_callbacks>)>>('ma_node_uninit');
  late final _ma_node_uninit = _ma_node_uninitPtr.asFunction<
      void Function(ffi.Pointer<ma_node>,
          ffi.Pointer<ma_allocation_callbacks>)>(isLeaf: true);

  /// General Library Documentation Undocument By General Corporation & Global Corporation & General Developer
  ffi.Pointer<ma_node_graph> ma_node_get_node_graph(
    ffi.Pointer<ma_node> pNode,
  ) {
    return _ma_node_get_node_graph(
      pNode,
    );
  }

  late final _ma_node_get_node_graphPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ma_node_graph> Function(
              ffi.Pointer<ma_node>)>>('ma_node_get_node_graph');
  late final _ma_node_get_node_graph = _ma_node_get_node_graphPtr
      .asFunction<ffi.Pointer<ma_node_graph> Function(ffi.Pointer<ma_node>)>(
          isLeaf: true);

  /// General Library Documentation Undocument By General Corporation & Global Corporation & General Developer
  int ma_node_get_input_bus_count(
    ffi.Pointer<ma_node> pNode,
  ) {
    return _ma_node_get_input_bus_count(
      pNode,
    );
  }

  late final _ma_node_get_input_bus_countPtr =
      _lookup<ffi.NativeFunction<ma_uint32 Function(ffi.Pointer<ma_node>)>>(
          'ma_node_get_input_bus_count');
  late final _ma_node_get_input_bus_count = _ma_node_get_input_bus_countPtr
      .asFunction<int Function(ffi.Pointer<ma_node>)>(isLeaf: true);

  /// General Library Documentation Undocument By General Corporation & Global Corporation & General Developer
  int ma_node_get_output_bus_count(
    ffi.Pointer<ma_node> pNode,
  ) {
    return _ma_node_get_output_bus_count(
      pNode,
    );
  }

  late final _ma_node_get_output_bus_countPtr =
      _lookup<ffi.NativeFunction<ma_uint32 Function(ffi.Pointer<ma_node>)>>(
          'ma_node_get_output_bus_count');
  late final _ma_node_get_output_bus_count = _ma_node_get_output_bus_countPtr
      .asFunction<int Function(ffi.Pointer<ma_node>)>(isLeaf: true);

  /// General Library Documentation Undocument By General Corporation & Global Corporation & General Developer
  int ma_node_get_input_channels(
    ffi.Pointer<ma_node> pNode,
    int inputBusIndex,
  ) {
    return _ma_node_get_input_channels(
      pNode,
      inputBusIndex,
    );
  }

  late final _ma_node_get_input_channelsPtr = _lookup<
          ffi
          .NativeFunction<ma_uint32 Function(ffi.Pointer<ma_node>, ma_uint32)>>(
      'ma_node_get_input_channels');
  late final _ma_node_get_input_channels = _ma_node_get_input_channelsPtr
      .asFunction<int Function(ffi.Pointer<ma_node>, int)>(isLeaf: true);

  /// General Library Documentation Undocument By General Corporation & Global Corporation & General Developer
  int ma_node_get_output_channels(
    ffi.Pointer<ma_node> pNode,
    int outputBusIndex,
  ) {
    return _ma_node_get_output_channels(
      pNode,
      outputBusIndex,
    );
  }

  late final _ma_node_get_output_channelsPtr = _lookup<
          ffi
          .NativeFunction<ma_uint32 Function(ffi.Pointer<ma_node>, ma_uint32)>>(
      'ma_node_get_output_channels');
  late final _ma_node_get_output_channels = _ma_node_get_output_channelsPtr
      .asFunction<int Function(ffi.Pointer<ma_node>, int)>(isLeaf: true);

  /// General Library Documentation Undocument By General Corporation & Global Corporation & General Developer
  int ma_node_attach_output_bus(
    ffi.Pointer<ma_node> pNode,
    int outputBusIndex,
    ffi.Pointer<ma_node> pOtherNode,
    int otherNodeInputBusIndex,
  ) {
    return _ma_node_attach_output_bus(
      pNode,
      outputBusIndex,
      pOtherNode,
      otherNodeInputBusIndex,
    );
  }

  late final _ma_node_attach_output_busPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int32 Function(ffi.Pointer<ma_node>, ma_uint32,
              ffi.Pointer<ma_node>, ma_uint32)>>('ma_node_attach_output_bus');
  late final _ma_node_attach_output_bus =
      _ma_node_attach_output_busPtr.asFunction<
          int Function(ffi.Pointer<ma_node>, int, ffi.Pointer<ma_node>,
              int)>(isLeaf: true);

  /// General Library Documentation Undocument By General Corporation & Global Corporation & General Developer
  int ma_node_detach_output_bus(
    ffi.Pointer<ma_node> pNode,
    int outputBusIndex,
  ) {
    return _ma_node_detach_output_bus(
      pNode,
      outputBusIndex,
    );
  }

  late final _ma_node_detach_output_busPtr = _lookup<
          ffi
          .NativeFunction<ffi.Int32 Function(ffi.Pointer<ma_node>, ma_uint32)>>(
      'ma_node_detach_output_bus');
  late final _ma_node_detach_output_bus = _ma_node_detach_output_busPtr
      .asFunction<int Function(ffi.Pointer<ma_node>, int)>(isLeaf: true);

  /// General Library Documentation Undocument By General Corporation & Global Corporation & General Developer
  int ma_node_detach_all_output_buses(
    ffi.Pointer<ma_node> pNode,
  ) {
    return _ma_node_detach_all_output_buses(
      pNode,
    );
  }

  late final _ma_node_detach_all_output_busesPtr =
      _lookup<ffi.NativeFunction<ffi.Int32 Function(ffi.Pointer<ma_node>)>>(
          'ma_node_detach_all_output_buses');
  late final _ma_node_detach_all_output_buses =
      _ma_node_detach_all_output_busesPtr
          .asFunction<int Function(ffi.Pointer<ma_node>)>(isLeaf: true);

  /// General Library Documentation Undocument By General Corporation & Global Corporation & General Developer
  int ma_node_set_output_bus_volume(
    ffi.Pointer<ma_node> pNode,
    int outputBusIndex,
    double volume,
  ) {
    return _ma_node_set_output_bus_volume(
      pNode,
      outputBusIndex,
      volume,
    );
  }

  late final _ma_node_set_output_bus_volumePtr = _lookup<
      ffi.NativeFunction<
          ffi.Int32 Function(ffi.Pointer<ma_node>, ma_uint32,
              ffi.Float)>>('ma_node_set_output_bus_volume');
  late final _ma_node_set_output_bus_volume = _ma_node_set_output_bus_volumePtr
      .asFunction<int Function(ffi.Pointer<ma_node>, int, double)>(
          isLeaf: true);

  /// General Library Documentation Undocument By General Corporation & Global Corporation & General Developer
  double ma_node_get_output_bus_volume(
    ffi.Pointer<ma_node> pNode,
    int outputBusIndex,
  ) {
    return _ma_node_get_output_bus_volume(
      pNode,
      outputBusIndex,
    );
  }

  late final _ma_node_get_output_bus_volumePtr = _lookup<
          ffi
          .NativeFunction<ffi.Float Function(ffi.Pointer<ma_node>, ma_uint32)>>(
      'ma_node_get_output_bus_volume');
  late final _ma_node_get_output_bus_volume = _ma_node_get_output_bus_volumePtr
      .asFunction<double Function(ffi.Pointer<ma_node>, int)>(isLeaf: true);

  /// General Library Documentation Undocument By General Corporation & Global Corporation & General Developer
  int ma_node_set_state(
    ffi.Pointer<ma_node> pNode,
    int state,
  ) {
    return _ma_node_set_state(
      pNode,
      state,
    );
  }

  late final _ma_node_set_statePtr = _lookup<
          ffi
          .NativeFunction<ffi.Int32 Function(ffi.Pointer<ma_node>, ffi.Int32)>>(
      'ma_node_set_state');
  late final _ma_node_set_state = _ma_node_set_statePtr
      .asFunction<int Function(ffi.Pointer<ma_node>, int)>(isLeaf: true);

  /// General Library Documentation Undocument By General Corporation & Global Corporation & General Developer
  int ma_node_get_state(
    ffi.Pointer<ma_node> pNode,
  ) {
    return _ma_node_get_state(
      pNode,
    );
  }

  late final _ma_node_get_statePtr =
      _lookup<ffi.NativeFunction<ffi.Int32 Function(ffi.Pointer<ma_node>)>>(
          'ma_node_get_state');
  late final _ma_node_get_state = _ma_node_get_statePtr
      .asFunction<int Function(ffi.Pointer<ma_node>)>(isLeaf: true);

  /// General Library Documentation Undocument By General Corporation & Global Corporation & General Developer
  int ma_node_set_state_time(
    ffi.Pointer<ma_node> pNode,
    int state,
    int globalTime,
  ) {
    return _ma_node_set_state_time(
      pNode,
      state,
      globalTime,
    );
  }

  late final _ma_node_set_state_timePtr = _lookup<
      ffi.NativeFunction<
          ffi.Int32 Function(ffi.Pointer<ma_node>, ffi.Int32,
              ma_uint64)>>('ma_node_set_state_time');
  late final _ma_node_set_state_time = _ma_node_set_state_timePtr
      .asFunction<int Function(ffi.Pointer<ma_node>, int, int)>(isLeaf: true);

  /// General Library Documentation Undocument By General Corporation & Global Corporation & General Developer
  int ma_node_get_state_time(
    ffi.Pointer<ma_node> pNode,
    int state,
  ) {
    return _ma_node_get_state_time(
      pNode,
      state,
    );
  }

  late final _ma_node_get_state_timePtr = _lookup<
          ffi
          .NativeFunction<ma_uint64 Function(ffi.Pointer<ma_node>, ffi.Int32)>>(
      'ma_node_get_state_time');
  late final _ma_node_get_state_time = _ma_node_get_state_timePtr
      .asFunction<int Function(ffi.Pointer<ma_node>, int)>(isLeaf: true);

  /// General Library Documentation Undocument By General Corporation & Global Corporation & General Developer
  int ma_node_get_state_by_time(
    ffi.Pointer<ma_node> pNode,
    int globalTime,
  ) {
    return _ma_node_get_state_by_time(
      pNode,
      globalTime,
    );
  }

  late final _ma_node_get_state_by_timePtr = _lookup<
          ffi
          .NativeFunction<ffi.Int32 Function(ffi.Pointer<ma_node>, ma_uint64)>>(
      'ma_node_get_state_by_time');
  late final _ma_node_get_state_by_time = _ma_node_get_state_by_timePtr
      .asFunction<int Function(ffi.Pointer<ma_node>, int)>(isLeaf: true);

  /// General Library Documentation Undocument By General Corporation & Global Corporation & General Developer
  int ma_node_get_state_by_time_range(
    ffi.Pointer<ma_node> pNode,
    int globalTimeBeg,
    int globalTimeEnd,
  ) {
    return _ma_node_get_state_by_time_range(
      pNode,
      globalTimeBeg,
      globalTimeEnd,
    );
  }

  late final _ma_node_get_state_by_time_rangePtr = _lookup<
      ffi.NativeFunction<
          ffi.Int32 Function(ffi.Pointer<ma_node>, ma_uint64,
              ma_uint64)>>('ma_node_get_state_by_time_range');
  late final _ma_node_get_state_by_time_range =
      _ma_node_get_state_by_time_rangePtr
          .asFunction<int Function(ffi.Pointer<ma_node>, int, int)>(
              isLeaf: true);

  /// General Library Documentation Undocument By General Corporation & Global Corporation & General Developer
  int ma_node_get_time(
    ffi.Pointer<ma_node> pNode,
  ) {
    return _ma_node_get_time(
      pNode,
    );
  }

  late final _ma_node_get_timePtr =
      _lookup<ffi.NativeFunction<ma_uint64 Function(ffi.Pointer<ma_node>)>>(
          'ma_node_get_time');
  late final _ma_node_get_time = _ma_node_get_timePtr
      .asFunction<int Function(ffi.Pointer<ma_node>)>(isLeaf: true);

  /// General Library Documentation Undocument By General Corporation & Global Corporation & General Developer
  int ma_node_set_time(
    ffi.Pointer<ma_node> pNode,
    int localTime,
  ) {
    return _ma_node_set_time(
      pNode,
      localTime,
    );
  }

  late final _ma_node_set_timePtr = _lookup<
          ffi
          .NativeFunction<ffi.Int32 Function(ffi.Pointer<ma_node>, ma_uint64)>>(
      'ma_node_set_time');
  late final _ma_node_set_time = _ma_node_set_timePtr
      .asFunction<int Function(ffi.Pointer<ma_node>, int)>(isLeaf: true);

  /// General Library Documentation Undocument By General Corporation & Global Corporation & General Developer
  ma_node_graph_config ma_node_graph_config_init(
    int channels,
  ) {
    return _ma_node_graph_config_init(
      channels,
    );
  }

  late final _ma_node_graph_config_initPtr =
      _lookup<ffi.NativeFunction<ma_node_graph_config Function(ma_uint32)>>(
          'ma_node_graph_config_init');
  late final _ma_node_graph_config_init = _ma_node_graph_config_initPtr
      .asFunction<ma_node_graph_config Function(int)>(isLeaf: true);

  /// General Library Documentation Undocument By General Corporation & Global Corporation & General Developer
  int ma_node_graph_init(
    ffi.Pointer<ma_node_graph_config> pConfig,
    ffi.Pointer<ma_allocation_callbacks> pAllocationCallbacks,
    ffi.Pointer<ma_node_graph> pNodeGraph,
  ) {
    return _ma_node_graph_init(
      pConfig,
      pAllocationCallbacks,
      pNodeGraph,
    );
  }

  late final _ma_node_graph_initPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int32 Function(
              ffi.Pointer<ma_node_graph_config>,
              ffi.Pointer<ma_allocation_callbacks>,
              ffi.Pointer<ma_node_graph>)>>('ma_node_graph_init');
  late final _ma_node_graph_init = _ma_node_graph_initPtr.asFunction<
      int Function(
          ffi.Pointer<ma_node_graph_config>,
          ffi.Pointer<ma_allocation_callbacks>,
          ffi.Pointer<ma_node_graph>)>(isLeaf: true);

  /// General Library Documentation Undocument By General Corporation & Global Corporation & General Developer
  void ma_node_graph_uninit(
    ffi.Pointer<ma_node_graph> pNodeGraph,
    ffi.Pointer<ma_allocation_callbacks> pAllocationCallbacks,
  ) {
    return _ma_node_graph_uninit(
      pNodeGraph,
      pAllocationCallbacks,
    );
  }

  late final _ma_node_graph_uninitPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Pointer<ma_node_graph>,
              ffi.Pointer<ma_allocation_callbacks>)>>('ma_node_graph_uninit');
  late final _ma_node_graph_uninit = _ma_node_graph_uninitPtr.asFunction<
      void Function(ffi.Pointer<ma_node_graph>,
          ffi.Pointer<ma_allocation_callbacks>)>(isLeaf: true);

  /// General Library Documentation Undocument By General Corporation & Global Corporation & General Developer
  ffi.Pointer<ma_node> ma_node_graph_get_endpoint(
    ffi.Pointer<ma_node_graph> pNodeGraph,
  ) {
    return _ma_node_graph_get_endpoint(
      pNodeGraph,
    );
  }

  late final _ma_node_graph_get_endpointPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ma_node> Function(
              ffi.Pointer<ma_node_graph>)>>('ma_node_graph_get_endpoint');
  late final _ma_node_graph_get_endpoint = _ma_node_graph_get_endpointPtr
      .asFunction<ffi.Pointer<ma_node> Function(ffi.Pointer<ma_node_graph>)>(
          isLeaf: true);

  /// General Library Documentation Undocument By General Corporation & Global Corporation & General Developer
  int ma_node_graph_read_pcm_frames(
    ffi.Pointer<ma_node_graph> pNodeGraph,
    ffi.Pointer<ffi.Void> pFramesOut,
    int frameCount,
    ffi.Pointer<ma_uint64> pFramesRead,
  ) {
    return _ma_node_graph_read_pcm_frames(
      pNodeGraph,
      pFramesOut,
      frameCount,
      pFramesRead,
    );
  }

  late final _ma_node_graph_read_pcm_framesPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int32 Function(
              ffi.Pointer<ma_node_graph>,
              ffi.Pointer<ffi.Void>,
              ma_uint64,
              ffi.Pointer<ma_uint64>)>>('ma_node_graph_read_pcm_frames');
  late final _ma_node_graph_read_pcm_frames =
      _ma_node_graph_read_pcm_framesPtr.asFunction<
          int Function(ffi.Pointer<ma_node_graph>, ffi.Pointer<ffi.Void>, int,
              ffi.Pointer<ma_uint64>)>(isLeaf: true);

  /// General Library Documentation Undocument By General Corporation & Global Corporation & General Developer
  int ma_node_graph_get_channels(
    ffi.Pointer<ma_node_graph> pNodeGraph,
  ) {
    return _ma_node_graph_get_channels(
      pNodeGraph,
    );
  }

  late final _ma_node_graph_get_channelsPtr = _lookup<
          ffi.NativeFunction<ma_uint32 Function(ffi.Pointer<ma_node_graph>)>>(
      'ma_node_graph_get_channels');
  late final _ma_node_graph_get_channels = _ma_node_graph_get_channelsPtr
      .asFunction<int Function(ffi.Pointer<ma_node_graph>)>(isLeaf: true);

  /// General Library Documentation Undocument By General Corporation & Global Corporation & General Developer
  int ma_node_graph_get_time(
    ffi.Pointer<ma_node_graph> pNodeGraph,
  ) {
    return _ma_node_graph_get_time(
      pNodeGraph,
    );
  }

  late final _ma_node_graph_get_timePtr = _lookup<
          ffi.NativeFunction<ma_uint64 Function(ffi.Pointer<ma_node_graph>)>>(
      'ma_node_graph_get_time');
  late final _ma_node_graph_get_time = _ma_node_graph_get_timePtr
      .asFunction<int Function(ffi.Pointer<ma_node_graph>)>(isLeaf: true);

  /// General Library Documentation Undocument By General Corporation & Global Corporation & General Developer
  int ma_node_graph_set_time(
    ffi.Pointer<ma_node_graph> pNodeGraph,
    int globalTime,
  ) {
    return _ma_node_graph_set_time(
      pNodeGraph,
      globalTime,
    );
  }

  late final _ma_node_graph_set_timePtr = _lookup<
      ffi.NativeFunction<
          ffi.Int32 Function(ffi.Pointer<ma_node_graph>,
              ma_uint64)>>('ma_node_graph_set_time');
  late final _ma_node_graph_set_time = _ma_node_graph_set_timePtr
      .asFunction<int Function(ffi.Pointer<ma_node_graph>, int)>(isLeaf: true);

  /// General Library Documentation Undocument By General Corporation & Global Corporation & General Developer
  ma_data_source_node_config ma_data_source_node_config_init(
    ffi.Pointer<ma_data_source> pDataSource,
  ) {
    return _ma_data_source_node_config_init(
      pDataSource,
    );
  }

  late final _ma_data_source_node_config_initPtr = _lookup<
      ffi.NativeFunction<
          ma_data_source_node_config Function(
              ffi.Pointer<ma_data_source>)>>('ma_data_source_node_config_init');
  late final _ma_data_source_node_config_init =
      _ma_data_source_node_config_initPtr.asFunction<
          ma_data_source_node_config Function(
              ffi.Pointer<ma_data_source>)>(isLeaf: true);

  /// General Library Documentation Undocument By General Corporation & Global Corporation & General Developer
  int ma_data_source_node_init(
    ffi.Pointer<ma_node_graph> pNodeGraph,
    ffi.Pointer<ma_data_source_node_config> pConfig,
    ffi.Pointer<ma_allocation_callbacks> pAllocationCallbacks,
    ffi.Pointer<ma_data_source_node> pDataSourceNode,
  ) {
    return _ma_data_source_node_init(
      pNodeGraph,
      pConfig,
      pAllocationCallbacks,
      pDataSourceNode,
    );
  }

  late final _ma_data_source_node_initPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int32 Function(
              ffi.Pointer<ma_node_graph>,
              ffi.Pointer<ma_data_source_node_config>,
              ffi.Pointer<ma_allocation_callbacks>,
              ffi.Pointer<ma_data_source_node>)>>('ma_data_source_node_init');
  late final _ma_data_source_node_init =
      _ma_data_source_node_initPtr.asFunction<
          int Function(
              ffi.Pointer<ma_node_graph>,
              ffi.Pointer<ma_data_source_node_config>,
              ffi.Pointer<ma_allocation_callbacks>,
              ffi.Pointer<ma_data_source_node>)>(isLeaf: true);

  /// General Library Documentation Undocument By General Corporation & Global Corporation & General Developer
  void ma_data_source_node_uninit(
    ffi.Pointer<ma_data_source_node> pDataSourceNode,
    ffi.Pointer<ma_allocation_callbacks> pAllocationCallbacks,
  ) {
    return _ma_data_source_node_uninit(
      pDataSourceNode,
      pAllocationCallbacks,
    );
  }

  late final _ma_data_source_node_uninitPtr = _lookup<
          ffi.NativeFunction<
              ffi.Void Function(ffi.Pointer<ma_data_source_node>,
                  ffi.Pointer<ma_allocation_callbacks>)>>(
      'ma_data_source_node_uninit');
  late final _ma_data_source_node_uninit =
      _ma_data_source_node_uninitPtr.asFunction<
          void Function(ffi.Pointer<ma_data_source_node>,
              ffi.Pointer<ma_allocation_callbacks>)>(isLeaf: true);

  /// General Library Documentation Undocument By General Corporation & Global Corporation & General Developer
  int ma_data_source_node_set_looping(
    ffi.Pointer<ma_data_source_node> pDataSourceNode,
    int isLooping,
  ) {
    return _ma_data_source_node_set_looping(
      pDataSourceNode,
      isLooping,
    );
  }

  late final _ma_data_source_node_set_loopingPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int32 Function(ffi.Pointer<ma_data_source_node>,
              ma_bool32)>>('ma_data_source_node_set_looping');
  late final _ma_data_source_node_set_looping =
      _ma_data_source_node_set_loopingPtr
          .asFunction<int Function(ffi.Pointer<ma_data_source_node>, int)>(
              isLeaf: true);

  /// General Library Documentation Undocument By General Corporation & Global Corporation & General Developer
  int ma_data_source_node_is_looping(
    ffi.Pointer<ma_data_source_node> pDataSourceNode,
  ) {
    return _ma_data_source_node_is_looping(
      pDataSourceNode,
    );
  }

  late final _ma_data_source_node_is_loopingPtr = _lookup<
          ffi.NativeFunction<
              ma_bool32 Function(ffi.Pointer<ma_data_source_node>)>>(
      'ma_data_source_node_is_looping');
  late final _ma_data_source_node_is_looping =
      _ma_data_source_node_is_loopingPtr
          .asFunction<int Function(ffi.Pointer<ma_data_source_node>)>(
              isLeaf: true);

  /// General Library Documentation Undocument By General Corporation & Global Corporation & General Developer
  ma_splitter_node_config ma_splitter_node_config_init(
    int channels,
  ) {
    return _ma_splitter_node_config_init(
      channels,
    );
  }

  late final _ma_splitter_node_config_initPtr =
      _lookup<ffi.NativeFunction<ma_splitter_node_config Function(ma_uint32)>>(
          'ma_splitter_node_config_init');
  late final _ma_splitter_node_config_init = _ma_splitter_node_config_initPtr
      .asFunction<ma_splitter_node_config Function(int)>(isLeaf: true);

  /// General Library Documentation Undocument By General Corporation & Global Corporation & General Developer
  int ma_splitter_node_init(
    ffi.Pointer<ma_node_graph> pNodeGraph,
    ffi.Pointer<ma_splitter_node_config> pConfig,
    ffi.Pointer<ma_allocation_callbacks> pAllocationCallbacks,
    ffi.Pointer<ma_splitter_node> pSplitterNode,
  ) {
    return _ma_splitter_node_init(
      pNodeGraph,
      pConfig,
      pAllocationCallbacks,
      pSplitterNode,
    );
  }

  late final _ma_splitter_node_initPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int32 Function(
              ffi.Pointer<ma_node_graph>,
              ffi.Pointer<ma_splitter_node_config>,
              ffi.Pointer<ma_allocation_callbacks>,
              ffi.Pointer<ma_splitter_node>)>>('ma_splitter_node_init');
  late final _ma_splitter_node_init = _ma_splitter_node_initPtr.asFunction<
      int Function(
          ffi.Pointer<ma_node_graph>,
          ffi.Pointer<ma_splitter_node_config>,
          ffi.Pointer<ma_allocation_callbacks>,
          ffi.Pointer<ma_splitter_node>)>(isLeaf: true);

  /// General Library Documentation Undocument By General Corporation & Global Corporation & General Developer
  void ma_splitter_node_uninit(
    ffi.Pointer<ma_splitter_node> pSplitterNode,
    ffi.Pointer<ma_allocation_callbacks> pAllocationCallbacks,
  ) {
    return _ma_splitter_node_uninit(
      pSplitterNode,
      pAllocationCallbacks,
    );
  }

  late final _ma_splitter_node_uninitPtr = _lookup<
          ffi.NativeFunction<
              ffi.Void Function(ffi.Pointer<ma_splitter_node>,
                  ffi.Pointer<ma_allocation_callbacks>)>>(
      'ma_splitter_node_uninit');
  late final _ma_splitter_node_uninit = _ma_splitter_node_uninitPtr.asFunction<
      void Function(ffi.Pointer<ma_splitter_node>,
          ffi.Pointer<ma_allocation_callbacks>)>(isLeaf: true);

  /// General Library Documentation Undocument By General Corporation & Global Corporation & General Developer
  ma_biquad_node_config ma_biquad_node_config_init(
    int channels,
    double b0,
    double b1,
    double b2,
    double a0,
    double a1,
    double a2,
  ) {
    return _ma_biquad_node_config_init(
      channels,
      b0,
      b1,
      b2,
      a0,
      a1,
      a2,
    );
  }

  late final _ma_biquad_node_config_initPtr = _lookup<
      ffi.NativeFunction<
          ma_biquad_node_config Function(
              ma_uint32,
              ffi.Float,
              ffi.Float,
              ffi.Float,
              ffi.Float,
              ffi.Float,
              ffi.Float)>>('ma_biquad_node_config_init');
  late final _ma_biquad_node_config_init =
      _ma_biquad_node_config_initPtr.asFunction<
          ma_biquad_node_config Function(int, double, double, double, double,
              double, double)>(isLeaf: true);

  /// General Library Documentation Undocument By General Corporation & Global Corporation & General Developer
  int ma_biquad_node_init(
    ffi.Pointer<ma_node_graph> pNodeGraph,
    ffi.Pointer<ma_biquad_node_config> pConfig,
    ffi.Pointer<ma_allocation_callbacks> pAllocationCallbacks,
    ffi.Pointer<ma_biquad_node> pNode,
  ) {
    return _ma_biquad_node_init(
      pNodeGraph,
      pConfig,
      pAllocationCallbacks,
      pNode,
    );
  }

  late final _ma_biquad_node_initPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int32 Function(
              ffi.Pointer<ma_node_graph>,
              ffi.Pointer<ma_biquad_node_config>,
              ffi.Pointer<ma_allocation_callbacks>,
              ffi.Pointer<ma_biquad_node>)>>('ma_biquad_node_init');
  late final _ma_biquad_node_init = _ma_biquad_node_initPtr.asFunction<
      int Function(
          ffi.Pointer<ma_node_graph>,
          ffi.Pointer<ma_biquad_node_config>,
          ffi.Pointer<ma_allocation_callbacks>,
          ffi.Pointer<ma_biquad_node>)>(isLeaf: true);

  /// General Library Documentation Undocument By General Corporation & Global Corporation & General Developer
  int ma_biquad_node_reinit(
    ffi.Pointer<ma_biquad_config> pConfig,
    ffi.Pointer<ma_biquad_node> pNode,
  ) {
    return _ma_biquad_node_reinit(
      pConfig,
      pNode,
    );
  }

  late final _ma_biquad_node_reinitPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int32 Function(ffi.Pointer<ma_biquad_config>,
              ffi.Pointer<ma_biquad_node>)>>('ma_biquad_node_reinit');
  late final _ma_biquad_node_reinit = _ma_biquad_node_reinitPtr.asFunction<
      int Function(ffi.Pointer<ma_biquad_config>,
          ffi.Pointer<ma_biquad_node>)>(isLeaf: true);

  /// General Library Documentation Undocument By General Corporation & Global Corporation & General Developer
  void ma_biquad_node_uninit(
    ffi.Pointer<ma_biquad_node> pNode,
    ffi.Pointer<ma_allocation_callbacks> pAllocationCallbacks,
  ) {
    return _ma_biquad_node_uninit(
      pNode,
      pAllocationCallbacks,
    );
  }

  late final _ma_biquad_node_uninitPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Pointer<ma_biquad_node>,
              ffi.Pointer<ma_allocation_callbacks>)>>('ma_biquad_node_uninit');
  late final _ma_biquad_node_uninit = _ma_biquad_node_uninitPtr.asFunction<
      void Function(ffi.Pointer<ma_biquad_node>,
          ffi.Pointer<ma_allocation_callbacks>)>(isLeaf: true);

  /// General Library Documentation Undocument By General Corporation & Global Corporation & General Developer
  ma_lpf_node_config ma_lpf_node_config_init(
    int channels,
    int sampleRate,
    double cutoffFrequency,
    int order,
  ) {
    return _ma_lpf_node_config_init(
      channels,
      sampleRate,
      cutoffFrequency,
      order,
    );
  }

  late final _ma_lpf_node_config_initPtr = _lookup<
      ffi.NativeFunction<
          ma_lpf_node_config Function(ma_uint32, ma_uint32, ffi.Double,
              ma_uint32)>>('ma_lpf_node_config_init');
  late final _ma_lpf_node_config_init = _ma_lpf_node_config_initPtr
      .asFunction<ma_lpf_node_config Function(int, int, double, int)>(
          isLeaf: true);

  /// General Library Documentation Undocument By General Corporation & Global Corporation & General Developer
  int ma_lpf_node_init(
    ffi.Pointer<ma_node_graph> pNodeGraph,
    ffi.Pointer<ma_lpf_node_config> pConfig,
    ffi.Pointer<ma_allocation_callbacks> pAllocationCallbacks,
    ffi.Pointer<ma_lpf_node> pNode,
  ) {
    return _ma_lpf_node_init(
      pNodeGraph,
      pConfig,
      pAllocationCallbacks,
      pNode,
    );
  }

  late final _ma_lpf_node_initPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int32 Function(
              ffi.Pointer<ma_node_graph>,
              ffi.Pointer<ma_lpf_node_config>,
              ffi.Pointer<ma_allocation_callbacks>,
              ffi.Pointer<ma_lpf_node>)>>('ma_lpf_node_init');
  late final _ma_lpf_node_init = _ma_lpf_node_initPtr.asFunction<
      int Function(
          ffi.Pointer<ma_node_graph>,
          ffi.Pointer<ma_lpf_node_config>,
          ffi.Pointer<ma_allocation_callbacks>,
          ffi.Pointer<ma_lpf_node>)>(isLeaf: true);

  /// General Library Documentation Undocument By General Corporation & Global Corporation & General Developer
  int ma_lpf_node_reinit(
    ffi.Pointer<ma_lpf_config> pConfig,
    ffi.Pointer<ma_lpf_node> pNode,
  ) {
    return _ma_lpf_node_reinit(
      pConfig,
      pNode,
    );
  }

  late final _ma_lpf_node_reinitPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int32 Function(ffi.Pointer<ma_lpf_config>,
              ffi.Pointer<ma_lpf_node>)>>('ma_lpf_node_reinit');
  late final _ma_lpf_node_reinit = _ma_lpf_node_reinitPtr.asFunction<
      int Function(
          ffi.Pointer<ma_lpf_config>, ffi.Pointer<ma_lpf_node>)>(isLeaf: true);

  /// General Library Documentation Undocument By General Corporation & Global Corporation & General Developer
  void ma_lpf_node_uninit(
    ffi.Pointer<ma_lpf_node> pNode,
    ffi.Pointer<ma_allocation_callbacks> pAllocationCallbacks,
  ) {
    return _ma_lpf_node_uninit(
      pNode,
      pAllocationCallbacks,
    );
  }

  late final _ma_lpf_node_uninitPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Pointer<ma_lpf_node>,
              ffi.Pointer<ma_allocation_callbacks>)>>('ma_lpf_node_uninit');
  late final _ma_lpf_node_uninit = _ma_lpf_node_uninitPtr.asFunction<
      void Function(ffi.Pointer<ma_lpf_node>,
          ffi.Pointer<ma_allocation_callbacks>)>(isLeaf: true);

  /// General Library Documentation Undocument By General Corporation & Global Corporation & General Developer
  ma_hpf_node_config ma_hpf_node_config_init(
    int channels,
    int sampleRate,
    double cutoffFrequency,
    int order,
  ) {
    return _ma_hpf_node_config_init(
      channels,
      sampleRate,
      cutoffFrequency,
      order,
    );
  }

  late final _ma_hpf_node_config_initPtr = _lookup<
      ffi.NativeFunction<
          ma_hpf_node_config Function(ma_uint32, ma_uint32, ffi.Double,
              ma_uint32)>>('ma_hpf_node_config_init');
  late final _ma_hpf_node_config_init = _ma_hpf_node_config_initPtr
      .asFunction<ma_hpf_node_config Function(int, int, double, int)>(
          isLeaf: true);

  /// General Library Documentation Undocument By General Corporation & Global Corporation & General Developer
  int ma_hpf_node_init(
    ffi.Pointer<ma_node_graph> pNodeGraph,
    ffi.Pointer<ma_hpf_node_config> pConfig,
    ffi.Pointer<ma_allocation_callbacks> pAllocationCallbacks,
    ffi.Pointer<ma_hpf_node> pNode,
  ) {
    return _ma_hpf_node_init(
      pNodeGraph,
      pConfig,
      pAllocationCallbacks,
      pNode,
    );
  }

  late final _ma_hpf_node_initPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int32 Function(
              ffi.Pointer<ma_node_graph>,
              ffi.Pointer<ma_hpf_node_config>,
              ffi.Pointer<ma_allocation_callbacks>,
              ffi.Pointer<ma_hpf_node>)>>('ma_hpf_node_init');
  late final _ma_hpf_node_init = _ma_hpf_node_initPtr.asFunction<
      int Function(
          ffi.Pointer<ma_node_graph>,
          ffi.Pointer<ma_hpf_node_config>,
          ffi.Pointer<ma_allocation_callbacks>,
          ffi.Pointer<ma_hpf_node>)>(isLeaf: true);

  /// General Library Documentation Undocument By General Corporation & Global Corporation & General Developer
  int ma_hpf_node_reinit(
    ffi.Pointer<ma_hpf_config> pConfig,
    ffi.Pointer<ma_hpf_node> pNode,
  ) {
    return _ma_hpf_node_reinit(
      pConfig,
      pNode,
    );
  }

  late final _ma_hpf_node_reinitPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int32 Function(ffi.Pointer<ma_hpf_config>,
              ffi.Pointer<ma_hpf_node>)>>('ma_hpf_node_reinit');
  late final _ma_hpf_node_reinit = _ma_hpf_node_reinitPtr.asFunction<
      int Function(
          ffi.Pointer<ma_hpf_config>, ffi.Pointer<ma_hpf_node>)>(isLeaf: true);

  /// General Library Documentation Undocument By General Corporation & Global Corporation & General Developer
  void ma_hpf_node_uninit(
    ffi.Pointer<ma_hpf_node> pNode,
    ffi.Pointer<ma_allocation_callbacks> pAllocationCallbacks,
  ) {
    return _ma_hpf_node_uninit(
      pNode,
      pAllocationCallbacks,
    );
  }

  late final _ma_hpf_node_uninitPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Pointer<ma_hpf_node>,
              ffi.Pointer<ma_allocation_callbacks>)>>('ma_hpf_node_uninit');
  late final _ma_hpf_node_uninit = _ma_hpf_node_uninitPtr.asFunction<
      void Function(ffi.Pointer<ma_hpf_node>,
          ffi.Pointer<ma_allocation_callbacks>)>(isLeaf: true);

  /// General Library Documentation Undocument By General Corporation & Global Corporation & General Developer
  ma_bpf_node_config ma_bpf_node_config_init(
    int channels,
    int sampleRate,
    double cutoffFrequency,
    int order,
  ) {
    return _ma_bpf_node_config_init(
      channels,
      sampleRate,
      cutoffFrequency,
      order,
    );
  }

  late final _ma_bpf_node_config_initPtr = _lookup<
      ffi.NativeFunction<
          ma_bpf_node_config Function(ma_uint32, ma_uint32, ffi.Double,
              ma_uint32)>>('ma_bpf_node_config_init');
  late final _ma_bpf_node_config_init = _ma_bpf_node_config_initPtr
      .asFunction<ma_bpf_node_config Function(int, int, double, int)>(
          isLeaf: true);

  /// General Library Documentation Undocument By General Corporation & Global Corporation & General Developer
  int ma_bpf_node_init(
    ffi.Pointer<ma_node_graph> pNodeGraph,
    ffi.Pointer<ma_bpf_node_config> pConfig,
    ffi.Pointer<ma_allocation_callbacks> pAllocationCallbacks,
    ffi.Pointer<ma_bpf_node> pNode,
  ) {
    return _ma_bpf_node_init(
      pNodeGraph,
      pConfig,
      pAllocationCallbacks,
      pNode,
    );
  }

  late final _ma_bpf_node_initPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int32 Function(
              ffi.Pointer<ma_node_graph>,
              ffi.Pointer<ma_bpf_node_config>,
              ffi.Pointer<ma_allocation_callbacks>,
              ffi.Pointer<ma_bpf_node>)>>('ma_bpf_node_init');
  late final _ma_bpf_node_init = _ma_bpf_node_initPtr.asFunction<
      int Function(
          ffi.Pointer<ma_node_graph>,
          ffi.Pointer<ma_bpf_node_config>,
          ffi.Pointer<ma_allocation_callbacks>,
          ffi.Pointer<ma_bpf_node>)>(isLeaf: true);

  /// General Library Documentation Undocument By General Corporation & Global Corporation & General Developer
  int ma_bpf_node_reinit(
    ffi.Pointer<ma_bpf_config> pConfig,
    ffi.Pointer<ma_bpf_node> pNode,
  ) {
    return _ma_bpf_node_reinit(
      pConfig,
      pNode,
    );
  }

  late final _ma_bpf_node_reinitPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int32 Function(ffi.Pointer<ma_bpf_config>,
              ffi.Pointer<ma_bpf_node>)>>('ma_bpf_node_reinit');
  late final _ma_bpf_node_reinit = _ma_bpf_node_reinitPtr.asFunction<
      int Function(
          ffi.Pointer<ma_bpf_config>, ffi.Pointer<ma_bpf_node>)>(isLeaf: true);

  /// General Library Documentation Undocument By General Corporation & Global Corporation & General Developer
  void ma_bpf_node_uninit(
    ffi.Pointer<ma_bpf_node> pNode,
    ffi.Pointer<ma_allocation_callbacks> pAllocationCallbacks,
  ) {
    return _ma_bpf_node_uninit(
      pNode,
      pAllocationCallbacks,
    );
  }

  late final _ma_bpf_node_uninitPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Pointer<ma_bpf_node>,
              ffi.Pointer<ma_allocation_callbacks>)>>('ma_bpf_node_uninit');
  late final _ma_bpf_node_uninit = _ma_bpf_node_uninitPtr.asFunction<
      void Function(ffi.Pointer<ma_bpf_node>,
          ffi.Pointer<ma_allocation_callbacks>)>(isLeaf: true);

  /// General Library Documentation Undocument By General Corporation & Global Corporation & General Developer
  ma_notch_node_config ma_notch_node_config_init(
    int channels,
    int sampleRate,
    double q,
    double frequency,
  ) {
    return _ma_notch_node_config_init(
      channels,
      sampleRate,
      q,
      frequency,
    );
  }

  late final _ma_notch_node_config_initPtr = _lookup<
      ffi.NativeFunction<
          ma_notch_node_config Function(ma_uint32, ma_uint32, ffi.Double,
              ffi.Double)>>('ma_notch_node_config_init');
  late final _ma_notch_node_config_init = _ma_notch_node_config_initPtr
      .asFunction<ma_notch_node_config Function(int, int, double, double)>(
          isLeaf: true);

  /// General Library Documentation Undocument By General Corporation & Global Corporation & General Developer
  int ma_notch_node_init(
    ffi.Pointer<ma_node_graph> pNodeGraph,
    ffi.Pointer<ma_notch_node_config> pConfig,
    ffi.Pointer<ma_allocation_callbacks> pAllocationCallbacks,
    ffi.Pointer<ma_notch_node> pNode,
  ) {
    return _ma_notch_node_init(
      pNodeGraph,
      pConfig,
      pAllocationCallbacks,
      pNode,
    );
  }

  late final _ma_notch_node_initPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int32 Function(
              ffi.Pointer<ma_node_graph>,
              ffi.Pointer<ma_notch_node_config>,
              ffi.Pointer<ma_allocation_callbacks>,
              ffi.Pointer<ma_notch_node>)>>('ma_notch_node_init');
  late final _ma_notch_node_init = _ma_notch_node_initPtr.asFunction<
      int Function(
          ffi.Pointer<ma_node_graph>,
          ffi.Pointer<ma_notch_node_config>,
          ffi.Pointer<ma_allocation_callbacks>,
          ffi.Pointer<ma_notch_node>)>(isLeaf: true);

  /// General Library Documentation Undocument By General Corporation & Global Corporation & General Developer
  int ma_notch_node_reinit(
    ffi.Pointer<ma_notch_config> pConfig,
    ffi.Pointer<ma_notch_node> pNode,
  ) {
    return _ma_notch_node_reinit(
      pConfig,
      pNode,
    );
  }

  late final _ma_notch_node_reinitPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int32 Function(ffi.Pointer<ma_notch_config>,
              ffi.Pointer<ma_notch_node>)>>('ma_notch_node_reinit');
  late final _ma_notch_node_reinit = _ma_notch_node_reinitPtr.asFunction<
      int Function(ffi.Pointer<ma_notch_config>,
          ffi.Pointer<ma_notch_node>)>(isLeaf: true);

  /// General Library Documentation Undocument By General Corporation & Global Corporation & General Developer
  void ma_notch_node_uninit(
    ffi.Pointer<ma_notch_node> pNode,
    ffi.Pointer<ma_allocation_callbacks> pAllocationCallbacks,
  ) {
    return _ma_notch_node_uninit(
      pNode,
      pAllocationCallbacks,
    );
  }

  late final _ma_notch_node_uninitPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Pointer<ma_notch_node>,
              ffi.Pointer<ma_allocation_callbacks>)>>('ma_notch_node_uninit');
  late final _ma_notch_node_uninit = _ma_notch_node_uninitPtr.asFunction<
      void Function(ffi.Pointer<ma_notch_node>,
          ffi.Pointer<ma_allocation_callbacks>)>(isLeaf: true);

  /// General Library Documentation Undocument By General Corporation & Global Corporation & General Developer
  ma_peak_node_config ma_peak_node_config_init(
    int channels,
    int sampleRate,
    double gainDB,
    double q,
    double frequency,
  ) {
    return _ma_peak_node_config_init(
      channels,
      sampleRate,
      gainDB,
      q,
      frequency,
    );
  }

  late final _ma_peak_node_config_initPtr = _lookup<
      ffi.NativeFunction<
          ma_peak_node_config Function(ma_uint32, ma_uint32, ffi.Double,
              ffi.Double, ffi.Double)>>('ma_peak_node_config_init');
  late final _ma_peak_node_config_init =
      _ma_peak_node_config_initPtr.asFunction<
          ma_peak_node_config Function(
              int, int, double, double, double)>(isLeaf: true);

  /// General Library Documentation Undocument By General Corporation & Global Corporation & General Developer
  int ma_peak_node_init(
    ffi.Pointer<ma_node_graph> pNodeGraph,
    ffi.Pointer<ma_peak_node_config> pConfig,
    ffi.Pointer<ma_allocation_callbacks> pAllocationCallbacks,
    ffi.Pointer<ma_peak_node> pNode,
  ) {
    return _ma_peak_node_init(
      pNodeGraph,
      pConfig,
      pAllocationCallbacks,
      pNode,
    );
  }

  late final _ma_peak_node_initPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int32 Function(
              ffi.Pointer<ma_node_graph>,
              ffi.Pointer<ma_peak_node_config>,
              ffi.Pointer<ma_allocation_callbacks>,
              ffi.Pointer<ma_peak_node>)>>('ma_peak_node_init');
  late final _ma_peak_node_init = _ma_peak_node_initPtr.asFunction<
      int Function(
          ffi.Pointer<ma_node_graph>,
          ffi.Pointer<ma_peak_node_config>,
          ffi.Pointer<ma_allocation_callbacks>,
          ffi.Pointer<ma_peak_node>)>(isLeaf: true);

  /// General Library Documentation Undocument By General Corporation & Global Corporation & General Developer
  int ma_peak_node_reinit(
    ffi.Pointer<ma_peak_config> pConfig,
    ffi.Pointer<ma_peak_node> pNode,
  ) {
    return _ma_peak_node_reinit(
      pConfig,
      pNode,
    );
  }

  late final _ma_peak_node_reinitPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int32 Function(ffi.Pointer<ma_peak_config>,
              ffi.Pointer<ma_peak_node>)>>('ma_peak_node_reinit');
  late final _ma_peak_node_reinit = _ma_peak_node_reinitPtr.asFunction<
          int Function(ffi.Pointer<ma_peak_config>, ffi.Pointer<ma_peak_node>)>(
      isLeaf: true);

  /// General Library Documentation Undocument By General Corporation & Global Corporation & General Developer
  void ma_peak_node_uninit(
    ffi.Pointer<ma_peak_node> pNode,
    ffi.Pointer<ma_allocation_callbacks> pAllocationCallbacks,
  ) {
    return _ma_peak_node_uninit(
      pNode,
      pAllocationCallbacks,
    );
  }

  late final _ma_peak_node_uninitPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Pointer<ma_peak_node>,
              ffi.Pointer<ma_allocation_callbacks>)>>('ma_peak_node_uninit');
  late final _ma_peak_node_uninit = _ma_peak_node_uninitPtr.asFunction<
      void Function(ffi.Pointer<ma_peak_node>,
          ffi.Pointer<ma_allocation_callbacks>)>(isLeaf: true);

  /// General Library Documentation Undocument By General Corporation & Global Corporation & General Developer
  ma_loshelf_node_config ma_loshelf_node_config_init(
    int channels,
    int sampleRate,
    double gainDB,
    double q,
    double frequency,
  ) {
    return _ma_loshelf_node_config_init(
      channels,
      sampleRate,
      gainDB,
      q,
      frequency,
    );
  }

  late final _ma_loshelf_node_config_initPtr = _lookup<
      ffi.NativeFunction<
          ma_loshelf_node_config Function(ma_uint32, ma_uint32, ffi.Double,
              ffi.Double, ffi.Double)>>('ma_loshelf_node_config_init');
  late final _ma_loshelf_node_config_init =
      _ma_loshelf_node_config_initPtr.asFunction<
          ma_loshelf_node_config Function(
              int, int, double, double, double)>(isLeaf: true);

  /// General Library Documentation Undocument By General Corporation & Global Corporation & General Developer
  int ma_loshelf_node_init(
    ffi.Pointer<ma_node_graph> pNodeGraph,
    ffi.Pointer<ma_loshelf_node_config> pConfig,
    ffi.Pointer<ma_allocation_callbacks> pAllocationCallbacks,
    ffi.Pointer<ma_loshelf_node> pNode,
  ) {
    return _ma_loshelf_node_init(
      pNodeGraph,
      pConfig,
      pAllocationCallbacks,
      pNode,
    );
  }

  late final _ma_loshelf_node_initPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int32 Function(
              ffi.Pointer<ma_node_graph>,
              ffi.Pointer<ma_loshelf_node_config>,
              ffi.Pointer<ma_allocation_callbacks>,
              ffi.Pointer<ma_loshelf_node>)>>('ma_loshelf_node_init');
  late final _ma_loshelf_node_init = _ma_loshelf_node_initPtr.asFunction<
      int Function(
          ffi.Pointer<ma_node_graph>,
          ffi.Pointer<ma_loshelf_node_config>,
          ffi.Pointer<ma_allocation_callbacks>,
          ffi.Pointer<ma_loshelf_node>)>(isLeaf: true);

  /// General Library Documentation Undocument By General Corporation & Global Corporation & General Developer
  int ma_loshelf_node_reinit(
    ffi.Pointer<ma_loshelf_config> pConfig,
    ffi.Pointer<ma_loshelf_node> pNode,
  ) {
    return _ma_loshelf_node_reinit(
      pConfig,
      pNode,
    );
  }

  late final _ma_loshelf_node_reinitPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int32 Function(ffi.Pointer<ma_loshelf_config>,
              ffi.Pointer<ma_loshelf_node>)>>('ma_loshelf_node_reinit');
  late final _ma_loshelf_node_reinit = _ma_loshelf_node_reinitPtr.asFunction<
      int Function(ffi.Pointer<ma_loshelf_config>,
          ffi.Pointer<ma_loshelf_node>)>(isLeaf: true);

  /// General Library Documentation Undocument By General Corporation & Global Corporation & General Developer
  void ma_loshelf_node_uninit(
    ffi.Pointer<ma_loshelf_node> pNode,
    ffi.Pointer<ma_allocation_callbacks> pAllocationCallbacks,
  ) {
    return _ma_loshelf_node_uninit(
      pNode,
      pAllocationCallbacks,
    );
  }

  late final _ma_loshelf_node_uninitPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Pointer<ma_loshelf_node>,
              ffi.Pointer<ma_allocation_callbacks>)>>('ma_loshelf_node_uninit');
  late final _ma_loshelf_node_uninit = _ma_loshelf_node_uninitPtr.asFunction<
      void Function(ffi.Pointer<ma_loshelf_node>,
          ffi.Pointer<ma_allocation_callbacks>)>(isLeaf: true);

  /// General Library Documentation Undocument By General Corporation & Global Corporation & General Developer
  ma_hishelf_node_config ma_hishelf_node_config_init(
    int channels,
    int sampleRate,
    double gainDB,
    double q,
    double frequency,
  ) {
    return _ma_hishelf_node_config_init(
      channels,
      sampleRate,
      gainDB,
      q,
      frequency,
    );
  }

  late final _ma_hishelf_node_config_initPtr = _lookup<
      ffi.NativeFunction<
          ma_hishelf_node_config Function(ma_uint32, ma_uint32, ffi.Double,
              ffi.Double, ffi.Double)>>('ma_hishelf_node_config_init');
  late final _ma_hishelf_node_config_init =
      _ma_hishelf_node_config_initPtr.asFunction<
          ma_hishelf_node_config Function(
              int, int, double, double, double)>(isLeaf: true);

  /// General Library Documentation Undocument By General Corporation & Global Corporation & General Developer
  int ma_hishelf_node_init(
    ffi.Pointer<ma_node_graph> pNodeGraph,
    ffi.Pointer<ma_hishelf_node_config> pConfig,
    ffi.Pointer<ma_allocation_callbacks> pAllocationCallbacks,
    ffi.Pointer<ma_hishelf_node> pNode,
  ) {
    return _ma_hishelf_node_init(
      pNodeGraph,
      pConfig,
      pAllocationCallbacks,
      pNode,
    );
  }

  late final _ma_hishelf_node_initPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int32 Function(
              ffi.Pointer<ma_node_graph>,
              ffi.Pointer<ma_hishelf_node_config>,
              ffi.Pointer<ma_allocation_callbacks>,
              ffi.Pointer<ma_hishelf_node>)>>('ma_hishelf_node_init');
  late final _ma_hishelf_node_init = _ma_hishelf_node_initPtr.asFunction<
      int Function(
          ffi.Pointer<ma_node_graph>,
          ffi.Pointer<ma_hishelf_node_config>,
          ffi.Pointer<ma_allocation_callbacks>,
          ffi.Pointer<ma_hishelf_node>)>(isLeaf: true);

  /// General Library Documentation Undocument By General Corporation & Global Corporation & General Developer
  int ma_hishelf_node_reinit(
    ffi.Pointer<ma_hishelf_config> pConfig,
    ffi.Pointer<ma_hishelf_node> pNode,
  ) {
    return _ma_hishelf_node_reinit(
      pConfig,
      pNode,
    );
  }

  late final _ma_hishelf_node_reinitPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int32 Function(ffi.Pointer<ma_hishelf_config>,
              ffi.Pointer<ma_hishelf_node>)>>('ma_hishelf_node_reinit');
  late final _ma_hishelf_node_reinit = _ma_hishelf_node_reinitPtr.asFunction<
      int Function(ffi.Pointer<ma_hishelf_config>,
          ffi.Pointer<ma_hishelf_node>)>(isLeaf: true);

  /// General Library Documentation Undocument By General Corporation & Global Corporation & General Developer
  void ma_hishelf_node_uninit(
    ffi.Pointer<ma_hishelf_node> pNode,
    ffi.Pointer<ma_allocation_callbacks> pAllocationCallbacks,
  ) {
    return _ma_hishelf_node_uninit(
      pNode,
      pAllocationCallbacks,
    );
  }

  late final _ma_hishelf_node_uninitPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Pointer<ma_hishelf_node>,
              ffi.Pointer<ma_allocation_callbacks>)>>('ma_hishelf_node_uninit');
  late final _ma_hishelf_node_uninit = _ma_hishelf_node_uninitPtr.asFunction<
      void Function(ffi.Pointer<ma_hishelf_node>,
          ffi.Pointer<ma_allocation_callbacks>)>(isLeaf: true);

  /// General Library Documentation Undocument By General Corporation & Global Corporation & General Developer
  ma_delay_node_config ma_delay_node_config_init(
    int channels,
    int sampleRate,
    int delayInFrames,
    double decay,
  ) {
    return _ma_delay_node_config_init(
      channels,
      sampleRate,
      delayInFrames,
      decay,
    );
  }

  late final _ma_delay_node_config_initPtr = _lookup<
      ffi.NativeFunction<
          ma_delay_node_config Function(ma_uint32, ma_uint32, ma_uint32,
              ffi.Float)>>('ma_delay_node_config_init');
  late final _ma_delay_node_config_init = _ma_delay_node_config_initPtr
      .asFunction<ma_delay_node_config Function(int, int, int, double)>(
          isLeaf: true);

  /// General Library Documentation Undocument By General Corporation & Global Corporation & General Developer
  int ma_delay_node_init(
    ffi.Pointer<ma_node_graph> pNodeGraph,
    ffi.Pointer<ma_delay_node_config> pConfig,
    ffi.Pointer<ma_allocation_callbacks> pAllocationCallbacks,
    ffi.Pointer<ma_delay_node> pDelayNode,
  ) {
    return _ma_delay_node_init(
      pNodeGraph,
      pConfig,
      pAllocationCallbacks,
      pDelayNode,
    );
  }

  late final _ma_delay_node_initPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int32 Function(
              ffi.Pointer<ma_node_graph>,
              ffi.Pointer<ma_delay_node_config>,
              ffi.Pointer<ma_allocation_callbacks>,
              ffi.Pointer<ma_delay_node>)>>('ma_delay_node_init');
  late final _ma_delay_node_init = _ma_delay_node_initPtr.asFunction<
      int Function(
          ffi.Pointer<ma_node_graph>,
          ffi.Pointer<ma_delay_node_config>,
          ffi.Pointer<ma_allocation_callbacks>,
          ffi.Pointer<ma_delay_node>)>(isLeaf: true);

  /// General Library Documentation Undocument By General Corporation & Global Corporation & General Developer
  void ma_delay_node_uninit(
    ffi.Pointer<ma_delay_node> pDelayNode,
    ffi.Pointer<ma_allocation_callbacks> pAllocationCallbacks,
  ) {
    return _ma_delay_node_uninit(
      pDelayNode,
      pAllocationCallbacks,
    );
  }

  late final _ma_delay_node_uninitPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Pointer<ma_delay_node>,
              ffi.Pointer<ma_allocation_callbacks>)>>('ma_delay_node_uninit');
  late final _ma_delay_node_uninit = _ma_delay_node_uninitPtr.asFunction<
      void Function(ffi.Pointer<ma_delay_node>,
          ffi.Pointer<ma_allocation_callbacks>)>(isLeaf: true);

  /// General Library Documentation Undocument By General Corporation & Global Corporation & General Developer
  void ma_delay_node_set_wet(
    ffi.Pointer<ma_delay_node> pDelayNode,
    double value,
  ) {
    return _ma_delay_node_set_wet(
      pDelayNode,
      value,
    );
  }

  late final _ma_delay_node_set_wetPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(
              ffi.Pointer<ma_delay_node>, ffi.Float)>>('ma_delay_node_set_wet');
  late final _ma_delay_node_set_wet = _ma_delay_node_set_wetPtr
      .asFunction<void Function(ffi.Pointer<ma_delay_node>, double)>(
          isLeaf: true);

  /// General Library Documentation Undocument By General Corporation & Global Corporation & General Developer
  double ma_delay_node_get_wet(
    ffi.Pointer<ma_delay_node> pDelayNode,
  ) {
    return _ma_delay_node_get_wet(
      pDelayNode,
    );
  }

  late final _ma_delay_node_get_wetPtr = _lookup<
          ffi.NativeFunction<ffi.Float Function(ffi.Pointer<ma_delay_node>)>>(
      'ma_delay_node_get_wet');
  late final _ma_delay_node_get_wet = _ma_delay_node_get_wetPtr
      .asFunction<double Function(ffi.Pointer<ma_delay_node>)>(isLeaf: true);

  /// General Library Documentation Undocument By General Corporation & Global Corporation & General Developer
  void ma_delay_node_set_dry(
    ffi.Pointer<ma_delay_node> pDelayNode,
    double value,
  ) {
    return _ma_delay_node_set_dry(
      pDelayNode,
      value,
    );
  }

  late final _ma_delay_node_set_dryPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(
              ffi.Pointer<ma_delay_node>, ffi.Float)>>('ma_delay_node_set_dry');
  late final _ma_delay_node_set_dry = _ma_delay_node_set_dryPtr
      .asFunction<void Function(ffi.Pointer<ma_delay_node>, double)>(
          isLeaf: true);

  /// General Library Documentation Undocument By General Corporation & Global Corporation & General Developer
  double ma_delay_node_get_dry(
    ffi.Pointer<ma_delay_node> pDelayNode,
  ) {
    return _ma_delay_node_get_dry(
      pDelayNode,
    );
  }

  late final _ma_delay_node_get_dryPtr = _lookup<
          ffi.NativeFunction<ffi.Float Function(ffi.Pointer<ma_delay_node>)>>(
      'ma_delay_node_get_dry');
  late final _ma_delay_node_get_dry = _ma_delay_node_get_dryPtr
      .asFunction<double Function(ffi.Pointer<ma_delay_node>)>(isLeaf: true);

  /// General Library Documentation Undocument By General Corporation & Global Corporation & General Developer
  void ma_delay_node_set_decay(
    ffi.Pointer<ma_delay_node> pDelayNode,
    double value,
  ) {
    return _ma_delay_node_set_decay(
      pDelayNode,
      value,
    );
  }

  late final _ma_delay_node_set_decayPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Pointer<ma_delay_node>,
              ffi.Float)>>('ma_delay_node_set_decay');
  late final _ma_delay_node_set_decay = _ma_delay_node_set_decayPtr
      .asFunction<void Function(ffi.Pointer<ma_delay_node>, double)>(
          isLeaf: true);

  /// General Library Documentation Undocument By General Corporation & Global Corporation & General Developer
  double ma_delay_node_get_decay(
    ffi.Pointer<ma_delay_node> pDelayNode,
  ) {
    return _ma_delay_node_get_decay(
      pDelayNode,
    );
  }

  late final _ma_delay_node_get_decayPtr = _lookup<
          ffi.NativeFunction<ffi.Float Function(ffi.Pointer<ma_delay_node>)>>(
      'ma_delay_node_get_decay');
  late final _ma_delay_node_get_decay = _ma_delay_node_get_decayPtr
      .asFunction<double Function(ffi.Pointer<ma_delay_node>)>(isLeaf: true);

  /// General Library Documentation Undocument By General Corporation & Global Corporation & General Developer
  ma_engine_node_config ma_engine_node_config_init(
    ffi.Pointer<ma_engine> pEngine,
    int type,
    int flags,
  ) {
    return _ma_engine_node_config_init(
      pEngine,
      type,
      flags,
    );
  }

  late final _ma_engine_node_config_initPtr = _lookup<
      ffi.NativeFunction<
          ma_engine_node_config Function(ffi.Pointer<ma_engine>, ffi.Int32,
              ma_uint32)>>('ma_engine_node_config_init');
  late final _ma_engine_node_config_init =
      _ma_engine_node_config_initPtr.asFunction<
          ma_engine_node_config Function(
              ffi.Pointer<ma_engine>, int, int)>(isLeaf: true);

  /// General Library Documentation Undocument By General Corporation & Global Corporation & General Developer
  int ma_engine_node_get_heap_size(
    ffi.Pointer<ma_engine_node_config> pConfig,
    ffi.Pointer<ffi.Size> pHeapSizeInBytes,
  ) {
    return _ma_engine_node_get_heap_size(
      pConfig,
      pHeapSizeInBytes,
    );
  }

  late final _ma_engine_node_get_heap_sizePtr = _lookup<
      ffi.NativeFunction<
          ffi.Int32 Function(ffi.Pointer<ma_engine_node_config>,
              ffi.Pointer<ffi.Size>)>>('ma_engine_node_get_heap_size');
  late final _ma_engine_node_get_heap_size =
      _ma_engine_node_get_heap_sizePtr.asFunction<
          int Function(ffi.Pointer<ma_engine_node_config>,
              ffi.Pointer<ffi.Size>)>(isLeaf: true);

  /// General Library Documentation Undocument By General Corporation & Global Corporation & General Developer
  int ma_engine_node_init_preallocated(
    ffi.Pointer<ma_engine_node_config> pConfig,
    ffi.Pointer<ffi.Void> pHeap,
    ffi.Pointer<ma_engine_node> pEngineNode,
  ) {
    return _ma_engine_node_init_preallocated(
      pConfig,
      pHeap,
      pEngineNode,
    );
  }

  late final _ma_engine_node_init_preallocatedPtr = _lookup<
          ffi.NativeFunction<
              ffi.Int32 Function(ffi.Pointer<ma_engine_node_config>,
                  ffi.Pointer<ffi.Void>, ffi.Pointer<ma_engine_node>)>>(
      'ma_engine_node_init_preallocated');
  late final _ma_engine_node_init_preallocated =
      _ma_engine_node_init_preallocatedPtr.asFunction<
          int Function(
              ffi.Pointer<ma_engine_node_config>,
              ffi.Pointer<ffi.Void>,
              ffi.Pointer<ma_engine_node>)>(isLeaf: true);

  /// General Library Documentation Undocument By General Corporation & Global Corporation & General Developer
  int ma_engine_node_init(
    ffi.Pointer<ma_engine_node_config> pConfig,
    ffi.Pointer<ma_allocation_callbacks> pAllocationCallbacks,
    ffi.Pointer<ma_engine_node> pEngineNode,
  ) {
    return _ma_engine_node_init(
      pConfig,
      pAllocationCallbacks,
      pEngineNode,
    );
  }

  late final _ma_engine_node_initPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int32 Function(
              ffi.Pointer<ma_engine_node_config>,
              ffi.Pointer<ma_allocation_callbacks>,
              ffi.Pointer<ma_engine_node>)>>('ma_engine_node_init');
  late final _ma_engine_node_init = _ma_engine_node_initPtr.asFunction<
      int Function(
          ffi.Pointer<ma_engine_node_config>,
          ffi.Pointer<ma_allocation_callbacks>,
          ffi.Pointer<ma_engine_node>)>(isLeaf: true);

  /// General Library Documentation Undocument By General Corporation & Global Corporation & General Developer
  void ma_engine_node_uninit(
    ffi.Pointer<ma_engine_node> pEngineNode,
    ffi.Pointer<ma_allocation_callbacks> pAllocationCallbacks,
  ) {
    return _ma_engine_node_uninit(
      pEngineNode,
      pAllocationCallbacks,
    );
  }

  late final _ma_engine_node_uninitPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Pointer<ma_engine_node>,
              ffi.Pointer<ma_allocation_callbacks>)>>('ma_engine_node_uninit');
  late final _ma_engine_node_uninit = _ma_engine_node_uninitPtr.asFunction<
      void Function(ffi.Pointer<ma_engine_node>,
          ffi.Pointer<ma_allocation_callbacks>)>(isLeaf: true);

  /// General Library Documentation Undocument By General Corporation & Global Corporation & General Developer
  ma_sound_config ma_sound_config_init() {
    return _ma_sound_config_init();
  }

  late final _ma_sound_config_initPtr =
      _lookup<ffi.NativeFunction<ma_sound_config Function()>>(
          'ma_sound_config_init');
  late final _ma_sound_config_init = _ma_sound_config_initPtr
      .asFunction<ma_sound_config Function()>(isLeaf: true);

  /// General Library Documentation Undocument By General Corporation & Global Corporation & General Developer
  ma_sound_config ma_sound_config_init_2(
    ffi.Pointer<ma_engine> pEngine,
  ) {
    return _ma_sound_config_init_2(
      pEngine,
    );
  }

  late final _ma_sound_config_init_2Ptr = _lookup<
          ffi.NativeFunction<ma_sound_config Function(ffi.Pointer<ma_engine>)>>(
      'ma_sound_config_init_2');
  late final _ma_sound_config_init_2 = _ma_sound_config_init_2Ptr
      .asFunction<ma_sound_config Function(ffi.Pointer<ma_engine>)>(
          isLeaf: true);

  /// General Library Documentation Undocument By General Corporation & Global Corporation & General Developer
  ma_sound_group_config ma_sound_group_config_init() {
    return _ma_sound_group_config_init();
  }

  late final _ma_sound_group_config_initPtr =
      _lookup<ffi.NativeFunction<ma_sound_group_config Function()>>(
          'ma_sound_group_config_init');
  late final _ma_sound_group_config_init = _ma_sound_group_config_initPtr
      .asFunction<ma_sound_group_config Function()>(isLeaf: true);

  /// General Library Documentation Undocument By General Corporation & Global Corporation & General Developer
  ma_sound_group_config ma_sound_group_config_init_2(
    ffi.Pointer<ma_engine> pEngine,
  ) {
    return _ma_sound_group_config_init_2(
      pEngine,
    );
  }

  late final _ma_sound_group_config_init_2Ptr = _lookup<
      ffi.NativeFunction<
          ma_sound_group_config Function(
              ffi.Pointer<ma_engine>)>>('ma_sound_group_config_init_2');
  late final _ma_sound_group_config_init_2 = _ma_sound_group_config_init_2Ptr
      .asFunction<ma_sound_group_config Function(ffi.Pointer<ma_engine>)>(
          isLeaf: true);

  /// General Library Documentation Undocument By General Corporation & Global Corporation & General Developer
  ma_engine_config ma_engine_config_init() {
    return _ma_engine_config_init();
  }

  late final _ma_engine_config_initPtr =
      _lookup<ffi.NativeFunction<ma_engine_config Function()>>(
          'ma_engine_config_init');
  late final _ma_engine_config_init = _ma_engine_config_initPtr
      .asFunction<ma_engine_config Function()>(isLeaf: true);

  /// General Library Documentation Undocument By General Corporation & Global Corporation & General Developer
  int ma_engine_init(
    ffi.Pointer<ma_engine_config> pConfig,
    ffi.Pointer<ma_engine> pEngine,
  ) {
    return _ma_engine_init(
      pConfig,
      pEngine,
    );
  }

  late final _ma_engine_initPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int32 Function(ffi.Pointer<ma_engine_config>,
              ffi.Pointer<ma_engine>)>>('ma_engine_init');
  late final _ma_engine_init = _ma_engine_initPtr.asFunction<
      int Function(
          ffi.Pointer<ma_engine_config>, ffi.Pointer<ma_engine>)>(isLeaf: true);

  /// General Library Documentation Undocument By General Corporation & Global Corporation & General Developer
  void ma_engine_uninit(
    ffi.Pointer<ma_engine> pEngine,
  ) {
    return _ma_engine_uninit(
      pEngine,
    );
  }

  late final _ma_engine_uninitPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Pointer<ma_engine>)>>(
          'ma_engine_uninit');
  late final _ma_engine_uninit = _ma_engine_uninitPtr
      .asFunction<void Function(ffi.Pointer<ma_engine>)>(isLeaf: true);

  /// General Library Documentation Undocument By General Corporation & Global Corporation & General Developer
  int ma_engine_read_pcm_frames(
    ffi.Pointer<ma_engine> pEngine,
    ffi.Pointer<ffi.Void> pFramesOut,
    int frameCount,
    ffi.Pointer<ma_uint64> pFramesRead,
  ) {
    return _ma_engine_read_pcm_frames(
      pEngine,
      pFramesOut,
      frameCount,
      pFramesRead,
    );
  }

  late final _ma_engine_read_pcm_framesPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int32 Function(ffi.Pointer<ma_engine>, ffi.Pointer<ffi.Void>,
              ma_uint64, ffi.Pointer<ma_uint64>)>>('ma_engine_read_pcm_frames');
  late final _ma_engine_read_pcm_frames =
      _ma_engine_read_pcm_framesPtr.asFunction<
          int Function(ffi.Pointer<ma_engine>, ffi.Pointer<ffi.Void>, int,
              ffi.Pointer<ma_uint64>)>(isLeaf: true);

  /// General Library Documentation Undocument By General Corporation & Global Corporation & General Developer
  ffi.Pointer<ma_node_graph> ma_engine_get_node_graph(
    ffi.Pointer<ma_engine> pEngine,
  ) {
    return _ma_engine_get_node_graph(
      pEngine,
    );
  }

  late final _ma_engine_get_node_graphPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ma_node_graph> Function(
              ffi.Pointer<ma_engine>)>>('ma_engine_get_node_graph');
  late final _ma_engine_get_node_graph = _ma_engine_get_node_graphPtr
      .asFunction<ffi.Pointer<ma_node_graph> Function(ffi.Pointer<ma_engine>)>(
          isLeaf: true);

  /// General Library Documentation Undocument By General Corporation & Global Corporation & General Developer
  ffi.Pointer<ma_resource_manager> ma_engine_get_resource_manager(
    ffi.Pointer<ma_engine> pEngine,
  ) {
    return _ma_engine_get_resource_manager(
      pEngine,
    );
  }

  late final _ma_engine_get_resource_managerPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ma_resource_manager> Function(
              ffi.Pointer<ma_engine>)>>('ma_engine_get_resource_manager');
  late final _ma_engine_get_resource_manager =
      _ma_engine_get_resource_managerPtr.asFunction<
          ffi.Pointer<ma_resource_manager> Function(
              ffi.Pointer<ma_engine>)>(isLeaf: true);

  /// General Library Documentation Undocument By General Corporation & Global Corporation & General Developer
  ffi.Pointer<ma_device> ma_engine_get_device(
    ffi.Pointer<ma_engine> pEngine,
  ) {
    return _ma_engine_get_device(
      pEngine,
    );
  }

  late final _ma_engine_get_devicePtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ma_device> Function(
              ffi.Pointer<ma_engine>)>>('ma_engine_get_device');
  late final _ma_engine_get_device = _ma_engine_get_devicePtr
      .asFunction<ffi.Pointer<ma_device> Function(ffi.Pointer<ma_engine>)>(
          isLeaf: true);

  /// General Library Documentation Undocument By General Corporation & Global Corporation & General Developer
  ffi.Pointer<ma_log> ma_engine_get_log(
    ffi.Pointer<ma_engine> pEngine,
  ) {
    return _ma_engine_get_log(
      pEngine,
    );
  }

  late final _ma_engine_get_logPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ma_log> Function(
              ffi.Pointer<ma_engine>)>>('ma_engine_get_log');
  late final _ma_engine_get_log = _ma_engine_get_logPtr
      .asFunction<ffi.Pointer<ma_log> Function(ffi.Pointer<ma_engine>)>(
          isLeaf: true);

  /// General Library Documentation Undocument By General Corporation & Global Corporation & General Developer
  ffi.Pointer<ma_node> ma_engine_get_endpoint(
    ffi.Pointer<ma_engine> pEngine,
  ) {
    return _ma_engine_get_endpoint(
      pEngine,
    );
  }

  late final _ma_engine_get_endpointPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ma_node> Function(
              ffi.Pointer<ma_engine>)>>('ma_engine_get_endpoint');
  late final _ma_engine_get_endpoint = _ma_engine_get_endpointPtr
      .asFunction<ffi.Pointer<ma_node> Function(ffi.Pointer<ma_engine>)>(
          isLeaf: true);

  /// General Library Documentation Undocument By General Corporation & Global Corporation & General Developer
  int ma_engine_get_time_in_pcm_frames(
    ffi.Pointer<ma_engine> pEngine,
  ) {
    return _ma_engine_get_time_in_pcm_frames(
      pEngine,
    );
  }

  late final _ma_engine_get_time_in_pcm_framesPtr =
      _lookup<ffi.NativeFunction<ma_uint64 Function(ffi.Pointer<ma_engine>)>>(
          'ma_engine_get_time_in_pcm_frames');
  late final _ma_engine_get_time_in_pcm_frames =
      _ma_engine_get_time_in_pcm_framesPtr
          .asFunction<int Function(ffi.Pointer<ma_engine>)>(isLeaf: true);

  /// General Library Documentation Undocument By General Corporation & Global Corporation & General Developer
  int ma_engine_get_time_in_milliseconds(
    ffi.Pointer<ma_engine> pEngine,
  ) {
    return _ma_engine_get_time_in_milliseconds(
      pEngine,
    );
  }

  late final _ma_engine_get_time_in_millisecondsPtr =
      _lookup<ffi.NativeFunction<ma_uint64 Function(ffi.Pointer<ma_engine>)>>(
          'ma_engine_get_time_in_milliseconds');
  late final _ma_engine_get_time_in_milliseconds =
      _ma_engine_get_time_in_millisecondsPtr
          .asFunction<int Function(ffi.Pointer<ma_engine>)>(isLeaf: true);

  /// General Library Documentation Undocument By General Corporation & Global Corporation & General Developer
  int ma_engine_set_time_in_pcm_frames(
    ffi.Pointer<ma_engine> pEngine,
    int globalTime,
  ) {
    return _ma_engine_set_time_in_pcm_frames(
      pEngine,
      globalTime,
    );
  }

  late final _ma_engine_set_time_in_pcm_framesPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int32 Function(ffi.Pointer<ma_engine>,
              ma_uint64)>>('ma_engine_set_time_in_pcm_frames');
  late final _ma_engine_set_time_in_pcm_frames =
      _ma_engine_set_time_in_pcm_framesPtr
          .asFunction<int Function(ffi.Pointer<ma_engine>, int)>(isLeaf: true);

  /// General Library Documentation Undocument By General Corporation & Global Corporation & General Developer
  int ma_engine_set_time_in_milliseconds(
    ffi.Pointer<ma_engine> pEngine,
    int globalTime,
  ) {
    return _ma_engine_set_time_in_milliseconds(
      pEngine,
      globalTime,
    );
  }

  late final _ma_engine_set_time_in_millisecondsPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int32 Function(ffi.Pointer<ma_engine>,
              ma_uint64)>>('ma_engine_set_time_in_milliseconds');
  late final _ma_engine_set_time_in_milliseconds =
      _ma_engine_set_time_in_millisecondsPtr
          .asFunction<int Function(ffi.Pointer<ma_engine>, int)>(isLeaf: true);

  /// General Library Documentation Undocument By General Corporation & Global Corporation & General Developer
  int ma_engine_get_time(
    ffi.Pointer<ma_engine> pEngine,
  ) {
    return _ma_engine_get_time(
      pEngine,
    );
  }

  late final _ma_engine_get_timePtr =
      _lookup<ffi.NativeFunction<ma_uint64 Function(ffi.Pointer<ma_engine>)>>(
          'ma_engine_get_time');
  late final _ma_engine_get_time = _ma_engine_get_timePtr
      .asFunction<int Function(ffi.Pointer<ma_engine>)>(isLeaf: true);

  /// General Library Documentation Undocument By General Corporation & Global Corporation & General Developer
  int ma_engine_set_time(
    ffi.Pointer<ma_engine> pEngine,
    int globalTime,
  ) {
    return _ma_engine_set_time(
      pEngine,
      globalTime,
    );
  }

  late final _ma_engine_set_timePtr = _lookup<
      ffi.NativeFunction<
          ffi.Int32 Function(
              ffi.Pointer<ma_engine>, ma_uint64)>>('ma_engine_set_time');
  late final _ma_engine_set_time = _ma_engine_set_timePtr
      .asFunction<int Function(ffi.Pointer<ma_engine>, int)>(isLeaf: true);

  /// General Library Documentation Undocument By General Corporation & Global Corporation & General Developer
  int ma_engine_get_channels(
    ffi.Pointer<ma_engine> pEngine,
  ) {
    return _ma_engine_get_channels(
      pEngine,
    );
  }

  late final _ma_engine_get_channelsPtr =
      _lookup<ffi.NativeFunction<ma_uint32 Function(ffi.Pointer<ma_engine>)>>(
          'ma_engine_get_channels');
  late final _ma_engine_get_channels = _ma_engine_get_channelsPtr
      .asFunction<int Function(ffi.Pointer<ma_engine>)>(isLeaf: true);

  /// General Library Documentation Undocument By General Corporation & Global Corporation & General Developer
  int ma_engine_get_sample_rate(
    ffi.Pointer<ma_engine> pEngine,
  ) {
    return _ma_engine_get_sample_rate(
      pEngine,
    );
  }

  late final _ma_engine_get_sample_ratePtr =
      _lookup<ffi.NativeFunction<ma_uint32 Function(ffi.Pointer<ma_engine>)>>(
          'ma_engine_get_sample_rate');
  late final _ma_engine_get_sample_rate = _ma_engine_get_sample_ratePtr
      .asFunction<int Function(ffi.Pointer<ma_engine>)>(isLeaf: true);

  /// General Library Documentation Undocument By General Corporation & Global Corporation & General Developer
  int ma_engine_start(
    ffi.Pointer<ma_engine> pEngine,
  ) {
    return _ma_engine_start(
      pEngine,
    );
  }

  late final _ma_engine_startPtr =
      _lookup<ffi.NativeFunction<ffi.Int32 Function(ffi.Pointer<ma_engine>)>>(
          'ma_engine_start');
  late final _ma_engine_start = _ma_engine_startPtr
      .asFunction<int Function(ffi.Pointer<ma_engine>)>(isLeaf: true);

  /// General Library Documentation Undocument By General Corporation & Global Corporation & General Developer
  int ma_engine_stop(
    ffi.Pointer<ma_engine> pEngine,
  ) {
    return _ma_engine_stop(
      pEngine,
    );
  }

  late final _ma_engine_stopPtr =
      _lookup<ffi.NativeFunction<ffi.Int32 Function(ffi.Pointer<ma_engine>)>>(
          'ma_engine_stop');
  late final _ma_engine_stop = _ma_engine_stopPtr
      .asFunction<int Function(ffi.Pointer<ma_engine>)>(isLeaf: true);

  /// General Library Documentation Undocument By General Corporation & Global Corporation & General Developer
  int ma_engine_set_volume(
    ffi.Pointer<ma_engine> pEngine,
    double volume,
  ) {
    return _ma_engine_set_volume(
      pEngine,
      volume,
    );
  }

  late final _ma_engine_set_volumePtr = _lookup<
      ffi.NativeFunction<
          ffi.Int32 Function(
              ffi.Pointer<ma_engine>, ffi.Float)>>('ma_engine_set_volume');
  late final _ma_engine_set_volume = _ma_engine_set_volumePtr
      .asFunction<int Function(ffi.Pointer<ma_engine>, double)>(isLeaf: true);

  /// General Library Documentation Undocument By General Corporation & Global Corporation & General Developer
  double ma_engine_get_volume(
    ffi.Pointer<ma_engine> pEngine,
  ) {
    return _ma_engine_get_volume(
      pEngine,
    );
  }

  late final _ma_engine_get_volumePtr =
      _lookup<ffi.NativeFunction<ffi.Float Function(ffi.Pointer<ma_engine>)>>(
          'ma_engine_get_volume');
  late final _ma_engine_get_volume = _ma_engine_get_volumePtr
      .asFunction<double Function(ffi.Pointer<ma_engine>)>(isLeaf: true);

  /// General Library Documentation Undocument By General Corporation & Global Corporation & General Developer
  int ma_engine_set_gain_db(
    ffi.Pointer<ma_engine> pEngine,
    double gainDB,
  ) {
    return _ma_engine_set_gain_db(
      pEngine,
      gainDB,
    );
  }

  late final _ma_engine_set_gain_dbPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int32 Function(
              ffi.Pointer<ma_engine>, ffi.Float)>>('ma_engine_set_gain_db');
  late final _ma_engine_set_gain_db = _ma_engine_set_gain_dbPtr
      .asFunction<int Function(ffi.Pointer<ma_engine>, double)>(isLeaf: true);

  /// General Library Documentation Undocument By General Corporation & Global Corporation & General Developer
  double ma_engine_get_gain_db(
    ffi.Pointer<ma_engine> pEngine,
  ) {
    return _ma_engine_get_gain_db(
      pEngine,
    );
  }

  late final _ma_engine_get_gain_dbPtr =
      _lookup<ffi.NativeFunction<ffi.Float Function(ffi.Pointer<ma_engine>)>>(
          'ma_engine_get_gain_db');
  late final _ma_engine_get_gain_db = _ma_engine_get_gain_dbPtr
      .asFunction<double Function(ffi.Pointer<ma_engine>)>(isLeaf: true);

  /// General Library Documentation Undocument By General Corporation & Global Corporation & General Developer
  int ma_engine_get_listener_count(
    ffi.Pointer<ma_engine> pEngine,
  ) {
    return _ma_engine_get_listener_count(
      pEngine,
    );
  }

  late final _ma_engine_get_listener_countPtr =
      _lookup<ffi.NativeFunction<ma_uint32 Function(ffi.Pointer<ma_engine>)>>(
          'ma_engine_get_listener_count');
  late final _ma_engine_get_listener_count = _ma_engine_get_listener_countPtr
      .asFunction<int Function(ffi.Pointer<ma_engine>)>(isLeaf: true);

  /// General Library Documentation Undocument By General Corporation & Global Corporation & General Developer
  int ma_engine_find_closest_listener(
    ffi.Pointer<ma_engine> pEngine,
    double absolutePosX,
    double absolutePosY,
    double absolutePosZ,
  ) {
    return _ma_engine_find_closest_listener(
      pEngine,
      absolutePosX,
      absolutePosY,
      absolutePosZ,
    );
  }

  late final _ma_engine_find_closest_listenerPtr = _lookup<
      ffi.NativeFunction<
          ma_uint32 Function(ffi.Pointer<ma_engine>, ffi.Float, ffi.Float,
              ffi.Float)>>('ma_engine_find_closest_listener');
  late final _ma_engine_find_closest_listener =
      _ma_engine_find_closest_listenerPtr.asFunction<
          int Function(
              ffi.Pointer<ma_engine>, double, double, double)>(isLeaf: true);

  /// General Library Documentation Undocument By General Corporation & Global Corporation & General Developer
  void ma_engine_listener_set_position(
    ffi.Pointer<ma_engine> pEngine,
    int listenerIndex,
    double x,
    double y,
    double z,
  ) {
    return _ma_engine_listener_set_position(
      pEngine,
      listenerIndex,
      x,
      y,
      z,
    );
  }

  late final _ma_engine_listener_set_positionPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Pointer<ma_engine>, ma_uint32, ffi.Float,
              ffi.Float, ffi.Float)>>('ma_engine_listener_set_position');
  late final _ma_engine_listener_set_position =
      _ma_engine_listener_set_positionPtr.asFunction<
          void Function(ffi.Pointer<ma_engine>, int, double, double,
              double)>(isLeaf: true);

  /// General Library Documentation Undocument By General Corporation & Global Corporation & General Developer
  ma_vec3f ma_engine_listener_get_position(
    ffi.Pointer<ma_engine> pEngine,
    int listenerIndex,
  ) {
    return _ma_engine_listener_get_position(
      pEngine,
      listenerIndex,
    );
  }

  late final _ma_engine_listener_get_positionPtr = _lookup<
      ffi.NativeFunction<
          ma_vec3f Function(ffi.Pointer<ma_engine>,
              ma_uint32)>>('ma_engine_listener_get_position');
  late final _ma_engine_listener_get_position =
      _ma_engine_listener_get_positionPtr
          .asFunction<ma_vec3f Function(ffi.Pointer<ma_engine>, int)>(
              isLeaf: true);

  /// General Library Documentation Undocument By General Corporation & Global Corporation & General Developer
  void ma_engine_listener_set_direction(
    ffi.Pointer<ma_engine> pEngine,
    int listenerIndex,
    double x,
    double y,
    double z,
  ) {
    return _ma_engine_listener_set_direction(
      pEngine,
      listenerIndex,
      x,
      y,
      z,
    );
  }

  late final _ma_engine_listener_set_directionPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Pointer<ma_engine>, ma_uint32, ffi.Float,
              ffi.Float, ffi.Float)>>('ma_engine_listener_set_direction');
  late final _ma_engine_listener_set_direction =
      _ma_engine_listener_set_directionPtr.asFunction<
          void Function(ffi.Pointer<ma_engine>, int, double, double,
              double)>(isLeaf: true);

  /// General Library Documentation Undocument By General Corporation & Global Corporation & General Developer
  ma_vec3f ma_engine_listener_get_direction(
    ffi.Pointer<ma_engine> pEngine,
    int listenerIndex,
  ) {
    return _ma_engine_listener_get_direction(
      pEngine,
      listenerIndex,
    );
  }

  late final _ma_engine_listener_get_directionPtr = _lookup<
      ffi.NativeFunction<
          ma_vec3f Function(ffi.Pointer<ma_engine>,
              ma_uint32)>>('ma_engine_listener_get_direction');
  late final _ma_engine_listener_get_direction =
      _ma_engine_listener_get_directionPtr
          .asFunction<ma_vec3f Function(ffi.Pointer<ma_engine>, int)>(
              isLeaf: true);

  /// General Library Documentation Undocument By General Corporation & Global Corporation & General Developer
  void ma_engine_listener_set_velocity(
    ffi.Pointer<ma_engine> pEngine,
    int listenerIndex,
    double x,
    double y,
    double z,
  ) {
    return _ma_engine_listener_set_velocity(
      pEngine,
      listenerIndex,
      x,
      y,
      z,
    );
  }

  late final _ma_engine_listener_set_velocityPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Pointer<ma_engine>, ma_uint32, ffi.Float,
              ffi.Float, ffi.Float)>>('ma_engine_listener_set_velocity');
  late final _ma_engine_listener_set_velocity =
      _ma_engine_listener_set_velocityPtr.asFunction<
          void Function(ffi.Pointer<ma_engine>, int, double, double,
              double)>(isLeaf: true);

  /// General Library Documentation Undocument By General Corporation & Global Corporation & General Developer
  ma_vec3f ma_engine_listener_get_velocity(
    ffi.Pointer<ma_engine> pEngine,
    int listenerIndex,
  ) {
    return _ma_engine_listener_get_velocity(
      pEngine,
      listenerIndex,
    );
  }

  late final _ma_engine_listener_get_velocityPtr = _lookup<
      ffi.NativeFunction<
          ma_vec3f Function(ffi.Pointer<ma_engine>,
              ma_uint32)>>('ma_engine_listener_get_velocity');
  late final _ma_engine_listener_get_velocity =
      _ma_engine_listener_get_velocityPtr
          .asFunction<ma_vec3f Function(ffi.Pointer<ma_engine>, int)>(
              isLeaf: true);

  /// General Library Documentation Undocument By General Corporation & Global Corporation & General Developer
  void ma_engine_listener_set_cone(
    ffi.Pointer<ma_engine> pEngine,
    int listenerIndex,
    double innerAngleInRadians,
    double outerAngleInRadians,
    double outerGain,
  ) {
    return _ma_engine_listener_set_cone(
      pEngine,
      listenerIndex,
      innerAngleInRadians,
      outerAngleInRadians,
      outerGain,
    );
  }

  late final _ma_engine_listener_set_conePtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Pointer<ma_engine>, ma_uint32, ffi.Float,
              ffi.Float, ffi.Float)>>('ma_engine_listener_set_cone');
  late final _ma_engine_listener_set_cone =
      _ma_engine_listener_set_conePtr.asFunction<
          void Function(ffi.Pointer<ma_engine>, int, double, double,
              double)>(isLeaf: true);

  /// General Library Documentation Undocument By General Corporation & Global Corporation & General Developer
  void ma_engine_listener_get_cone(
    ffi.Pointer<ma_engine> pEngine,
    int listenerIndex,
    ffi.Pointer<ffi.Float> pInnerAngleInRadians,
    ffi.Pointer<ffi.Float> pOuterAngleInRadians,
    ffi.Pointer<ffi.Float> pOuterGain,
  ) {
    return _ma_engine_listener_get_cone(
      pEngine,
      listenerIndex,
      pInnerAngleInRadians,
      pOuterAngleInRadians,
      pOuterGain,
    );
  }

  late final _ma_engine_listener_get_conePtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(
              ffi.Pointer<ma_engine>,
              ma_uint32,
              ffi.Pointer<ffi.Float>,
              ffi.Pointer<ffi.Float>,
              ffi.Pointer<ffi.Float>)>>('ma_engine_listener_get_cone');
  late final _ma_engine_listener_get_cone =
      _ma_engine_listener_get_conePtr.asFunction<
          void Function(ffi.Pointer<ma_engine>, int, ffi.Pointer<ffi.Float>,
              ffi.Pointer<ffi.Float>, ffi.Pointer<ffi.Float>)>(isLeaf: true);

  /// General Library Documentation Undocument By General Corporation & Global Corporation & General Developer
  void ma_engine_listener_set_world_up(
    ffi.Pointer<ma_engine> pEngine,
    int listenerIndex,
    double x,
    double y,
    double z,
  ) {
    return _ma_engine_listener_set_world_up(
      pEngine,
      listenerIndex,
      x,
      y,
      z,
    );
  }

  late final _ma_engine_listener_set_world_upPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Pointer<ma_engine>, ma_uint32, ffi.Float,
              ffi.Float, ffi.Float)>>('ma_engine_listener_set_world_up');
  late final _ma_engine_listener_set_world_up =
      _ma_engine_listener_set_world_upPtr.asFunction<
          void Function(ffi.Pointer<ma_engine>, int, double, double,
              double)>(isLeaf: true);

  /// General Library Documentation Undocument By General Corporation & Global Corporation & General Developer
  ma_vec3f ma_engine_listener_get_world_up(
    ffi.Pointer<ma_engine> pEngine,
    int listenerIndex,
  ) {
    return _ma_engine_listener_get_world_up(
      pEngine,
      listenerIndex,
    );
  }

  late final _ma_engine_listener_get_world_upPtr = _lookup<
      ffi.NativeFunction<
          ma_vec3f Function(ffi.Pointer<ma_engine>,
              ma_uint32)>>('ma_engine_listener_get_world_up');
  late final _ma_engine_listener_get_world_up =
      _ma_engine_listener_get_world_upPtr
          .asFunction<ma_vec3f Function(ffi.Pointer<ma_engine>, int)>(
              isLeaf: true);

  /// General Library Documentation Undocument By General Corporation & Global Corporation & General Developer
  void ma_engine_listener_set_enabled(
    ffi.Pointer<ma_engine> pEngine,
    int listenerIndex,
    int isEnabled,
  ) {
    return _ma_engine_listener_set_enabled(
      pEngine,
      listenerIndex,
      isEnabled,
    );
  }

  late final _ma_engine_listener_set_enabledPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Pointer<ma_engine>, ma_uint32,
              ma_bool32)>>('ma_engine_listener_set_enabled');
  late final _ma_engine_listener_set_enabled =
      _ma_engine_listener_set_enabledPtr
          .asFunction<void Function(ffi.Pointer<ma_engine>, int, int)>(
              isLeaf: true);

  /// General Library Documentation Undocument By General Corporation & Global Corporation & General Developer
  int ma_engine_listener_is_enabled(
    ffi.Pointer<ma_engine> pEngine,
    int listenerIndex,
  ) {
    return _ma_engine_listener_is_enabled(
      pEngine,
      listenerIndex,
    );
  }

  late final _ma_engine_listener_is_enabledPtr = _lookup<
      ffi.NativeFunction<
          ma_bool32 Function(ffi.Pointer<ma_engine>,
              ma_uint32)>>('ma_engine_listener_is_enabled');
  late final _ma_engine_listener_is_enabled = _ma_engine_listener_is_enabledPtr
      .asFunction<int Function(ffi.Pointer<ma_engine>, int)>(isLeaf: true);

  /// General Library Documentation Undocument By General Corporation & Global Corporation & General Developer
  int ma_engine_play_sound_ex(
    ffi.Pointer<ma_engine> pEngine,
    ffi.Pointer<ffi.Char> pFilePath,
    ffi.Pointer<ma_node> pNode,
    int nodeInputBusIndex,
  ) {
    return _ma_engine_play_sound_ex(
      pEngine,
      pFilePath,
      pNode,
      nodeInputBusIndex,
    );
  }

  late final _ma_engine_play_sound_exPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int32 Function(ffi.Pointer<ma_engine>, ffi.Pointer<ffi.Char>,
              ffi.Pointer<ma_node>, ma_uint32)>>('ma_engine_play_sound_ex');
  late final _ma_engine_play_sound_ex = _ma_engine_play_sound_exPtr.asFunction<
      int Function(ffi.Pointer<ma_engine>, ffi.Pointer<ffi.Char>,
          ffi.Pointer<ma_node>, int)>(isLeaf: true);

  /// General Library Documentation Undocument By General Corporation & Global Corporation & General Developer
  int ma_engine_play_sound(
    ffi.Pointer<ma_engine> pEngine,
    ffi.Pointer<ffi.Char> pFilePath,
    ffi.Pointer<ma_sound_group> pGroup,
  ) {
    return _ma_engine_play_sound(
      pEngine,
      pFilePath,
      pGroup,
    );
  }

  late final _ma_engine_play_soundPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int32 Function(ffi.Pointer<ma_engine>, ffi.Pointer<ffi.Char>,
              ffi.Pointer<ma_sound_group>)>>('ma_engine_play_sound');
  late final _ma_engine_play_sound = _ma_engine_play_soundPtr.asFunction<
      int Function(ffi.Pointer<ma_engine>, ffi.Pointer<ffi.Char>,
          ffi.Pointer<ma_sound_group>)>(isLeaf: true);

  /// General Library Documentation Undocument By General Corporation & Global Corporation & General Developer
  int ma_sound_init_from_file(
    ffi.Pointer<ma_engine> pEngine,
    ffi.Pointer<ffi.Char> pFilePath,
    int flags,
    ffi.Pointer<ma_sound_group> pGroup,
    ffi.Pointer<ma_fence> pDoneFence,
    ffi.Pointer<ma_sound> pSound,
  ) {
    return _ma_sound_init_from_file(
      pEngine,
      pFilePath,
      flags,
      pGroup,
      pDoneFence,
      pSound,
    );
  }

  late final _ma_sound_init_from_filePtr = _lookup<
      ffi.NativeFunction<
          ffi.Int32 Function(
              ffi.Pointer<ma_engine>,
              ffi.Pointer<ffi.Char>,
              ma_uint32,
              ffi.Pointer<ma_sound_group>,
              ffi.Pointer<ma_fence>,
              ffi.Pointer<ma_sound>)>>('ma_sound_init_from_file');
  late final _ma_sound_init_from_file = _ma_sound_init_from_filePtr.asFunction<
      int Function(
          ffi.Pointer<ma_engine>,
          ffi.Pointer<ffi.Char>,
          int,
          ffi.Pointer<ma_sound_group>,
          ffi.Pointer<ma_fence>,
          ffi.Pointer<ma_sound>)>(isLeaf: true);

  /// General Library Documentation Undocument By General Corporation & Global Corporation & General Developer
  int ma_sound_init_from_file_w(
    ffi.Pointer<ma_engine> pEngine,
    ffi.Pointer<ffi.WChar> pFilePath,
    int flags,
    ffi.Pointer<ma_sound_group> pGroup,
    ffi.Pointer<ma_fence> pDoneFence,
    ffi.Pointer<ma_sound> pSound,
  ) {
    return _ma_sound_init_from_file_w(
      pEngine,
      pFilePath,
      flags,
      pGroup,
      pDoneFence,
      pSound,
    );
  }

  late final _ma_sound_init_from_file_wPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int32 Function(
              ffi.Pointer<ma_engine>,
              ffi.Pointer<ffi.WChar>,
              ma_uint32,
              ffi.Pointer<ma_sound_group>,
              ffi.Pointer<ma_fence>,
              ffi.Pointer<ma_sound>)>>('ma_sound_init_from_file_w');
  late final _ma_sound_init_from_file_w =
      _ma_sound_init_from_file_wPtr.asFunction<
          int Function(
              ffi.Pointer<ma_engine>,
              ffi.Pointer<ffi.WChar>,
              int,
              ffi.Pointer<ma_sound_group>,
              ffi.Pointer<ma_fence>,
              ffi.Pointer<ma_sound>)>(isLeaf: true);

  /// General Library Documentation Undocument By General Corporation & Global Corporation & General Developer
  int ma_sound_init_copy(
    ffi.Pointer<ma_engine> pEngine,
    ffi.Pointer<ma_sound> pExistingSound,
    int flags,
    ffi.Pointer<ma_sound_group> pGroup,
    ffi.Pointer<ma_sound> pSound,
  ) {
    return _ma_sound_init_copy(
      pEngine,
      pExistingSound,
      flags,
      pGroup,
      pSound,
    );
  }

  late final _ma_sound_init_copyPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int32 Function(
              ffi.Pointer<ma_engine>,
              ffi.Pointer<ma_sound>,
              ma_uint32,
              ffi.Pointer<ma_sound_group>,
              ffi.Pointer<ma_sound>)>>('ma_sound_init_copy');
  late final _ma_sound_init_copy = _ma_sound_init_copyPtr.asFunction<
      int Function(ffi.Pointer<ma_engine>, ffi.Pointer<ma_sound>, int,
          ffi.Pointer<ma_sound_group>, ffi.Pointer<ma_sound>)>(isLeaf: true);

  /// General Library Documentation Undocument By General Corporation & Global Corporation & General Developer
  int ma_sound_init_from_data_source(
    ffi.Pointer<ma_engine> pEngine,
    ffi.Pointer<ma_data_source> pDataSource,
    int flags,
    ffi.Pointer<ma_sound_group> pGroup,
    ffi.Pointer<ma_sound> pSound,
  ) {
    return _ma_sound_init_from_data_source(
      pEngine,
      pDataSource,
      flags,
      pGroup,
      pSound,
    );
  }

  late final _ma_sound_init_from_data_sourcePtr = _lookup<
      ffi.NativeFunction<
          ffi.Int32 Function(
              ffi.Pointer<ma_engine>,
              ffi.Pointer<ma_data_source>,
              ma_uint32,
              ffi.Pointer<ma_sound_group>,
              ffi.Pointer<ma_sound>)>>('ma_sound_init_from_data_source');
  late final _ma_sound_init_from_data_source =
      _ma_sound_init_from_data_sourcePtr.asFunction<
          int Function(
              ffi.Pointer<ma_engine>,
              ffi.Pointer<ma_data_source>,
              int,
              ffi.Pointer<ma_sound_group>,
              ffi.Pointer<ma_sound>)>(isLeaf: true);

  /// General Library Documentation Undocument By General Corporation & Global Corporation & General Developer
  int ma_sound_init_ex(
    ffi.Pointer<ma_engine> pEngine,
    ffi.Pointer<ma_sound_config> pConfig,
    ffi.Pointer<ma_sound> pSound,
  ) {
    return _ma_sound_init_ex(
      pEngine,
      pConfig,
      pSound,
    );
  }

  late final _ma_sound_init_exPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int32 Function(
              ffi.Pointer<ma_engine>,
              ffi.Pointer<ma_sound_config>,
              ffi.Pointer<ma_sound>)>>('ma_sound_init_ex');
  late final _ma_sound_init_ex = _ma_sound_init_exPtr.asFunction<
      int Function(ffi.Pointer<ma_engine>, ffi.Pointer<ma_sound_config>,
          ffi.Pointer<ma_sound>)>(isLeaf: true);

  /// General Library Documentation Undocument By General Corporation & Global Corporation & General Developer
  void ma_sound_uninit(
    ffi.Pointer<ma_sound> pSound,
  ) {
    return _ma_sound_uninit(
      pSound,
    );
  }

  late final _ma_sound_uninitPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Pointer<ma_sound>)>>(
          'ma_sound_uninit');
  late final _ma_sound_uninit = _ma_sound_uninitPtr
      .asFunction<void Function(ffi.Pointer<ma_sound>)>(isLeaf: true);

  /// General Library Documentation Undocument By General Corporation & Global Corporation & General Developer
  ffi.Pointer<ma_engine> ma_sound_get_engine(
    ffi.Pointer<ma_sound> pSound,
  ) {
    return _ma_sound_get_engine(
      pSound,
    );
  }

  late final _ma_sound_get_enginePtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ma_engine> Function(
              ffi.Pointer<ma_sound>)>>('ma_sound_get_engine');
  late final _ma_sound_get_engine = _ma_sound_get_enginePtr
      .asFunction<ffi.Pointer<ma_engine> Function(ffi.Pointer<ma_sound>)>(
          isLeaf: true);

  /// General Library Documentation Undocument By General Corporation & Global Corporation & General Developer
  ffi.Pointer<ma_data_source> ma_sound_get_data_source(
    ffi.Pointer<ma_sound> pSound,
  ) {
    return _ma_sound_get_data_source(
      pSound,
    );
  }

  late final _ma_sound_get_data_sourcePtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ma_data_source> Function(
              ffi.Pointer<ma_sound>)>>('ma_sound_get_data_source');
  late final _ma_sound_get_data_source = _ma_sound_get_data_sourcePtr
      .asFunction<ffi.Pointer<ma_data_source> Function(ffi.Pointer<ma_sound>)>(
          isLeaf: true);

  /// General Library Documentation Undocument By General Corporation & Global Corporation & General Developer
  int ma_sound_start(
    ffi.Pointer<ma_sound> pSound,
  ) {
    return _ma_sound_start(
      pSound,
    );
  }

  late final _ma_sound_startPtr =
      _lookup<ffi.NativeFunction<ffi.Int32 Function(ffi.Pointer<ma_sound>)>>(
          'ma_sound_start');
  late final _ma_sound_start = _ma_sound_startPtr
      .asFunction<int Function(ffi.Pointer<ma_sound>)>(isLeaf: true);

  /// General Library Documentation Undocument By General Corporation & Global Corporation & General Developer
  int ma_sound_stop(
    ffi.Pointer<ma_sound> pSound,
  ) {
    return _ma_sound_stop(
      pSound,
    );
  }

  late final _ma_sound_stopPtr =
      _lookup<ffi.NativeFunction<ffi.Int32 Function(ffi.Pointer<ma_sound>)>>(
          'ma_sound_stop');
  late final _ma_sound_stop = _ma_sound_stopPtr
      .asFunction<int Function(ffi.Pointer<ma_sound>)>(isLeaf: true);

  /// General Library Documentation Undocument By General Corporation & Global Corporation & General Developer
  int ma_sound_stop_with_fade_in_pcm_frames(
    ffi.Pointer<ma_sound> pSound,
    int fadeLengthInFrames,
  ) {
    return _ma_sound_stop_with_fade_in_pcm_frames(
      pSound,
      fadeLengthInFrames,
    );
  }

  late final _ma_sound_stop_with_fade_in_pcm_framesPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int32 Function(ffi.Pointer<ma_sound>,
              ma_uint64)>>('ma_sound_stop_with_fade_in_pcm_frames');
  late final _ma_sound_stop_with_fade_in_pcm_frames =
      _ma_sound_stop_with_fade_in_pcm_framesPtr
          .asFunction<int Function(ffi.Pointer<ma_sound>, int)>(isLeaf: true);

  /// General Library Documentation Undocument By General Corporation & Global Corporation & General Developer
  int ma_sound_stop_with_fade_in_milliseconds(
    ffi.Pointer<ma_sound> pSound,
    int fadeLengthInFrames,
  ) {
    return _ma_sound_stop_with_fade_in_milliseconds(
      pSound,
      fadeLengthInFrames,
    );
  }

  late final _ma_sound_stop_with_fade_in_millisecondsPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int32 Function(ffi.Pointer<ma_sound>,
              ma_uint64)>>('ma_sound_stop_with_fade_in_milliseconds');
  late final _ma_sound_stop_with_fade_in_milliseconds =
      _ma_sound_stop_with_fade_in_millisecondsPtr
          .asFunction<int Function(ffi.Pointer<ma_sound>, int)>(isLeaf: true);

  /// General Library Documentation Undocument By General Corporation & Global Corporation & General Developer
  void ma_sound_set_volume(
    ffi.Pointer<ma_sound> pSound,
    double volume,
  ) {
    return _ma_sound_set_volume(
      pSound,
      volume,
    );
  }

  late final _ma_sound_set_volumePtr = _lookup<
          ffi
          .NativeFunction<ffi.Void Function(ffi.Pointer<ma_sound>, ffi.Float)>>(
      'ma_sound_set_volume');
  late final _ma_sound_set_volume = _ma_sound_set_volumePtr
      .asFunction<void Function(ffi.Pointer<ma_sound>, double)>(isLeaf: true);

  /// General Library Documentation Undocument By General Corporation & Global Corporation & General Developer
  double ma_sound_get_volume(
    ffi.Pointer<ma_sound> pSound,
  ) {
    return _ma_sound_get_volume(
      pSound,
    );
  }

  late final _ma_sound_get_volumePtr =
      _lookup<ffi.NativeFunction<ffi.Float Function(ffi.Pointer<ma_sound>)>>(
          'ma_sound_get_volume');
  late final _ma_sound_get_volume = _ma_sound_get_volumePtr
      .asFunction<double Function(ffi.Pointer<ma_sound>)>(isLeaf: true);

  /// General Library Documentation Undocument By General Corporation & Global Corporation & General Developer
  void ma_sound_set_pan(
    ffi.Pointer<ma_sound> pSound,
    double pan,
  ) {
    return _ma_sound_set_pan(
      pSound,
      pan,
    );
  }

  late final _ma_sound_set_panPtr = _lookup<
          ffi
          .NativeFunction<ffi.Void Function(ffi.Pointer<ma_sound>, ffi.Float)>>(
      'ma_sound_set_pan');
  late final _ma_sound_set_pan = _ma_sound_set_panPtr
      .asFunction<void Function(ffi.Pointer<ma_sound>, double)>(isLeaf: true);

  /// General Library Documentation Undocument By General Corporation & Global Corporation & General Developer
  double ma_sound_get_pan(
    ffi.Pointer<ma_sound> pSound,
  ) {
    return _ma_sound_get_pan(
      pSound,
    );
  }

  late final _ma_sound_get_panPtr =
      _lookup<ffi.NativeFunction<ffi.Float Function(ffi.Pointer<ma_sound>)>>(
          'ma_sound_get_pan');
  late final _ma_sound_get_pan = _ma_sound_get_panPtr
      .asFunction<double Function(ffi.Pointer<ma_sound>)>(isLeaf: true);

  /// General Library Documentation Undocument By General Corporation & Global Corporation & General Developer
  void ma_sound_set_pan_mode(
    ffi.Pointer<ma_sound> pSound,
    int panMode,
  ) {
    return _ma_sound_set_pan_mode(
      pSound,
      panMode,
    );
  }

  late final _ma_sound_set_pan_modePtr = _lookup<
          ffi
          .NativeFunction<ffi.Void Function(ffi.Pointer<ma_sound>, ffi.Int32)>>(
      'ma_sound_set_pan_mode');
  late final _ma_sound_set_pan_mode = _ma_sound_set_pan_modePtr
      .asFunction<void Function(ffi.Pointer<ma_sound>, int)>(isLeaf: true);

  /// General Library Documentation Undocument By General Corporation & Global Corporation & General Developer
  int ma_sound_get_pan_mode(
    ffi.Pointer<ma_sound> pSound,
  ) {
    return _ma_sound_get_pan_mode(
      pSound,
    );
  }

  late final _ma_sound_get_pan_modePtr =
      _lookup<ffi.NativeFunction<ffi.Int32 Function(ffi.Pointer<ma_sound>)>>(
          'ma_sound_get_pan_mode');
  late final _ma_sound_get_pan_mode = _ma_sound_get_pan_modePtr
      .asFunction<int Function(ffi.Pointer<ma_sound>)>(isLeaf: true);

  /// General Library Documentation Undocument By General Corporation & Global Corporation & General Developer
  void ma_sound_set_pitch(
    ffi.Pointer<ma_sound> pSound,
    double pitch,
  ) {
    return _ma_sound_set_pitch(
      pSound,
      pitch,
    );
  }

  late final _ma_sound_set_pitchPtr = _lookup<
          ffi
          .NativeFunction<ffi.Void Function(ffi.Pointer<ma_sound>, ffi.Float)>>(
      'ma_sound_set_pitch');
  late final _ma_sound_set_pitch = _ma_sound_set_pitchPtr
      .asFunction<void Function(ffi.Pointer<ma_sound>, double)>(isLeaf: true);

  /// General Library Documentation Undocument By General Corporation & Global Corporation & General Developer
  double ma_sound_get_pitch(
    ffi.Pointer<ma_sound> pSound,
  ) {
    return _ma_sound_get_pitch(
      pSound,
    );
  }

  late final _ma_sound_get_pitchPtr =
      _lookup<ffi.NativeFunction<ffi.Float Function(ffi.Pointer<ma_sound>)>>(
          'ma_sound_get_pitch');
  late final _ma_sound_get_pitch = _ma_sound_get_pitchPtr
      .asFunction<double Function(ffi.Pointer<ma_sound>)>(isLeaf: true);

  /// General Library Documentation Undocument By General Corporation & Global Corporation & General Developer
  void ma_sound_set_spatialization_enabled(
    ffi.Pointer<ma_sound> pSound,
    int enabled,
  ) {
    return _ma_sound_set_spatialization_enabled(
      pSound,
      enabled,
    );
  }

  late final _ma_sound_set_spatialization_enabledPtr = _lookup<
          ffi
          .NativeFunction<ffi.Void Function(ffi.Pointer<ma_sound>, ma_bool32)>>(
      'ma_sound_set_spatialization_enabled');
  late final _ma_sound_set_spatialization_enabled =
      _ma_sound_set_spatialization_enabledPtr
          .asFunction<void Function(ffi.Pointer<ma_sound>, int)>(isLeaf: true);

  /// General Library Documentation Undocument By General Corporation & Global Corporation & General Developer
  int ma_sound_is_spatialization_enabled(
    ffi.Pointer<ma_sound> pSound,
  ) {
    return _ma_sound_is_spatialization_enabled(
      pSound,
    );
  }

  late final _ma_sound_is_spatialization_enabledPtr =
      _lookup<ffi.NativeFunction<ma_bool32 Function(ffi.Pointer<ma_sound>)>>(
          'ma_sound_is_spatialization_enabled');
  late final _ma_sound_is_spatialization_enabled =
      _ma_sound_is_spatialization_enabledPtr
          .asFunction<int Function(ffi.Pointer<ma_sound>)>(isLeaf: true);

  /// General Library Documentation Undocument By General Corporation & Global Corporation & General Developer
  void ma_sound_set_pinned_listener_index(
    ffi.Pointer<ma_sound> pSound,
    int listenerIndex,
  ) {
    return _ma_sound_set_pinned_listener_index(
      pSound,
      listenerIndex,
    );
  }

  late final _ma_sound_set_pinned_listener_indexPtr = _lookup<
          ffi
          .NativeFunction<ffi.Void Function(ffi.Pointer<ma_sound>, ma_uint32)>>(
      'ma_sound_set_pinned_listener_index');
  late final _ma_sound_set_pinned_listener_index =
      _ma_sound_set_pinned_listener_indexPtr
          .asFunction<void Function(ffi.Pointer<ma_sound>, int)>(isLeaf: true);

  /// General Library Documentation Undocument By General Corporation & Global Corporation & General Developer
  int ma_sound_get_pinned_listener_index(
    ffi.Pointer<ma_sound> pSound,
  ) {
    return _ma_sound_get_pinned_listener_index(
      pSound,
    );
  }

  late final _ma_sound_get_pinned_listener_indexPtr =
      _lookup<ffi.NativeFunction<ma_uint32 Function(ffi.Pointer<ma_sound>)>>(
          'ma_sound_get_pinned_listener_index');
  late final _ma_sound_get_pinned_listener_index =
      _ma_sound_get_pinned_listener_indexPtr
          .asFunction<int Function(ffi.Pointer<ma_sound>)>(isLeaf: true);

  /// General Library Documentation Undocument By General Corporation & Global Corporation & General Developer
  int ma_sound_get_listener_index(
    ffi.Pointer<ma_sound> pSound,
  ) {
    return _ma_sound_get_listener_index(
      pSound,
    );
  }

  late final _ma_sound_get_listener_indexPtr =
      _lookup<ffi.NativeFunction<ma_uint32 Function(ffi.Pointer<ma_sound>)>>(
          'ma_sound_get_listener_index');
  late final _ma_sound_get_listener_index = _ma_sound_get_listener_indexPtr
      .asFunction<int Function(ffi.Pointer<ma_sound>)>(isLeaf: true);

  /// General Library Documentation Undocument By General Corporation & Global Corporation & General Developer
  ma_vec3f ma_sound_get_direction_to_listener(
    ffi.Pointer<ma_sound> pSound,
  ) {
    return _ma_sound_get_direction_to_listener(
      pSound,
    );
  }

  late final _ma_sound_get_direction_to_listenerPtr =
      _lookup<ffi.NativeFunction<ma_vec3f Function(ffi.Pointer<ma_sound>)>>(
          'ma_sound_get_direction_to_listener');
  late final _ma_sound_get_direction_to_listener =
      _ma_sound_get_direction_to_listenerPtr
          .asFunction<ma_vec3f Function(ffi.Pointer<ma_sound>)>(isLeaf: true);

  /// General Library Documentation Undocument By General Corporation & Global Corporation & General Developer
  void ma_sound_set_position(
    ffi.Pointer<ma_sound> pSound,
    double x,
    double y,
    double z,
  ) {
    return _ma_sound_set_position(
      pSound,
      x,
      y,
      z,
    );
  }

  late final _ma_sound_set_positionPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Pointer<ma_sound>, ffi.Float, ffi.Float,
              ffi.Float)>>('ma_sound_set_position');
  late final _ma_sound_set_position = _ma_sound_set_positionPtr
      .asFunction<void Function(ffi.Pointer<ma_sound>, double, double, double)>(
          isLeaf: true);

  /// General Library Documentation Undocument By General Corporation & Global Corporation & General Developer
  ma_vec3f ma_sound_get_position(
    ffi.Pointer<ma_sound> pSound,
  ) {
    return _ma_sound_get_position(
      pSound,
    );
  }

  late final _ma_sound_get_positionPtr =
      _lookup<ffi.NativeFunction<ma_vec3f Function(ffi.Pointer<ma_sound>)>>(
          'ma_sound_get_position');
  late final _ma_sound_get_position = _ma_sound_get_positionPtr
      .asFunction<ma_vec3f Function(ffi.Pointer<ma_sound>)>(isLeaf: true);

  /// General Library Documentation Undocument By General Corporation & Global Corporation & General Developer
  void ma_sound_set_direction(
    ffi.Pointer<ma_sound> pSound,
    double x,
    double y,
    double z,
  ) {
    return _ma_sound_set_direction(
      pSound,
      x,
      y,
      z,
    );
  }

  late final _ma_sound_set_directionPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Pointer<ma_sound>, ffi.Float, ffi.Float,
              ffi.Float)>>('ma_sound_set_direction');
  late final _ma_sound_set_direction = _ma_sound_set_directionPtr
      .asFunction<void Function(ffi.Pointer<ma_sound>, double, double, double)>(
          isLeaf: true);

  /// General Library Documentation Undocument By General Corporation & Global Corporation & General Developer
  ma_vec3f ma_sound_get_direction(
    ffi.Pointer<ma_sound> pSound,
  ) {
    return _ma_sound_get_direction(
      pSound,
    );
  }

  late final _ma_sound_get_directionPtr =
      _lookup<ffi.NativeFunction<ma_vec3f Function(ffi.Pointer<ma_sound>)>>(
          'ma_sound_get_direction');
  late final _ma_sound_get_direction = _ma_sound_get_directionPtr
      .asFunction<ma_vec3f Function(ffi.Pointer<ma_sound>)>(isLeaf: true);

  /// General Library Documentation Undocument By General Corporation & Global Corporation & General Developer
  void ma_sound_set_velocity(
    ffi.Pointer<ma_sound> pSound,
    double x,
    double y,
    double z,
  ) {
    return _ma_sound_set_velocity(
      pSound,
      x,
      y,
      z,
    );
  }

  late final _ma_sound_set_velocityPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Pointer<ma_sound>, ffi.Float, ffi.Float,
              ffi.Float)>>('ma_sound_set_velocity');
  late final _ma_sound_set_velocity = _ma_sound_set_velocityPtr
      .asFunction<void Function(ffi.Pointer<ma_sound>, double, double, double)>(
          isLeaf: true);

  /// General Library Documentation Undocument By General Corporation & Global Corporation & General Developer
  ma_vec3f ma_sound_get_velocity(
    ffi.Pointer<ma_sound> pSound,
  ) {
    return _ma_sound_get_velocity(
      pSound,
    );
  }

  late final _ma_sound_get_velocityPtr =
      _lookup<ffi.NativeFunction<ma_vec3f Function(ffi.Pointer<ma_sound>)>>(
          'ma_sound_get_velocity');
  late final _ma_sound_get_velocity = _ma_sound_get_velocityPtr
      .asFunction<ma_vec3f Function(ffi.Pointer<ma_sound>)>(isLeaf: true);

  /// General Library Documentation Undocument By General Corporation & Global Corporation & General Developer
  void ma_sound_set_attenuation_model(
    ffi.Pointer<ma_sound> pSound,
    int attenuationModel,
  ) {
    return _ma_sound_set_attenuation_model(
      pSound,
      attenuationModel,
    );
  }

  late final _ma_sound_set_attenuation_modelPtr = _lookup<
          ffi
          .NativeFunction<ffi.Void Function(ffi.Pointer<ma_sound>, ffi.Int32)>>(
      'ma_sound_set_attenuation_model');
  late final _ma_sound_set_attenuation_model =
      _ma_sound_set_attenuation_modelPtr
          .asFunction<void Function(ffi.Pointer<ma_sound>, int)>(isLeaf: true);

  /// General Library Documentation Undocument By General Corporation & Global Corporation & General Developer
  int ma_sound_get_attenuation_model(
    ffi.Pointer<ma_sound> pSound,
  ) {
    return _ma_sound_get_attenuation_model(
      pSound,
    );
  }

  late final _ma_sound_get_attenuation_modelPtr =
      _lookup<ffi.NativeFunction<ffi.Int32 Function(ffi.Pointer<ma_sound>)>>(
          'ma_sound_get_attenuation_model');
  late final _ma_sound_get_attenuation_model =
      _ma_sound_get_attenuation_modelPtr
          .asFunction<int Function(ffi.Pointer<ma_sound>)>(isLeaf: true);

  /// General Library Documentation Undocument By General Corporation & Global Corporation & General Developer
  void ma_sound_set_positioning(
    ffi.Pointer<ma_sound> pSound,
    int positioning,
  ) {
    return _ma_sound_set_positioning(
      pSound,
      positioning,
    );
  }

  late final _ma_sound_set_positioningPtr = _lookup<
          ffi
          .NativeFunction<ffi.Void Function(ffi.Pointer<ma_sound>, ffi.Int32)>>(
      'ma_sound_set_positioning');
  late final _ma_sound_set_positioning = _ma_sound_set_positioningPtr
      .asFunction<void Function(ffi.Pointer<ma_sound>, int)>(isLeaf: true);

  /// General Library Documentation Undocument By General Corporation & Global Corporation & General Developer
  int ma_sound_get_positioning(
    ffi.Pointer<ma_sound> pSound,
  ) {
    return _ma_sound_get_positioning(
      pSound,
    );
  }

  late final _ma_sound_get_positioningPtr =
      _lookup<ffi.NativeFunction<ffi.Int32 Function(ffi.Pointer<ma_sound>)>>(
          'ma_sound_get_positioning');
  late final _ma_sound_get_positioning = _ma_sound_get_positioningPtr
      .asFunction<int Function(ffi.Pointer<ma_sound>)>(isLeaf: true);

  /// General Library Documentation Undocument By General Corporation & Global Corporation & General Developer
  void ma_sound_set_rolloff(
    ffi.Pointer<ma_sound> pSound,
    double rolloff,
  ) {
    return _ma_sound_set_rolloff(
      pSound,
      rolloff,
    );
  }

  late final _ma_sound_set_rolloffPtr = _lookup<
          ffi
          .NativeFunction<ffi.Void Function(ffi.Pointer<ma_sound>, ffi.Float)>>(
      'ma_sound_set_rolloff');
  late final _ma_sound_set_rolloff = _ma_sound_set_rolloffPtr
      .asFunction<void Function(ffi.Pointer<ma_sound>, double)>(isLeaf: true);

  /// General Library Documentation Undocument By General Corporation & Global Corporation & General Developer
  double ma_sound_get_rolloff(
    ffi.Pointer<ma_sound> pSound,
  ) {
    return _ma_sound_get_rolloff(
      pSound,
    );
  }

  late final _ma_sound_get_rolloffPtr =
      _lookup<ffi.NativeFunction<ffi.Float Function(ffi.Pointer<ma_sound>)>>(
          'ma_sound_get_rolloff');
  late final _ma_sound_get_rolloff = _ma_sound_get_rolloffPtr
      .asFunction<double Function(ffi.Pointer<ma_sound>)>(isLeaf: true);

  /// General Library Documentation Undocument By General Corporation & Global Corporation & General Developer
  void ma_sound_set_min_gain(
    ffi.Pointer<ma_sound> pSound,
    double minGain,
  ) {
    return _ma_sound_set_min_gain(
      pSound,
      minGain,
    );
  }

  late final _ma_sound_set_min_gainPtr = _lookup<
          ffi
          .NativeFunction<ffi.Void Function(ffi.Pointer<ma_sound>, ffi.Float)>>(
      'ma_sound_set_min_gain');
  late final _ma_sound_set_min_gain = _ma_sound_set_min_gainPtr
      .asFunction<void Function(ffi.Pointer<ma_sound>, double)>(isLeaf: true);

  /// General Library Documentation Undocument By General Corporation & Global Corporation & General Developer
  double ma_sound_get_min_gain(
    ffi.Pointer<ma_sound> pSound,
  ) {
    return _ma_sound_get_min_gain(
      pSound,
    );
  }

  late final _ma_sound_get_min_gainPtr =
      _lookup<ffi.NativeFunction<ffi.Float Function(ffi.Pointer<ma_sound>)>>(
          'ma_sound_get_min_gain');
  late final _ma_sound_get_min_gain = _ma_sound_get_min_gainPtr
      .asFunction<double Function(ffi.Pointer<ma_sound>)>(isLeaf: true);

  /// General Library Documentation Undocument By General Corporation & Global Corporation & General Developer
  void ma_sound_set_max_gain(
    ffi.Pointer<ma_sound> pSound,
    double maxGain,
  ) {
    return _ma_sound_set_max_gain(
      pSound,
      maxGain,
    );
  }

  late final _ma_sound_set_max_gainPtr = _lookup<
          ffi
          .NativeFunction<ffi.Void Function(ffi.Pointer<ma_sound>, ffi.Float)>>(
      'ma_sound_set_max_gain');
  late final _ma_sound_set_max_gain = _ma_sound_set_max_gainPtr
      .asFunction<void Function(ffi.Pointer<ma_sound>, double)>(isLeaf: true);

  /// General Library Documentation Undocument By General Corporation & Global Corporation & General Developer
  double ma_sound_get_max_gain(
    ffi.Pointer<ma_sound> pSound,
  ) {
    return _ma_sound_get_max_gain(
      pSound,
    );
  }

  late final _ma_sound_get_max_gainPtr =
      _lookup<ffi.NativeFunction<ffi.Float Function(ffi.Pointer<ma_sound>)>>(
          'ma_sound_get_max_gain');
  late final _ma_sound_get_max_gain = _ma_sound_get_max_gainPtr
      .asFunction<double Function(ffi.Pointer<ma_sound>)>(isLeaf: true);

  /// General Library Documentation Undocument By General Corporation & Global Corporation & General Developer
  void ma_sound_set_min_distance(
    ffi.Pointer<ma_sound> pSound,
    double minDistance,
  ) {
    return _ma_sound_set_min_distance(
      pSound,
      minDistance,
    );
  }

  late final _ma_sound_set_min_distancePtr = _lookup<
          ffi
          .NativeFunction<ffi.Void Function(ffi.Pointer<ma_sound>, ffi.Float)>>(
      'ma_sound_set_min_distance');
  late final _ma_sound_set_min_distance = _ma_sound_set_min_distancePtr
      .asFunction<void Function(ffi.Pointer<ma_sound>, double)>(isLeaf: true);

  /// General Library Documentation Undocument By General Corporation & Global Corporation & General Developer
  double ma_sound_get_min_distance(
    ffi.Pointer<ma_sound> pSound,
  ) {
    return _ma_sound_get_min_distance(
      pSound,
    );
  }

  late final _ma_sound_get_min_distancePtr =
      _lookup<ffi.NativeFunction<ffi.Float Function(ffi.Pointer<ma_sound>)>>(
          'ma_sound_get_min_distance');
  late final _ma_sound_get_min_distance = _ma_sound_get_min_distancePtr
      .asFunction<double Function(ffi.Pointer<ma_sound>)>(isLeaf: true);

  /// General Library Documentation Undocument By General Corporation & Global Corporation & General Developer
  void ma_sound_set_max_distance(
    ffi.Pointer<ma_sound> pSound,
    double maxDistance,
  ) {
    return _ma_sound_set_max_distance(
      pSound,
      maxDistance,
    );
  }

  late final _ma_sound_set_max_distancePtr = _lookup<
          ffi
          .NativeFunction<ffi.Void Function(ffi.Pointer<ma_sound>, ffi.Float)>>(
      'ma_sound_set_max_distance');
  late final _ma_sound_set_max_distance = _ma_sound_set_max_distancePtr
      .asFunction<void Function(ffi.Pointer<ma_sound>, double)>(isLeaf: true);

  /// General Library Documentation Undocument By General Corporation & Global Corporation & General Developer
  double ma_sound_get_max_distance(
    ffi.Pointer<ma_sound> pSound,
  ) {
    return _ma_sound_get_max_distance(
      pSound,
    );
  }

  late final _ma_sound_get_max_distancePtr =
      _lookup<ffi.NativeFunction<ffi.Float Function(ffi.Pointer<ma_sound>)>>(
          'ma_sound_get_max_distance');
  late final _ma_sound_get_max_distance = _ma_sound_get_max_distancePtr
      .asFunction<double Function(ffi.Pointer<ma_sound>)>(isLeaf: true);

  /// General Library Documentation Undocument By General Corporation & Global Corporation & General Developer
  void ma_sound_set_cone(
    ffi.Pointer<ma_sound> pSound,
    double innerAngleInRadians,
    double outerAngleInRadians,
    double outerGain,
  ) {
    return _ma_sound_set_cone(
      pSound,
      innerAngleInRadians,
      outerAngleInRadians,
      outerGain,
    );
  }

  late final _ma_sound_set_conePtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Pointer<ma_sound>, ffi.Float, ffi.Float,
              ffi.Float)>>('ma_sound_set_cone');
  late final _ma_sound_set_cone = _ma_sound_set_conePtr
      .asFunction<void Function(ffi.Pointer<ma_sound>, double, double, double)>(
          isLeaf: true);

  /// General Library Documentation Undocument By General Corporation & Global Corporation & General Developer
  void ma_sound_get_cone(
    ffi.Pointer<ma_sound> pSound,
    ffi.Pointer<ffi.Float> pInnerAngleInRadians,
    ffi.Pointer<ffi.Float> pOuterAngleInRadians,
    ffi.Pointer<ffi.Float> pOuterGain,
  ) {
    return _ma_sound_get_cone(
      pSound,
      pInnerAngleInRadians,
      pOuterAngleInRadians,
      pOuterGain,
    );
  }

  late final _ma_sound_get_conePtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(
              ffi.Pointer<ma_sound>,
              ffi.Pointer<ffi.Float>,
              ffi.Pointer<ffi.Float>,
              ffi.Pointer<ffi.Float>)>>('ma_sound_get_cone');
  late final _ma_sound_get_cone = _ma_sound_get_conePtr.asFunction<
      void Function(ffi.Pointer<ma_sound>, ffi.Pointer<ffi.Float>,
          ffi.Pointer<ffi.Float>, ffi.Pointer<ffi.Float>)>(isLeaf: true);

  /// General Library Documentation Undocument By General Corporation & Global Corporation & General Developer
  void ma_sound_set_doppler_factor(
    ffi.Pointer<ma_sound> pSound,
    double dopplerFactor,
  ) {
    return _ma_sound_set_doppler_factor(
      pSound,
      dopplerFactor,
    );
  }

  late final _ma_sound_set_doppler_factorPtr = _lookup<
          ffi
          .NativeFunction<ffi.Void Function(ffi.Pointer<ma_sound>, ffi.Float)>>(
      'ma_sound_set_doppler_factor');
  late final _ma_sound_set_doppler_factor = _ma_sound_set_doppler_factorPtr
      .asFunction<void Function(ffi.Pointer<ma_sound>, double)>(isLeaf: true);

  /// General Library Documentation Undocument By General Corporation & Global Corporation & General Developer
  double ma_sound_get_doppler_factor(
    ffi.Pointer<ma_sound> pSound,
  ) {
    return _ma_sound_get_doppler_factor(
      pSound,
    );
  }

  late final _ma_sound_get_doppler_factorPtr =
      _lookup<ffi.NativeFunction<ffi.Float Function(ffi.Pointer<ma_sound>)>>(
          'ma_sound_get_doppler_factor');
  late final _ma_sound_get_doppler_factor = _ma_sound_get_doppler_factorPtr
      .asFunction<double Function(ffi.Pointer<ma_sound>)>(isLeaf: true);

  /// General Library Documentation Undocument By General Corporation & Global Corporation & General Developer
  void ma_sound_set_directional_attenuation_factor(
    ffi.Pointer<ma_sound> pSound,
    double directionalAttenuationFactor,
  ) {
    return _ma_sound_set_directional_attenuation_factor(
      pSound,
      directionalAttenuationFactor,
    );
  }

  late final _ma_sound_set_directional_attenuation_factorPtr = _lookup<
          ffi
          .NativeFunction<ffi.Void Function(ffi.Pointer<ma_sound>, ffi.Float)>>(
      'ma_sound_set_directional_attenuation_factor');
  late final _ma_sound_set_directional_attenuation_factor =
      _ma_sound_set_directional_attenuation_factorPtr
          .asFunction<void Function(ffi.Pointer<ma_sound>, double)>(
              isLeaf: true);

  /// General Library Documentation Undocument By General Corporation & Global Corporation & General Developer
  double ma_sound_get_directional_attenuation_factor(
    ffi.Pointer<ma_sound> pSound,
  ) {
    return _ma_sound_get_directional_attenuation_factor(
      pSound,
    );
  }

  late final _ma_sound_get_directional_attenuation_factorPtr =
      _lookup<ffi.NativeFunction<ffi.Float Function(ffi.Pointer<ma_sound>)>>(
          'ma_sound_get_directional_attenuation_factor');
  late final _ma_sound_get_directional_attenuation_factor =
      _ma_sound_get_directional_attenuation_factorPtr
          .asFunction<double Function(ffi.Pointer<ma_sound>)>(isLeaf: true);

  /// General Library Documentation Undocument By General Corporation & Global Corporation & General Developer
  void ma_sound_set_fade_in_pcm_frames(
    ffi.Pointer<ma_sound> pSound,
    double volumeBeg,
    double volumeEnd,
    int fadeLengthInFrames,
  ) {
    return _ma_sound_set_fade_in_pcm_frames(
      pSound,
      volumeBeg,
      volumeEnd,
      fadeLengthInFrames,
    );
  }

  late final _ma_sound_set_fade_in_pcm_framesPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Pointer<ma_sound>, ffi.Float, ffi.Float,
              ma_uint64)>>('ma_sound_set_fade_in_pcm_frames');
  late final _ma_sound_set_fade_in_pcm_frames =
      _ma_sound_set_fade_in_pcm_framesPtr.asFunction<
          void Function(
              ffi.Pointer<ma_sound>, double, double, int)>(isLeaf: true);

  /// General Library Documentation Undocument By General Corporation & Global Corporation & General Developer
  void ma_sound_set_fade_in_milliseconds(
    ffi.Pointer<ma_sound> pSound,
    double volumeBeg,
    double volumeEnd,
    int fadeLengthInMilliseconds,
  ) {
    return _ma_sound_set_fade_in_milliseconds(
      pSound,
      volumeBeg,
      volumeEnd,
      fadeLengthInMilliseconds,
    );
  }

  late final _ma_sound_set_fade_in_millisecondsPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Pointer<ma_sound>, ffi.Float, ffi.Float,
              ma_uint64)>>('ma_sound_set_fade_in_milliseconds');
  late final _ma_sound_set_fade_in_milliseconds =
      _ma_sound_set_fade_in_millisecondsPtr.asFunction<
          void Function(
              ffi.Pointer<ma_sound>, double, double, int)>(isLeaf: true);

  /// General Library Documentation Undocument By General Corporation & Global Corporation & General Developer
  void ma_sound_set_fade_start_in_pcm_frames(
    ffi.Pointer<ma_sound> pSound,
    double volumeBeg,
    double volumeEnd,
    int fadeLengthInFrames,
    int absoluteGlobalTimeInFrames,
  ) {
    return _ma_sound_set_fade_start_in_pcm_frames(
      pSound,
      volumeBeg,
      volumeEnd,
      fadeLengthInFrames,
      absoluteGlobalTimeInFrames,
    );
  }

  late final _ma_sound_set_fade_start_in_pcm_framesPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Pointer<ma_sound>, ffi.Float, ffi.Float,
              ma_uint64, ma_uint64)>>('ma_sound_set_fade_start_in_pcm_frames');
  late final _ma_sound_set_fade_start_in_pcm_frames =
      _ma_sound_set_fade_start_in_pcm_framesPtr.asFunction<
          void Function(
              ffi.Pointer<ma_sound>, double, double, int, int)>(isLeaf: true);

  /// General Library Documentation Undocument By General Corporation & Global Corporation & General Developer
  void ma_sound_set_fade_start_in_milliseconds(
    ffi.Pointer<ma_sound> pSound,
    double volumeBeg,
    double volumeEnd,
    int fadeLengthInMilliseconds,
    int absoluteGlobalTimeInMilliseconds,
  ) {
    return _ma_sound_set_fade_start_in_milliseconds(
      pSound,
      volumeBeg,
      volumeEnd,
      fadeLengthInMilliseconds,
      absoluteGlobalTimeInMilliseconds,
    );
  }

  late final _ma_sound_set_fade_start_in_millisecondsPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(
              ffi.Pointer<ma_sound>,
              ffi.Float,
              ffi.Float,
              ma_uint64,
              ma_uint64)>>('ma_sound_set_fade_start_in_milliseconds');
  late final _ma_sound_set_fade_start_in_milliseconds =
      _ma_sound_set_fade_start_in_millisecondsPtr.asFunction<
          void Function(
              ffi.Pointer<ma_sound>, double, double, int, int)>(isLeaf: true);

  /// General Library Documentation Undocument By General Corporation & Global Corporation & General Developer
  double ma_sound_get_current_fade_volume(
    ffi.Pointer<ma_sound> pSound,
  ) {
    return _ma_sound_get_current_fade_volume(
      pSound,
    );
  }

  late final _ma_sound_get_current_fade_volumePtr =
      _lookup<ffi.NativeFunction<ffi.Float Function(ffi.Pointer<ma_sound>)>>(
          'ma_sound_get_current_fade_volume');
  late final _ma_sound_get_current_fade_volume =
      _ma_sound_get_current_fade_volumePtr
          .asFunction<double Function(ffi.Pointer<ma_sound>)>(isLeaf: true);

  /// General Library Documentation Undocument By General Corporation & Global Corporation & General Developer
  void ma_sound_set_start_time_in_pcm_frames(
    ffi.Pointer<ma_sound> pSound,
    int absoluteGlobalTimeInFrames,
  ) {
    return _ma_sound_set_start_time_in_pcm_frames(
      pSound,
      absoluteGlobalTimeInFrames,
    );
  }

  late final _ma_sound_set_start_time_in_pcm_framesPtr = _lookup<
          ffi
          .NativeFunction<ffi.Void Function(ffi.Pointer<ma_sound>, ma_uint64)>>(
      'ma_sound_set_start_time_in_pcm_frames');
  late final _ma_sound_set_start_time_in_pcm_frames =
      _ma_sound_set_start_time_in_pcm_framesPtr
          .asFunction<void Function(ffi.Pointer<ma_sound>, int)>(isLeaf: true);

  /// General Library Documentation Undocument By General Corporation & Global Corporation & General Developer
  void ma_sound_set_start_time_in_milliseconds(
    ffi.Pointer<ma_sound> pSound,
    int absoluteGlobalTimeInMilliseconds,
  ) {
    return _ma_sound_set_start_time_in_milliseconds(
      pSound,
      absoluteGlobalTimeInMilliseconds,
    );
  }

  late final _ma_sound_set_start_time_in_millisecondsPtr = _lookup<
          ffi
          .NativeFunction<ffi.Void Function(ffi.Pointer<ma_sound>, ma_uint64)>>(
      'ma_sound_set_start_time_in_milliseconds');
  late final _ma_sound_set_start_time_in_milliseconds =
      _ma_sound_set_start_time_in_millisecondsPtr
          .asFunction<void Function(ffi.Pointer<ma_sound>, int)>(isLeaf: true);

  /// General Library Documentation Undocument By General Corporation & Global Corporation & General Developer
  void ma_sound_set_stop_time_in_pcm_frames(
    ffi.Pointer<ma_sound> pSound,
    int absoluteGlobalTimeInFrames,
  ) {
    return _ma_sound_set_stop_time_in_pcm_frames(
      pSound,
      absoluteGlobalTimeInFrames,
    );
  }

  late final _ma_sound_set_stop_time_in_pcm_framesPtr = _lookup<
          ffi
          .NativeFunction<ffi.Void Function(ffi.Pointer<ma_sound>, ma_uint64)>>(
      'ma_sound_set_stop_time_in_pcm_frames');
  late final _ma_sound_set_stop_time_in_pcm_frames =
      _ma_sound_set_stop_time_in_pcm_framesPtr
          .asFunction<void Function(ffi.Pointer<ma_sound>, int)>(isLeaf: true);

  /// General Library Documentation Undocument By General Corporation & Global Corporation & General Developer
  void ma_sound_set_stop_time_in_milliseconds(
    ffi.Pointer<ma_sound> pSound,
    int absoluteGlobalTimeInMilliseconds,
  ) {
    return _ma_sound_set_stop_time_in_milliseconds(
      pSound,
      absoluteGlobalTimeInMilliseconds,
    );
  }

  late final _ma_sound_set_stop_time_in_millisecondsPtr = _lookup<
          ffi
          .NativeFunction<ffi.Void Function(ffi.Pointer<ma_sound>, ma_uint64)>>(
      'ma_sound_set_stop_time_in_milliseconds');
  late final _ma_sound_set_stop_time_in_milliseconds =
      _ma_sound_set_stop_time_in_millisecondsPtr
          .asFunction<void Function(ffi.Pointer<ma_sound>, int)>(isLeaf: true);

  /// General Library Documentation Undocument By General Corporation & Global Corporation & General Developer
  void ma_sound_set_stop_time_with_fade_in_pcm_frames(
    ffi.Pointer<ma_sound> pSound,
    int stopAbsoluteGlobalTimeInFrames,
    int fadeLengthInFrames,
  ) {
    return _ma_sound_set_stop_time_with_fade_in_pcm_frames(
      pSound,
      stopAbsoluteGlobalTimeInFrames,
      fadeLengthInFrames,
    );
  }

  late final _ma_sound_set_stop_time_with_fade_in_pcm_framesPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Pointer<ma_sound>, ma_uint64,
              ma_uint64)>>('ma_sound_set_stop_time_with_fade_in_pcm_frames');
  late final _ma_sound_set_stop_time_with_fade_in_pcm_frames =
      _ma_sound_set_stop_time_with_fade_in_pcm_framesPtr
          .asFunction<void Function(ffi.Pointer<ma_sound>, int, int)>(
              isLeaf: true);

  /// General Library Documentation Undocument By General Corporation & Global Corporation & General Developer
  void ma_sound_set_stop_time_with_fade_in_milliseconds(
    ffi.Pointer<ma_sound> pSound,
    int stopAbsoluteGlobalTimeInMilliseconds,
    int fadeLengthInMilliseconds,
  ) {
    return _ma_sound_set_stop_time_with_fade_in_milliseconds(
      pSound,
      stopAbsoluteGlobalTimeInMilliseconds,
      fadeLengthInMilliseconds,
    );
  }

  late final _ma_sound_set_stop_time_with_fade_in_millisecondsPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Pointer<ma_sound>, ma_uint64,
              ma_uint64)>>('ma_sound_set_stop_time_with_fade_in_milliseconds');
  late final _ma_sound_set_stop_time_with_fade_in_milliseconds =
      _ma_sound_set_stop_time_with_fade_in_millisecondsPtr
          .asFunction<void Function(ffi.Pointer<ma_sound>, int, int)>(
              isLeaf: true);

  /// General Library Documentation Undocument By General Corporation & Global Corporation & General Developer
  int ma_sound_is_playing(
    ffi.Pointer<ma_sound> pSound,
  ) {
    return _ma_sound_is_playing(
      pSound,
    );
  }

  late final _ma_sound_is_playingPtr =
      _lookup<ffi.NativeFunction<ma_bool32 Function(ffi.Pointer<ma_sound>)>>(
          'ma_sound_is_playing');
  late final _ma_sound_is_playing = _ma_sound_is_playingPtr
      .asFunction<int Function(ffi.Pointer<ma_sound>)>(isLeaf: true);

  /// General Library Documentation Undocument By General Corporation & Global Corporation & General Developer
  int ma_sound_get_time_in_pcm_frames(
    ffi.Pointer<ma_sound> pSound,
  ) {
    return _ma_sound_get_time_in_pcm_frames(
      pSound,
    );
  }

  late final _ma_sound_get_time_in_pcm_framesPtr =
      _lookup<ffi.NativeFunction<ma_uint64 Function(ffi.Pointer<ma_sound>)>>(
          'ma_sound_get_time_in_pcm_frames');
  late final _ma_sound_get_time_in_pcm_frames =
      _ma_sound_get_time_in_pcm_framesPtr
          .asFunction<int Function(ffi.Pointer<ma_sound>)>(isLeaf: true);

  /// General Library Documentation Undocument By General Corporation & Global Corporation & General Developer
  int ma_sound_get_time_in_milliseconds(
    ffi.Pointer<ma_sound> pSound,
  ) {
    return _ma_sound_get_time_in_milliseconds(
      pSound,
    );
  }

  late final _ma_sound_get_time_in_millisecondsPtr =
      _lookup<ffi.NativeFunction<ma_uint64 Function(ffi.Pointer<ma_sound>)>>(
          'ma_sound_get_time_in_milliseconds');
  late final _ma_sound_get_time_in_milliseconds =
      _ma_sound_get_time_in_millisecondsPtr
          .asFunction<int Function(ffi.Pointer<ma_sound>)>(isLeaf: true);

  /// General Library Documentation Undocument By General Corporation & Global Corporation & General Developer
  void ma_sound_set_looping(
    ffi.Pointer<ma_sound> pSound,
    int isLooping,
  ) {
    return _ma_sound_set_looping(
      pSound,
      isLooping,
    );
  }

  late final _ma_sound_set_loopingPtr = _lookup<
          ffi
          .NativeFunction<ffi.Void Function(ffi.Pointer<ma_sound>, ma_bool32)>>(
      'ma_sound_set_looping');
  late final _ma_sound_set_looping = _ma_sound_set_loopingPtr
      .asFunction<void Function(ffi.Pointer<ma_sound>, int)>(isLeaf: true);

  /// General Library Documentation Undocument By General Corporation & Global Corporation & General Developer
  int ma_sound_is_looping(
    ffi.Pointer<ma_sound> pSound,
  ) {
    return _ma_sound_is_looping(
      pSound,
    );
  }

  late final _ma_sound_is_loopingPtr =
      _lookup<ffi.NativeFunction<ma_bool32 Function(ffi.Pointer<ma_sound>)>>(
          'ma_sound_is_looping');
  late final _ma_sound_is_looping = _ma_sound_is_loopingPtr
      .asFunction<int Function(ffi.Pointer<ma_sound>)>(isLeaf: true);

  /// General Library Documentation Undocument By General Corporation & Global Corporation & General Developer
  int ma_sound_at_end(
    ffi.Pointer<ma_sound> pSound,
  ) {
    return _ma_sound_at_end(
      pSound,
    );
  }

  late final _ma_sound_at_endPtr =
      _lookup<ffi.NativeFunction<ma_bool32 Function(ffi.Pointer<ma_sound>)>>(
          'ma_sound_at_end');
  late final _ma_sound_at_end = _ma_sound_at_endPtr
      .asFunction<int Function(ffi.Pointer<ma_sound>)>(isLeaf: true);

  /// General Library Documentation Undocument By General Corporation & Global Corporation & General Developer
  int ma_sound_seek_to_pcm_frame(
    ffi.Pointer<ma_sound> pSound,
    int frameIndex,
  ) {
    return _ma_sound_seek_to_pcm_frame(
      pSound,
      frameIndex,
    );
  }

  late final _ma_sound_seek_to_pcm_framePtr = _lookup<
      ffi.NativeFunction<
          ffi.Int32 Function(
              ffi.Pointer<ma_sound>, ma_uint64)>>('ma_sound_seek_to_pcm_frame');
  late final _ma_sound_seek_to_pcm_frame = _ma_sound_seek_to_pcm_framePtr
      .asFunction<int Function(ffi.Pointer<ma_sound>, int)>(isLeaf: true);

  /// General Library Documentation Undocument By General Corporation & Global Corporation & General Developer
  int ma_sound_get_data_format(
    ffi.Pointer<ma_sound> pSound,
    ffi.Pointer<ffi.Int32> pFormat,
    ffi.Pointer<ma_uint32> pChannels,
    ffi.Pointer<ma_uint32> pSampleRate,
    ffi.Pointer<ma_channel> pChannelMap,
    int channelMapCap,
  ) {
    return _ma_sound_get_data_format(
      pSound,
      pFormat,
      pChannels,
      pSampleRate,
      pChannelMap,
      channelMapCap,
    );
  }

  late final _ma_sound_get_data_formatPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int32 Function(
              ffi.Pointer<ma_sound>,
              ffi.Pointer<ffi.Int32>,
              ffi.Pointer<ma_uint32>,
              ffi.Pointer<ma_uint32>,
              ffi.Pointer<ma_channel>,
              ffi.Size)>>('ma_sound_get_data_format');
  late final _ma_sound_get_data_format =
      _ma_sound_get_data_formatPtr.asFunction<
          int Function(
              ffi.Pointer<ma_sound>,
              ffi.Pointer<ffi.Int32>,
              ffi.Pointer<ma_uint32>,
              ffi.Pointer<ma_uint32>,
              ffi.Pointer<ma_channel>,
              int)>(isLeaf: true);

  /// General Library Documentation Undocument By General Corporation & Global Corporation & General Developer
  int ma_sound_get_cursor_in_pcm_frames(
    ffi.Pointer<ma_sound> pSound,
    ffi.Pointer<ma_uint64> pCursor,
  ) {
    return _ma_sound_get_cursor_in_pcm_frames(
      pSound,
      pCursor,
    );
  }

  late final _ma_sound_get_cursor_in_pcm_framesPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int32 Function(ffi.Pointer<ma_sound>,
              ffi.Pointer<ma_uint64>)>>('ma_sound_get_cursor_in_pcm_frames');
  late final _ma_sound_get_cursor_in_pcm_frames =
      _ma_sound_get_cursor_in_pcm_framesPtr.asFunction<
          int Function(
              ffi.Pointer<ma_sound>, ffi.Pointer<ma_uint64>)>(isLeaf: true);

  /// General Library Documentation Undocument By General Corporation & Global Corporation & General Developer
  int ma_sound_get_length_in_pcm_frames(
    ffi.Pointer<ma_sound> pSound,
    ffi.Pointer<ma_uint64> pLength,
  ) {
    return _ma_sound_get_length_in_pcm_frames(
      pSound,
      pLength,
    );
  }

  late final _ma_sound_get_length_in_pcm_framesPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int32 Function(ffi.Pointer<ma_sound>,
              ffi.Pointer<ma_uint64>)>>('ma_sound_get_length_in_pcm_frames');
  late final _ma_sound_get_length_in_pcm_frames =
      _ma_sound_get_length_in_pcm_framesPtr.asFunction<
          int Function(
              ffi.Pointer<ma_sound>, ffi.Pointer<ma_uint64>)>(isLeaf: true);

  /// General Library Documentation Undocument By General Corporation & Global Corporation & General Developer
  int ma_sound_get_cursor_in_seconds(
    ffi.Pointer<ma_sound> pSound,
    ffi.Pointer<ffi.Float> pCursor,
  ) {
    return _ma_sound_get_cursor_in_seconds(
      pSound,
      pCursor,
    );
  }

  late final _ma_sound_get_cursor_in_secondsPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int32 Function(ffi.Pointer<ma_sound>,
              ffi.Pointer<ffi.Float>)>>('ma_sound_get_cursor_in_seconds');
  late final _ma_sound_get_cursor_in_seconds =
      _ma_sound_get_cursor_in_secondsPtr.asFunction<
          int Function(
              ffi.Pointer<ma_sound>, ffi.Pointer<ffi.Float>)>(isLeaf: true);

  /// General Library Documentation Undocument By General Corporation & Global Corporation & General Developer
  int ma_sound_get_length_in_seconds(
    ffi.Pointer<ma_sound> pSound,
    ffi.Pointer<ffi.Float> pLength,
  ) {
    return _ma_sound_get_length_in_seconds(
      pSound,
      pLength,
    );
  }

  late final _ma_sound_get_length_in_secondsPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int32 Function(ffi.Pointer<ma_sound>,
              ffi.Pointer<ffi.Float>)>>('ma_sound_get_length_in_seconds');
  late final _ma_sound_get_length_in_seconds =
      _ma_sound_get_length_in_secondsPtr.asFunction<
          int Function(
              ffi.Pointer<ma_sound>, ffi.Pointer<ffi.Float>)>(isLeaf: true);

  /// General Library Documentation Undocument By General Corporation & Global Corporation & General Developer
  int ma_sound_set_end_callback(
    ffi.Pointer<ma_sound> pSound,
    ma_sound_end_proc callback,
    ffi.Pointer<ffi.Void> pUserData,
  ) {
    return _ma_sound_set_end_callback(
      pSound,
      callback,
      pUserData,
    );
  }

  late final _ma_sound_set_end_callbackPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int32 Function(ffi.Pointer<ma_sound>, ma_sound_end_proc,
              ffi.Pointer<ffi.Void>)>>('ma_sound_set_end_callback');
  late final _ma_sound_set_end_callback =
      _ma_sound_set_end_callbackPtr.asFunction<
          int Function(ffi.Pointer<ma_sound>, ma_sound_end_proc,
              ffi.Pointer<ffi.Void>)>(isLeaf: true);

  /// General Library Documentation Undocument By General Corporation & Global Corporation & General Developer
  int ma_sound_group_init(
    ffi.Pointer<ma_engine> pEngine,
    int flags,
    ffi.Pointer<ma_sound_group> pParentGroup,
    ffi.Pointer<ma_sound_group> pGroup,
  ) {
    return _ma_sound_group_init(
      pEngine,
      flags,
      pParentGroup,
      pGroup,
    );
  }

  late final _ma_sound_group_initPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int32 Function(
              ffi.Pointer<ma_engine>,
              ma_uint32,
              ffi.Pointer<ma_sound_group>,
              ffi.Pointer<ma_sound_group>)>>('ma_sound_group_init');
  late final _ma_sound_group_init = _ma_sound_group_initPtr.asFunction<
      int Function(ffi.Pointer<ma_engine>, int, ffi.Pointer<ma_sound_group>,
          ffi.Pointer<ma_sound_group>)>(isLeaf: true);

  /// General Library Documentation Undocument By General Corporation & Global Corporation & General Developer
  int ma_sound_group_init_ex(
    ffi.Pointer<ma_engine> pEngine,
    ffi.Pointer<ma_sound_group_config> pConfig,
    ffi.Pointer<ma_sound_group> pGroup,
  ) {
    return _ma_sound_group_init_ex(
      pEngine,
      pConfig,
      pGroup,
    );
  }

  late final _ma_sound_group_init_exPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int32 Function(
              ffi.Pointer<ma_engine>,
              ffi.Pointer<ma_sound_group_config>,
              ffi.Pointer<ma_sound_group>)>>('ma_sound_group_init_ex');
  late final _ma_sound_group_init_ex = _ma_sound_group_init_exPtr.asFunction<
      int Function(ffi.Pointer<ma_engine>, ffi.Pointer<ma_sound_group_config>,
          ffi.Pointer<ma_sound_group>)>(isLeaf: true);

  /// General Library Documentation Undocument By General Corporation & Global Corporation & General Developer
  void ma_sound_group_uninit(
    ffi.Pointer<ma_sound_group> pGroup,
  ) {
    return _ma_sound_group_uninit(
      pGroup,
    );
  }

  late final _ma_sound_group_uninitPtr = _lookup<
          ffi.NativeFunction<ffi.Void Function(ffi.Pointer<ma_sound_group>)>>(
      'ma_sound_group_uninit');
  late final _ma_sound_group_uninit = _ma_sound_group_uninitPtr
      .asFunction<void Function(ffi.Pointer<ma_sound_group>)>(isLeaf: true);

  /// General Library Documentation Undocument By General Corporation & Global Corporation & General Developer
  ffi.Pointer<ma_engine> ma_sound_group_get_engine(
    ffi.Pointer<ma_sound_group> pGroup,
  ) {
    return _ma_sound_group_get_engine(
      pGroup,
    );
  }

  late final _ma_sound_group_get_enginePtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ma_engine> Function(
              ffi.Pointer<ma_sound_group>)>>('ma_sound_group_get_engine');
  late final _ma_sound_group_get_engine = _ma_sound_group_get_enginePtr
      .asFunction<ffi.Pointer<ma_engine> Function(ffi.Pointer<ma_sound_group>)>(
          isLeaf: true);

  /// General Library Documentation Undocument By General Corporation & Global Corporation & General Developer
  int ma_sound_group_start(
    ffi.Pointer<ma_sound_group> pGroup,
  ) {
    return _ma_sound_group_start(
      pGroup,
    );
  }

  late final _ma_sound_group_startPtr = _lookup<
          ffi.NativeFunction<ffi.Int32 Function(ffi.Pointer<ma_sound_group>)>>(
      'ma_sound_group_start');
  late final _ma_sound_group_start = _ma_sound_group_startPtr
      .asFunction<int Function(ffi.Pointer<ma_sound_group>)>(isLeaf: true);

  /// General Library Documentation Undocument By General Corporation & Global Corporation & General Developer
  int ma_sound_group_stop(
    ffi.Pointer<ma_sound_group> pGroup,
  ) {
    return _ma_sound_group_stop(
      pGroup,
    );
  }

  late final _ma_sound_group_stopPtr = _lookup<
          ffi.NativeFunction<ffi.Int32 Function(ffi.Pointer<ma_sound_group>)>>(
      'ma_sound_group_stop');
  late final _ma_sound_group_stop = _ma_sound_group_stopPtr
      .asFunction<int Function(ffi.Pointer<ma_sound_group>)>(isLeaf: true);

  /// General Library Documentation Undocument By General Corporation & Global Corporation & General Developer
  void ma_sound_group_set_volume(
    ffi.Pointer<ma_sound_group> pGroup,
    double volume,
  ) {
    return _ma_sound_group_set_volume(
      pGroup,
      volume,
    );
  }

  late final _ma_sound_group_set_volumePtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Pointer<ma_sound_group>,
              ffi.Float)>>('ma_sound_group_set_volume');
  late final _ma_sound_group_set_volume = _ma_sound_group_set_volumePtr
      .asFunction<void Function(ffi.Pointer<ma_sound_group>, double)>(
          isLeaf: true);

  /// General Library Documentation Undocument By General Corporation & Global Corporation & General Developer
  double ma_sound_group_get_volume(
    ffi.Pointer<ma_sound_group> pGroup,
  ) {
    return _ma_sound_group_get_volume(
      pGroup,
    );
  }

  late final _ma_sound_group_get_volumePtr = _lookup<
          ffi.NativeFunction<ffi.Float Function(ffi.Pointer<ma_sound_group>)>>(
      'ma_sound_group_get_volume');
  late final _ma_sound_group_get_volume = _ma_sound_group_get_volumePtr
      .asFunction<double Function(ffi.Pointer<ma_sound_group>)>(isLeaf: true);

  /// General Library Documentation Undocument By General Corporation & Global Corporation & General Developer
  void ma_sound_group_set_pan(
    ffi.Pointer<ma_sound_group> pGroup,
    double pan,
  ) {
    return _ma_sound_group_set_pan(
      pGroup,
      pan,
    );
  }

  late final _ma_sound_group_set_panPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Pointer<ma_sound_group>,
              ffi.Float)>>('ma_sound_group_set_pan');
  late final _ma_sound_group_set_pan = _ma_sound_group_set_panPtr
      .asFunction<void Function(ffi.Pointer<ma_sound_group>, double)>(
          isLeaf: true);

  /// General Library Documentation Undocument By General Corporation & Global Corporation & General Developer
  double ma_sound_group_get_pan(
    ffi.Pointer<ma_sound_group> pGroup,
  ) {
    return _ma_sound_group_get_pan(
      pGroup,
    );
  }

  late final _ma_sound_group_get_panPtr = _lookup<
          ffi.NativeFunction<ffi.Float Function(ffi.Pointer<ma_sound_group>)>>(
      'ma_sound_group_get_pan');
  late final _ma_sound_group_get_pan = _ma_sound_group_get_panPtr
      .asFunction<double Function(ffi.Pointer<ma_sound_group>)>(isLeaf: true);

  /// General Library Documentation Undocument By General Corporation & Global Corporation & General Developer
  void ma_sound_group_set_pan_mode(
    ffi.Pointer<ma_sound_group> pGroup,
    int panMode,
  ) {
    return _ma_sound_group_set_pan_mode(
      pGroup,
      panMode,
    );
  }

  late final _ma_sound_group_set_pan_modePtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Pointer<ma_sound_group>,
              ffi.Int32)>>('ma_sound_group_set_pan_mode');
  late final _ma_sound_group_set_pan_mode = _ma_sound_group_set_pan_modePtr
      .asFunction<void Function(ffi.Pointer<ma_sound_group>, int)>(
          isLeaf: true);

  /// General Library Documentation Undocument By General Corporation & Global Corporation & General Developer
  int ma_sound_group_get_pan_mode(
    ffi.Pointer<ma_sound_group> pGroup,
  ) {
    return _ma_sound_group_get_pan_mode(
      pGroup,
    );
  }

  late final _ma_sound_group_get_pan_modePtr = _lookup<
          ffi.NativeFunction<ffi.Int32 Function(ffi.Pointer<ma_sound_group>)>>(
      'ma_sound_group_get_pan_mode');
  late final _ma_sound_group_get_pan_mode = _ma_sound_group_get_pan_modePtr
      .asFunction<int Function(ffi.Pointer<ma_sound_group>)>(isLeaf: true);

  /// General Library Documentation Undocument By General Corporation & Global Corporation & General Developer
  void ma_sound_group_set_pitch(
    ffi.Pointer<ma_sound_group> pGroup,
    double pitch,
  ) {
    return _ma_sound_group_set_pitch(
      pGroup,
      pitch,
    );
  }

  late final _ma_sound_group_set_pitchPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Pointer<ma_sound_group>,
              ffi.Float)>>('ma_sound_group_set_pitch');
  late final _ma_sound_group_set_pitch = _ma_sound_group_set_pitchPtr
      .asFunction<void Function(ffi.Pointer<ma_sound_group>, double)>(
          isLeaf: true);

  /// General Library Documentation Undocument By General Corporation & Global Corporation & General Developer
  double ma_sound_group_get_pitch(
    ffi.Pointer<ma_sound_group> pGroup,
  ) {
    return _ma_sound_group_get_pitch(
      pGroup,
    );
  }

  late final _ma_sound_group_get_pitchPtr = _lookup<
          ffi.NativeFunction<ffi.Float Function(ffi.Pointer<ma_sound_group>)>>(
      'ma_sound_group_get_pitch');
  late final _ma_sound_group_get_pitch = _ma_sound_group_get_pitchPtr
      .asFunction<double Function(ffi.Pointer<ma_sound_group>)>(isLeaf: true);

  /// General Library Documentation Undocument By General Corporation & Global Corporation & General Developer
  void ma_sound_group_set_spatialization_enabled(
    ffi.Pointer<ma_sound_group> pGroup,
    int enabled,
  ) {
    return _ma_sound_group_set_spatialization_enabled(
      pGroup,
      enabled,
    );
  }

  late final _ma_sound_group_set_spatialization_enabledPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Pointer<ma_sound_group>,
              ma_bool32)>>('ma_sound_group_set_spatialization_enabled');
  late final _ma_sound_group_set_spatialization_enabled =
      _ma_sound_group_set_spatialization_enabledPtr
          .asFunction<void Function(ffi.Pointer<ma_sound_group>, int)>(
              isLeaf: true);

  /// General Library Documentation Undocument By General Corporation & Global Corporation & General Developer
  int ma_sound_group_is_spatialization_enabled(
    ffi.Pointer<ma_sound_group> pGroup,
  ) {
    return _ma_sound_group_is_spatialization_enabled(
      pGroup,
    );
  }

  late final _ma_sound_group_is_spatialization_enabledPtr = _lookup<
          ffi.NativeFunction<ma_bool32 Function(ffi.Pointer<ma_sound_group>)>>(
      'ma_sound_group_is_spatialization_enabled');
  late final _ma_sound_group_is_spatialization_enabled =
      _ma_sound_group_is_spatialization_enabledPtr
          .asFunction<int Function(ffi.Pointer<ma_sound_group>)>(isLeaf: true);

  /// General Library Documentation Undocument By General Corporation & Global Corporation & General Developer
  void ma_sound_group_set_pinned_listener_index(
    ffi.Pointer<ma_sound_group> pGroup,
    int listenerIndex,
  ) {
    return _ma_sound_group_set_pinned_listener_index(
      pGroup,
      listenerIndex,
    );
  }

  late final _ma_sound_group_set_pinned_listener_indexPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Pointer<ma_sound_group>,
              ma_uint32)>>('ma_sound_group_set_pinned_listener_index');
  late final _ma_sound_group_set_pinned_listener_index =
      _ma_sound_group_set_pinned_listener_indexPtr
          .asFunction<void Function(ffi.Pointer<ma_sound_group>, int)>(
              isLeaf: true);

  /// General Library Documentation Undocument By General Corporation & Global Corporation & General Developer
  int ma_sound_group_get_pinned_listener_index(
    ffi.Pointer<ma_sound_group> pGroup,
  ) {
    return _ma_sound_group_get_pinned_listener_index(
      pGroup,
    );
  }

  late final _ma_sound_group_get_pinned_listener_indexPtr = _lookup<
          ffi.NativeFunction<ma_uint32 Function(ffi.Pointer<ma_sound_group>)>>(
      'ma_sound_group_get_pinned_listener_index');
  late final _ma_sound_group_get_pinned_listener_index =
      _ma_sound_group_get_pinned_listener_indexPtr
          .asFunction<int Function(ffi.Pointer<ma_sound_group>)>(isLeaf: true);

  /// General Library Documentation Undocument By General Corporation & Global Corporation & General Developer
  int ma_sound_group_get_listener_index(
    ffi.Pointer<ma_sound_group> pGroup,
  ) {
    return _ma_sound_group_get_listener_index(
      pGroup,
    );
  }

  late final _ma_sound_group_get_listener_indexPtr = _lookup<
          ffi.NativeFunction<ma_uint32 Function(ffi.Pointer<ma_sound_group>)>>(
      'ma_sound_group_get_listener_index');
  late final _ma_sound_group_get_listener_index =
      _ma_sound_group_get_listener_indexPtr
          .asFunction<int Function(ffi.Pointer<ma_sound_group>)>(isLeaf: true);

  /// General Library Documentation Undocument By General Corporation & Global Corporation & General Developer
  ma_vec3f ma_sound_group_get_direction_to_listener(
    ffi.Pointer<ma_sound_group> pGroup,
  ) {
    return _ma_sound_group_get_direction_to_listener(
      pGroup,
    );
  }

  late final _ma_sound_group_get_direction_to_listenerPtr = _lookup<
          ffi.NativeFunction<ma_vec3f Function(ffi.Pointer<ma_sound_group>)>>(
      'ma_sound_group_get_direction_to_listener');
  late final _ma_sound_group_get_direction_to_listener =
      _ma_sound_group_get_direction_to_listenerPtr
          .asFunction<ma_vec3f Function(ffi.Pointer<ma_sound_group>)>(
              isLeaf: true);

  /// General Library Documentation Undocument By General Corporation & Global Corporation & General Developer
  void ma_sound_group_set_position(
    ffi.Pointer<ma_sound_group> pGroup,
    double x,
    double y,
    double z,
  ) {
    return _ma_sound_group_set_position(
      pGroup,
      x,
      y,
      z,
    );
  }

  late final _ma_sound_group_set_positionPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Pointer<ma_sound_group>, ffi.Float, ffi.Float,
              ffi.Float)>>('ma_sound_group_set_position');
  late final _ma_sound_group_set_position =
      _ma_sound_group_set_positionPtr.asFunction<
          void Function(ffi.Pointer<ma_sound_group>, double, double,
              double)>(isLeaf: true);

  /// General Library Documentation Undocument By General Corporation & Global Corporation & General Developer
  ma_vec3f ma_sound_group_get_position(
    ffi.Pointer<ma_sound_group> pGroup,
  ) {
    return _ma_sound_group_get_position(
      pGroup,
    );
  }

  late final _ma_sound_group_get_positionPtr = _lookup<
          ffi.NativeFunction<ma_vec3f Function(ffi.Pointer<ma_sound_group>)>>(
      'ma_sound_group_get_position');
  late final _ma_sound_group_get_position = _ma_sound_group_get_positionPtr
      .asFunction<ma_vec3f Function(ffi.Pointer<ma_sound_group>)>(isLeaf: true);

  /// General Library Documentation Undocument By General Corporation & Global Corporation & General Developer
  void ma_sound_group_set_direction(
    ffi.Pointer<ma_sound_group> pGroup,
    double x,
    double y,
    double z,
  ) {
    return _ma_sound_group_set_direction(
      pGroup,
      x,
      y,
      z,
    );
  }

  late final _ma_sound_group_set_directionPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Pointer<ma_sound_group>, ffi.Float, ffi.Float,
              ffi.Float)>>('ma_sound_group_set_direction');
  late final _ma_sound_group_set_direction =
      _ma_sound_group_set_directionPtr.asFunction<
          void Function(ffi.Pointer<ma_sound_group>, double, double,
              double)>(isLeaf: true);

  /// General Library Documentation Undocument By General Corporation & Global Corporation & General Developer
  ma_vec3f ma_sound_group_get_direction(
    ffi.Pointer<ma_sound_group> pGroup,
  ) {
    return _ma_sound_group_get_direction(
      pGroup,
    );
  }

  late final _ma_sound_group_get_directionPtr = _lookup<
          ffi.NativeFunction<ma_vec3f Function(ffi.Pointer<ma_sound_group>)>>(
      'ma_sound_group_get_direction');
  late final _ma_sound_group_get_direction = _ma_sound_group_get_directionPtr
      .asFunction<ma_vec3f Function(ffi.Pointer<ma_sound_group>)>(isLeaf: true);

  /// General Library Documentation Undocument By General Corporation & Global Corporation & General Developer
  void ma_sound_group_set_velocity(
    ffi.Pointer<ma_sound_group> pGroup,
    double x,
    double y,
    double z,
  ) {
    return _ma_sound_group_set_velocity(
      pGroup,
      x,
      y,
      z,
    );
  }

  late final _ma_sound_group_set_velocityPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Pointer<ma_sound_group>, ffi.Float, ffi.Float,
              ffi.Float)>>('ma_sound_group_set_velocity');
  late final _ma_sound_group_set_velocity =
      _ma_sound_group_set_velocityPtr.asFunction<
          void Function(ffi.Pointer<ma_sound_group>, double, double,
              double)>(isLeaf: true);

  /// General Library Documentation Undocument By General Corporation & Global Corporation & General Developer
  ma_vec3f ma_sound_group_get_velocity(
    ffi.Pointer<ma_sound_group> pGroup,
  ) {
    return _ma_sound_group_get_velocity(
      pGroup,
    );
  }

  late final _ma_sound_group_get_velocityPtr = _lookup<
          ffi.NativeFunction<ma_vec3f Function(ffi.Pointer<ma_sound_group>)>>(
      'ma_sound_group_get_velocity');
  late final _ma_sound_group_get_velocity = _ma_sound_group_get_velocityPtr
      .asFunction<ma_vec3f Function(ffi.Pointer<ma_sound_group>)>(isLeaf: true);

  /// General Library Documentation Undocument By General Corporation & Global Corporation & General Developer
  void ma_sound_group_set_attenuation_model(
    ffi.Pointer<ma_sound_group> pGroup,
    int attenuationModel,
  ) {
    return _ma_sound_group_set_attenuation_model(
      pGroup,
      attenuationModel,
    );
  }

  late final _ma_sound_group_set_attenuation_modelPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Pointer<ma_sound_group>,
              ffi.Int32)>>('ma_sound_group_set_attenuation_model');
  late final _ma_sound_group_set_attenuation_model =
      _ma_sound_group_set_attenuation_modelPtr
          .asFunction<void Function(ffi.Pointer<ma_sound_group>, int)>(
              isLeaf: true);

  /// General Library Documentation Undocument By General Corporation & Global Corporation & General Developer
  int ma_sound_group_get_attenuation_model(
    ffi.Pointer<ma_sound_group> pGroup,
  ) {
    return _ma_sound_group_get_attenuation_model(
      pGroup,
    );
  }

  late final _ma_sound_group_get_attenuation_modelPtr = _lookup<
          ffi.NativeFunction<ffi.Int32 Function(ffi.Pointer<ma_sound_group>)>>(
      'ma_sound_group_get_attenuation_model');
  late final _ma_sound_group_get_attenuation_model =
      _ma_sound_group_get_attenuation_modelPtr
          .asFunction<int Function(ffi.Pointer<ma_sound_group>)>(isLeaf: true);

  /// General Library Documentation Undocument By General Corporation & Global Corporation & General Developer
  void ma_sound_group_set_positioning(
    ffi.Pointer<ma_sound_group> pGroup,
    int positioning,
  ) {
    return _ma_sound_group_set_positioning(
      pGroup,
      positioning,
    );
  }

  late final _ma_sound_group_set_positioningPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Pointer<ma_sound_group>,
              ffi.Int32)>>('ma_sound_group_set_positioning');
  late final _ma_sound_group_set_positioning =
      _ma_sound_group_set_positioningPtr
          .asFunction<void Function(ffi.Pointer<ma_sound_group>, int)>(
              isLeaf: true);

  /// General Library Documentation Undocument By General Corporation & Global Corporation & General Developer
  int ma_sound_group_get_positioning(
    ffi.Pointer<ma_sound_group> pGroup,
  ) {
    return _ma_sound_group_get_positioning(
      pGroup,
    );
  }

  late final _ma_sound_group_get_positioningPtr = _lookup<
          ffi.NativeFunction<ffi.Int32 Function(ffi.Pointer<ma_sound_group>)>>(
      'ma_sound_group_get_positioning');
  late final _ma_sound_group_get_positioning =
      _ma_sound_group_get_positioningPtr
          .asFunction<int Function(ffi.Pointer<ma_sound_group>)>(isLeaf: true);

  /// General Library Documentation Undocument By General Corporation & Global Corporation & General Developer
  void ma_sound_group_set_rolloff(
    ffi.Pointer<ma_sound_group> pGroup,
    double rolloff,
  ) {
    return _ma_sound_group_set_rolloff(
      pGroup,
      rolloff,
    );
  }

  late final _ma_sound_group_set_rolloffPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Pointer<ma_sound_group>,
              ffi.Float)>>('ma_sound_group_set_rolloff');
  late final _ma_sound_group_set_rolloff = _ma_sound_group_set_rolloffPtr
      .asFunction<void Function(ffi.Pointer<ma_sound_group>, double)>(
          isLeaf: true);

  /// General Library Documentation Undocument By General Corporation & Global Corporation & General Developer
  double ma_sound_group_get_rolloff(
    ffi.Pointer<ma_sound_group> pGroup,
  ) {
    return _ma_sound_group_get_rolloff(
      pGroup,
    );
  }

  late final _ma_sound_group_get_rolloffPtr = _lookup<
          ffi.NativeFunction<ffi.Float Function(ffi.Pointer<ma_sound_group>)>>(
      'ma_sound_group_get_rolloff');
  late final _ma_sound_group_get_rolloff = _ma_sound_group_get_rolloffPtr
      .asFunction<double Function(ffi.Pointer<ma_sound_group>)>(isLeaf: true);

  /// General Library Documentation Undocument By General Corporation & Global Corporation & General Developer
  void ma_sound_group_set_min_gain(
    ffi.Pointer<ma_sound_group> pGroup,
    double minGain,
  ) {
    return _ma_sound_group_set_min_gain(
      pGroup,
      minGain,
    );
  }

  late final _ma_sound_group_set_min_gainPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Pointer<ma_sound_group>,
              ffi.Float)>>('ma_sound_group_set_min_gain');
  late final _ma_sound_group_set_min_gain = _ma_sound_group_set_min_gainPtr
      .asFunction<void Function(ffi.Pointer<ma_sound_group>, double)>(
          isLeaf: true);

  /// General Library Documentation Undocument By General Corporation & Global Corporation & General Developer
  double ma_sound_group_get_min_gain(
    ffi.Pointer<ma_sound_group> pGroup,
  ) {
    return _ma_sound_group_get_min_gain(
      pGroup,
    );
  }

  late final _ma_sound_group_get_min_gainPtr = _lookup<
          ffi.NativeFunction<ffi.Float Function(ffi.Pointer<ma_sound_group>)>>(
      'ma_sound_group_get_min_gain');
  late final _ma_sound_group_get_min_gain = _ma_sound_group_get_min_gainPtr
      .asFunction<double Function(ffi.Pointer<ma_sound_group>)>(isLeaf: true);

  /// General Library Documentation Undocument By General Corporation & Global Corporation & General Developer
  void ma_sound_group_set_max_gain(
    ffi.Pointer<ma_sound_group> pGroup,
    double maxGain,
  ) {
    return _ma_sound_group_set_max_gain(
      pGroup,
      maxGain,
    );
  }

  late final _ma_sound_group_set_max_gainPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Pointer<ma_sound_group>,
              ffi.Float)>>('ma_sound_group_set_max_gain');
  late final _ma_sound_group_set_max_gain = _ma_sound_group_set_max_gainPtr
      .asFunction<void Function(ffi.Pointer<ma_sound_group>, double)>(
          isLeaf: true);

  /// General Library Documentation Undocument By General Corporation & Global Corporation & General Developer
  double ma_sound_group_get_max_gain(
    ffi.Pointer<ma_sound_group> pGroup,
  ) {
    return _ma_sound_group_get_max_gain(
      pGroup,
    );
  }

  late final _ma_sound_group_get_max_gainPtr = _lookup<
          ffi.NativeFunction<ffi.Float Function(ffi.Pointer<ma_sound_group>)>>(
      'ma_sound_group_get_max_gain');
  late final _ma_sound_group_get_max_gain = _ma_sound_group_get_max_gainPtr
      .asFunction<double Function(ffi.Pointer<ma_sound_group>)>(isLeaf: true);

  /// General Library Documentation Undocument By General Corporation & Global Corporation & General Developer
  void ma_sound_group_set_min_distance(
    ffi.Pointer<ma_sound_group> pGroup,
    double minDistance,
  ) {
    return _ma_sound_group_set_min_distance(
      pGroup,
      minDistance,
    );
  }

  late final _ma_sound_group_set_min_distancePtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Pointer<ma_sound_group>,
              ffi.Float)>>('ma_sound_group_set_min_distance');
  late final _ma_sound_group_set_min_distance =
      _ma_sound_group_set_min_distancePtr
          .asFunction<void Function(ffi.Pointer<ma_sound_group>, double)>(
              isLeaf: true);

  /// General Library Documentation Undocument By General Corporation & Global Corporation & General Developer
  double ma_sound_group_get_min_distance(
    ffi.Pointer<ma_sound_group> pGroup,
  ) {
    return _ma_sound_group_get_min_distance(
      pGroup,
    );
  }

  late final _ma_sound_group_get_min_distancePtr = _lookup<
          ffi.NativeFunction<ffi.Float Function(ffi.Pointer<ma_sound_group>)>>(
      'ma_sound_group_get_min_distance');
  late final _ma_sound_group_get_min_distance =
      _ma_sound_group_get_min_distancePtr
          .asFunction<double Function(ffi.Pointer<ma_sound_group>)>(
              isLeaf: true);

  /// General Library Documentation Undocument By General Corporation & Global Corporation & General Developer
  void ma_sound_group_set_max_distance(
    ffi.Pointer<ma_sound_group> pGroup,
    double maxDistance,
  ) {
    return _ma_sound_group_set_max_distance(
      pGroup,
      maxDistance,
    );
  }

  late final _ma_sound_group_set_max_distancePtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Pointer<ma_sound_group>,
              ffi.Float)>>('ma_sound_group_set_max_distance');
  late final _ma_sound_group_set_max_distance =
      _ma_sound_group_set_max_distancePtr
          .asFunction<void Function(ffi.Pointer<ma_sound_group>, double)>(
              isLeaf: true);

  /// General Library Documentation Undocument By General Corporation & Global Corporation & General Developer
  double ma_sound_group_get_max_distance(
    ffi.Pointer<ma_sound_group> pGroup,
  ) {
    return _ma_sound_group_get_max_distance(
      pGroup,
    );
  }

  late final _ma_sound_group_get_max_distancePtr = _lookup<
          ffi.NativeFunction<ffi.Float Function(ffi.Pointer<ma_sound_group>)>>(
      'ma_sound_group_get_max_distance');
  late final _ma_sound_group_get_max_distance =
      _ma_sound_group_get_max_distancePtr
          .asFunction<double Function(ffi.Pointer<ma_sound_group>)>(
              isLeaf: true);

  /// General Library Documentation Undocument By General Corporation & Global Corporation & General Developer
  void ma_sound_group_set_cone(
    ffi.Pointer<ma_sound_group> pGroup,
    double innerAngleInRadians,
    double outerAngleInRadians,
    double outerGain,
  ) {
    return _ma_sound_group_set_cone(
      pGroup,
      innerAngleInRadians,
      outerAngleInRadians,
      outerGain,
    );
  }

  late final _ma_sound_group_set_conePtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Pointer<ma_sound_group>, ffi.Float, ffi.Float,
              ffi.Float)>>('ma_sound_group_set_cone');
  late final _ma_sound_group_set_cone = _ma_sound_group_set_conePtr.asFunction<
      void Function(
          ffi.Pointer<ma_sound_group>, double, double, double)>(isLeaf: true);

  /// General Library Documentation Undocument By General Corporation & Global Corporation & General Developer
  void ma_sound_group_get_cone(
    ffi.Pointer<ma_sound_group> pGroup,
    ffi.Pointer<ffi.Float> pInnerAngleInRadians,
    ffi.Pointer<ffi.Float> pOuterAngleInRadians,
    ffi.Pointer<ffi.Float> pOuterGain,
  ) {
    return _ma_sound_group_get_cone(
      pGroup,
      pInnerAngleInRadians,
      pOuterAngleInRadians,
      pOuterGain,
    );
  }

  late final _ma_sound_group_get_conePtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(
              ffi.Pointer<ma_sound_group>,
              ffi.Pointer<ffi.Float>,
              ffi.Pointer<ffi.Float>,
              ffi.Pointer<ffi.Float>)>>('ma_sound_group_get_cone');
  late final _ma_sound_group_get_cone = _ma_sound_group_get_conePtr.asFunction<
      void Function(ffi.Pointer<ma_sound_group>, ffi.Pointer<ffi.Float>,
          ffi.Pointer<ffi.Float>, ffi.Pointer<ffi.Float>)>(isLeaf: true);

  /// General Library Documentation Undocument By General Corporation & Global Corporation & General Developer
  void ma_sound_group_set_doppler_factor(
    ffi.Pointer<ma_sound_group> pGroup,
    double dopplerFactor,
  ) {
    return _ma_sound_group_set_doppler_factor(
      pGroup,
      dopplerFactor,
    );
  }

  late final _ma_sound_group_set_doppler_factorPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Pointer<ma_sound_group>,
              ffi.Float)>>('ma_sound_group_set_doppler_factor');
  late final _ma_sound_group_set_doppler_factor =
      _ma_sound_group_set_doppler_factorPtr
          .asFunction<void Function(ffi.Pointer<ma_sound_group>, double)>(
              isLeaf: true);

  /// General Library Documentation Undocument By General Corporation & Global Corporation & General Developer
  double ma_sound_group_get_doppler_factor(
    ffi.Pointer<ma_sound_group> pGroup,
  ) {
    return _ma_sound_group_get_doppler_factor(
      pGroup,
    );
  }

  late final _ma_sound_group_get_doppler_factorPtr = _lookup<
          ffi.NativeFunction<ffi.Float Function(ffi.Pointer<ma_sound_group>)>>(
      'ma_sound_group_get_doppler_factor');
  late final _ma_sound_group_get_doppler_factor =
      _ma_sound_group_get_doppler_factorPtr
          .asFunction<double Function(ffi.Pointer<ma_sound_group>)>(
              isLeaf: true);

  /// General Library Documentation Undocument By General Corporation & Global Corporation & General Developer
  void ma_sound_group_set_directional_attenuation_factor(
    ffi.Pointer<ma_sound_group> pGroup,
    double directionalAttenuationFactor,
  ) {
    return _ma_sound_group_set_directional_attenuation_factor(
      pGroup,
      directionalAttenuationFactor,
    );
  }

  late final _ma_sound_group_set_directional_attenuation_factorPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Pointer<ma_sound_group>,
              ffi.Float)>>('ma_sound_group_set_directional_attenuation_factor');
  late final _ma_sound_group_set_directional_attenuation_factor =
      _ma_sound_group_set_directional_attenuation_factorPtr
          .asFunction<void Function(ffi.Pointer<ma_sound_group>, double)>(
              isLeaf: true);

  /// General Library Documentation Undocument By General Corporation & Global Corporation & General Developer
  double ma_sound_group_get_directional_attenuation_factor(
    ffi.Pointer<ma_sound_group> pGroup,
  ) {
    return _ma_sound_group_get_directional_attenuation_factor(
      pGroup,
    );
  }

  late final _ma_sound_group_get_directional_attenuation_factorPtr = _lookup<
          ffi.NativeFunction<ffi.Float Function(ffi.Pointer<ma_sound_group>)>>(
      'ma_sound_group_get_directional_attenuation_factor');
  late final _ma_sound_group_get_directional_attenuation_factor =
      _ma_sound_group_get_directional_attenuation_factorPtr
          .asFunction<double Function(ffi.Pointer<ma_sound_group>)>(
              isLeaf: true);

  /// General Library Documentation Undocument By General Corporation & Global Corporation & General Developer
  void ma_sound_group_set_fade_in_pcm_frames(
    ffi.Pointer<ma_sound_group> pGroup,
    double volumeBeg,
    double volumeEnd,
    int fadeLengthInFrames,
  ) {
    return _ma_sound_group_set_fade_in_pcm_frames(
      pGroup,
      volumeBeg,
      volumeEnd,
      fadeLengthInFrames,
    );
  }

  late final _ma_sound_group_set_fade_in_pcm_framesPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Pointer<ma_sound_group>, ffi.Float, ffi.Float,
              ma_uint64)>>('ma_sound_group_set_fade_in_pcm_frames');
  late final _ma_sound_group_set_fade_in_pcm_frames =
      _ma_sound_group_set_fade_in_pcm_framesPtr.asFunction<
          void Function(
              ffi.Pointer<ma_sound_group>, double, double, int)>(isLeaf: true);

  /// General Library Documentation Undocument By General Corporation & Global Corporation & General Developer
  void ma_sound_group_set_fade_in_milliseconds(
    ffi.Pointer<ma_sound_group> pGroup,
    double volumeBeg,
    double volumeEnd,
    int fadeLengthInMilliseconds,
  ) {
    return _ma_sound_group_set_fade_in_milliseconds(
      pGroup,
      volumeBeg,
      volumeEnd,
      fadeLengthInMilliseconds,
    );
  }

  late final _ma_sound_group_set_fade_in_millisecondsPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Pointer<ma_sound_group>, ffi.Float, ffi.Float,
              ma_uint64)>>('ma_sound_group_set_fade_in_milliseconds');
  late final _ma_sound_group_set_fade_in_milliseconds =
      _ma_sound_group_set_fade_in_millisecondsPtr.asFunction<
          void Function(
              ffi.Pointer<ma_sound_group>, double, double, int)>(isLeaf: true);

  /// General Library Documentation Undocument By General Corporation & Global Corporation & General Developer
  double ma_sound_group_get_current_fade_volume(
    ffi.Pointer<ma_sound_group> pGroup,
  ) {
    return _ma_sound_group_get_current_fade_volume(
      pGroup,
    );
  }

  late final _ma_sound_group_get_current_fade_volumePtr = _lookup<
          ffi.NativeFunction<ffi.Float Function(ffi.Pointer<ma_sound_group>)>>(
      'ma_sound_group_get_current_fade_volume');
  late final _ma_sound_group_get_current_fade_volume =
      _ma_sound_group_get_current_fade_volumePtr
          .asFunction<double Function(ffi.Pointer<ma_sound_group>)>(
              isLeaf: true);

  /// General Library Documentation Undocument By General Corporation & Global Corporation & General Developer
  void ma_sound_group_set_start_time_in_pcm_frames(
    ffi.Pointer<ma_sound_group> pGroup,
    int absoluteGlobalTimeInFrames,
  ) {
    return _ma_sound_group_set_start_time_in_pcm_frames(
      pGroup,
      absoluteGlobalTimeInFrames,
    );
  }

  late final _ma_sound_group_set_start_time_in_pcm_framesPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Pointer<ma_sound_group>,
              ma_uint64)>>('ma_sound_group_set_start_time_in_pcm_frames');
  late final _ma_sound_group_set_start_time_in_pcm_frames =
      _ma_sound_group_set_start_time_in_pcm_framesPtr
          .asFunction<void Function(ffi.Pointer<ma_sound_group>, int)>(
              isLeaf: true);

  /// General Library Documentation Undocument By General Corporation & Global Corporation & General Developer
  void ma_sound_group_set_start_time_in_milliseconds(
    ffi.Pointer<ma_sound_group> pGroup,
    int absoluteGlobalTimeInMilliseconds,
  ) {
    return _ma_sound_group_set_start_time_in_milliseconds(
      pGroup,
      absoluteGlobalTimeInMilliseconds,
    );
  }

  late final _ma_sound_group_set_start_time_in_millisecondsPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Pointer<ma_sound_group>,
              ma_uint64)>>('ma_sound_group_set_start_time_in_milliseconds');
  late final _ma_sound_group_set_start_time_in_milliseconds =
      _ma_sound_group_set_start_time_in_millisecondsPtr
          .asFunction<void Function(ffi.Pointer<ma_sound_group>, int)>(
              isLeaf: true);

  /// General Library Documentation Undocument By General Corporation & Global Corporation & General Developer
  void ma_sound_group_set_stop_time_in_pcm_frames(
    ffi.Pointer<ma_sound_group> pGroup,
    int absoluteGlobalTimeInFrames,
  ) {
    return _ma_sound_group_set_stop_time_in_pcm_frames(
      pGroup,
      absoluteGlobalTimeInFrames,
    );
  }

  late final _ma_sound_group_set_stop_time_in_pcm_framesPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Pointer<ma_sound_group>,
              ma_uint64)>>('ma_sound_group_set_stop_time_in_pcm_frames');
  late final _ma_sound_group_set_stop_time_in_pcm_frames =
      _ma_sound_group_set_stop_time_in_pcm_framesPtr
          .asFunction<void Function(ffi.Pointer<ma_sound_group>, int)>(
              isLeaf: true);

  /// General Library Documentation Undocument By General Corporation & Global Corporation & General Developer
  void ma_sound_group_set_stop_time_in_milliseconds(
    ffi.Pointer<ma_sound_group> pGroup,
    int absoluteGlobalTimeInMilliseconds,
  ) {
    return _ma_sound_group_set_stop_time_in_milliseconds(
      pGroup,
      absoluteGlobalTimeInMilliseconds,
    );
  }

  late final _ma_sound_group_set_stop_time_in_millisecondsPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Pointer<ma_sound_group>,
              ma_uint64)>>('ma_sound_group_set_stop_time_in_milliseconds');
  late final _ma_sound_group_set_stop_time_in_milliseconds =
      _ma_sound_group_set_stop_time_in_millisecondsPtr
          .asFunction<void Function(ffi.Pointer<ma_sound_group>, int)>(
              isLeaf: true);

  /// General Library Documentation Undocument By General Corporation & Global Corporation & General Developer
  int ma_sound_group_is_playing(
    ffi.Pointer<ma_sound_group> pGroup,
  ) {
    return _ma_sound_group_is_playing(
      pGroup,
    );
  }

  late final _ma_sound_group_is_playingPtr = _lookup<
          ffi.NativeFunction<ma_bool32 Function(ffi.Pointer<ma_sound_group>)>>(
      'ma_sound_group_is_playing');
  late final _ma_sound_group_is_playing = _ma_sound_group_is_playingPtr
      .asFunction<int Function(ffi.Pointer<ma_sound_group>)>(isLeaf: true);

  /// General Library Documentation Undocument By General Corporation & Global Corporation & General Developer
  int ma_sound_group_get_time_in_pcm_frames(
    ffi.Pointer<ma_sound_group> pGroup,
  ) {
    return _ma_sound_group_get_time_in_pcm_frames(
      pGroup,
    );
  }

  late final _ma_sound_group_get_time_in_pcm_framesPtr = _lookup<
          ffi.NativeFunction<ma_uint64 Function(ffi.Pointer<ma_sound_group>)>>(
      'ma_sound_group_get_time_in_pcm_frames');
  late final _ma_sound_group_get_time_in_pcm_frames =
      _ma_sound_group_get_time_in_pcm_framesPtr
          .asFunction<int Function(ffi.Pointer<ma_sound_group>)>(isLeaf: true);
}

/// General Library Documentation Undocument By General Corporation & Global Corporation & General Developer
abstract class ma_log_level {
  /// General Library Documentation Undocument By General Corporation & Global Corporation & General Developer
  static const int MA_LOG_LEVEL_DEBUG = 4;

  /// General Library Documentation Undocument By General Corporation & Global Corporation & General Developer
  static const int MA_LOG_LEVEL_INFO = 3;

  /// General Library Documentation Undocument By General Corporation & Global Corporation & General Developer
  static const int MA_LOG_LEVEL_WARNING = 2;

  /// General Library Documentation Undocument By General Corporation & Global Corporation & General Developer
  static const int MA_LOG_LEVEL_ERROR = 1;
}

/// General Library Documentation Undocument By General Corporation & Global Corporation & General Developer
final class ma_context extends ffi.Struct {
  /// General Library Documentation Undocument By General Corporation & Global Corporation & General Developer
  external ma_backend_callbacks callbacks;

  @ffi.Int32()

  /// General Library Documentation Undocument By General Corporation & Global Corporation & General Developer
  external int backend;

  /// General Library Documentation Undocument By General Corporation & Global Corporation & General Developer
  external ffi.Pointer<ma_log> pLog;

  /// General Library Documentation Undocument By General Corporation & Global Corporation & General Developer
  external ma_log log;

  @ffi.Int32()

  /// General Library Documentation Undocument By General Corporation & Global Corporation & General Developer
  external int threadPriority;

  @ffi.Size()

  /// General Library Documentation Undocument By General Corporation & Global Corporation & General Developer
  external int threadStackSize;

  /// General Library Documentation Undocument By General Corporation & Global Corporation & General Developer
  external ffi.Pointer<ffi.Void> pUserData;

  /// General Library Documentation Undocument By General Corporation & Global Corporation & General Developer
  external ma_allocation_callbacks allocationCallbacks;

  /// General Library Documentation Undocument By General Corporation & Global Corporation & General Developer
  external ma_mutex deviceEnumLock;

  /// General Library Documentation Undocument By General Corporation & Global Corporation & General Developer
  external ma_mutex deviceInfoLock;

  @ma_uint32()

  /// General Library Documentation Undocument By General Corporation & Global Corporation & General Developer
  external int deviceInfoCapacity;

  @ma_uint32()

  /// General Library Documentation Undocument By General Corporation & Global Corporation & General Developer
  external int playbackDeviceInfoCount;

  @ma_uint32()

  /// General Library Documentation Undocument By General Corporation & Global Corporation & General Developer
  external int captureDeviceInfoCount;

  /// General Library Documentation Undocument By General Corporation & Global Corporation & General Developer
  external ffi.Pointer<ma_device_info> pDeviceInfos;

  /// General Library Documentation Undocument By General Corporation & Global Corporation & General Developer
  external UnnamedUnion8 unnamed;

  /// General Library Documentation Undocument By General Corporation & Global Corporation & General Developer
  external UnnamedUnion9 unnamed1;
}

/// General Library Documentation Undocument By General Corporation & Global Corporation & General Developer
final class ma_backend_callbacks extends ffi.Struct {
  /// General Library Documentation Undocument By General Corporation & Global Corporation & General Developer
  external ffi.Pointer<
      ffi.NativeFunction<
          ffi.Int32 Function(
              ffi.Pointer<ma_context> pContext,
              ffi.Pointer<ma_context_config> pConfig,
              ffi.Pointer<ma_backend_callbacks> pCallbacks)>> onContextInit;

  /// General Library Documentation Undocument By General Corporation & Global Corporation & General Developer
  external ffi.Pointer<
          ffi
          .NativeFunction<ffi.Int32 Function(ffi.Pointer<ma_context> pContext)>>
      onContextUninit;

  /// General Library Documentation Undocument By General Corporation & Global Corporation & General Developer
  external ffi.Pointer<
      ffi.NativeFunction<
          ffi.Int32 Function(
              ffi.Pointer<ma_context> pContext,
              ma_enum_devices_callback_proc callback,
              ffi.Pointer<ffi.Void> pUserData)>> onContextEnumerateDevices;

  /// General Library Documentation Undocument By General Corporation & Global Corporation & General Developer
  external ffi.Pointer<
      ffi.NativeFunction<
          ffi.Int32 Function(
              ffi.Pointer<ma_context> pContext,
              ffi.Int32 deviceType,
              ffi.Pointer<ma_device_id> pDeviceID,
              ffi.Pointer<ma_device_info> pDeviceInfo)>> onContextGetDeviceInfo;

  /// General Library Documentation Undocument By General Corporation & Global Corporation & General Developer
  external ffi.Pointer<
          ffi.NativeFunction<
              ffi.Int32 Function(
                  ffi.Pointer<ma_device> pDevice,
                  ffi.Pointer<ma_device_config> pConfig,
                  ffi.Pointer<ma_device_descriptor> pDescriptorPlayback,
                  ffi.Pointer<ma_device_descriptor> pDescriptorCapture)>>
      onDeviceInit;

  /// General Library Documentation Undocument By General Corporation & Global Corporation & General Developer
  external ffi.Pointer<
          ffi
          .NativeFunction<ffi.Int32 Function(ffi.Pointer<ma_device> pDevice)>>
      onDeviceUninit;

  /// General Library Documentation Undocument By General Corporation & Global Corporation & General Developer
  external ffi.Pointer<
          ffi
          .NativeFunction<ffi.Int32 Function(ffi.Pointer<ma_device> pDevice)>>
      onDeviceStart;

  /// General Library Documentation Undocument By General Corporation & Global Corporation & General Developer
  external ffi.Pointer<
          ffi
          .NativeFunction<ffi.Int32 Function(ffi.Pointer<ma_device> pDevice)>>
      onDeviceStop;

  /// General Library Documentation Undocument By General Corporation & Global Corporation & General Developer
  external ffi.Pointer<
      ffi.NativeFunction<
          ffi.Int32 Function(
              ffi.Pointer<ma_device> pDevice,
              ffi.Pointer<ffi.Void> pFrames,
              ma_uint32 frameCount,
              ffi.Pointer<ma_uint32> pFramesRead)>> onDeviceRead;

  /// General Library Documentation Undocument By General Corporation & Global Corporation & General Developer
  external ffi.Pointer<
      ffi.NativeFunction<
          ffi.Int32 Function(
              ffi.Pointer<ma_device> pDevice,
              ffi.Pointer<ffi.Void> pFrames,
              ma_uint32 frameCount,
              ffi.Pointer<ma_uint32> pFramesWritten)>> onDeviceWrite;

  /// General Library Documentation Undocument By General Corporation & Global Corporation & General Developer
  external ffi.Pointer<
          ffi
          .NativeFunction<ffi.Int32 Function(ffi.Pointer<ma_device> pDevice)>>
      onDeviceDataLoop;

  /// General Library Documentation Undocument By General Corporation & Global Corporation & General Developer
  external ffi.Pointer<
          ffi
          .NativeFunction<ffi.Int32 Function(ffi.Pointer<ma_device> pDevice)>>
      onDeviceDataLoopWakeup;

  /// General Library Documentation Undocument By General Corporation & Global Corporation & General Developer
  external ffi.Pointer<
      ffi.NativeFunction<
          ffi.Int32 Function(ffi.Pointer<ma_device> pDevice, ffi.Int32 type,
              ffi.Pointer<ma_device_info> pDeviceInfo)>> onDeviceGetInfo;
}

/// General Library Documentation Undocument By General Corporation & Global Corporation & General Developer
abstract class ma_result {
  /// General Library Documentation Undocument By General Corporation & Global Corporation & General Developer
  static const int MA_SUCCESS = 0;

  /// General Library Documentation Undocument By General Corporation & Global Corporation & General Developer
  static const int MA_ERROR = -1;

  /// General Library Documentation Undocument By General Corporation & Global Corporation & General Developer
  static const int MA_INVALID_ARGS = -2;

  /// General Library Documentation Undocument By General Corporation & Global Corporation & General Developer
  static const int MA_INVALID_OPERATION = -3;

  /// General Library Documentation Undocument By General Corporation & Global Corporation & General Developer
  static const int MA_OUT_OF_MEMORY = -4;

  /// General Library Documentation Undocument By General Corporation & Global Corporation & General Developer
  static const int MA_OUT_OF_RANGE = -5;

  /// General Library Documentation Undocument By General Corporation & Global Corporation & General Developer
  static const int MA_ACCESS_DENIED = -6;

  /// General Library Documentation Undocument By General Corporation & Global Corporation & General Developer
  static const int MA_DOES_NOT_EXIST = -7;

  /// General Library Documentation Undocument By General Corporation & Global Corporation & General Developer
  static const int MA_ALREADY_EXISTS = -8;

  /// General Library Documentation Undocument By General Corporation & Global Corporation & General Developer
  static const int MA_TOO_MANY_OPEN_FILES = -9;

  /// General Library Documentation Undocument By General Corporation & Global Corporation & General Developer
  static const int MA_INVALID_FILE = -10;

  /// General Library Documentation Undocument By General Corporation & Global Corporation & General Developer
  static const int MA_TOO_BIG = -11;

  /// General Library Documentation Undocument By General Corporation & Global Corporation & General Developer
  static const int MA_PATH_TOO_LONG = -12;

  /// General Library Documentation Undocument By General Corporation & Global Corporation & General Developer
  static const int MA_NAME_TOO_LONG = -13;

  /// General Library Documentation Undocument By General Corporation & Global Corporation & General Developer
  static const int MA_NOT_DIRECTORY = -14;

  /// General Library Documentation Undocument By General Corporation & Global Corporation & General Developer
  static const int MA_IS_DIRECTORY = -15;

  /// General Library Documentation Undocument By General Corporation & Global Corporation & General Developer
  static const int MA_DIRECTORY_NOT_EMPTY = -16;

  /// General Library Documentation Undocument By General Corporation & Global Corporation & General Developer
  static const int MA_AT_END = -17;

  /// General Library Documentation Undocument By General Corporation & Global Corporation & General Developer
  static const int MA_NO_SPACE = -18;

  /// General Library Documentation Undocument By General Corporation & Global Corporation & General Developer
  static const int MA_BUSY = -19;

  /// General Library Documentation Undocument By General Corporation & Global Corporation & General Developer
  static const int MA_IO_ERROR = -20;

  /// General Library Documentation Undocument By General Corporation & Global Corporation & General Developer
  static const int MA_INTERRUPT = -21;

  /// General Library Documentation Undocument By General Corporation & Global Corporation & General Developer
  static const int MA_UNAVAILABLE = -22;

  /// General Library Documentation Undocument By General Corporation & Global Corporation & General Developer
  static const int MA_ALREADY_IN_USE = -23;

  /// General Library Documentation Undocument By General Corporation & Global Corporation & General Developer
  static const int MA_BAD_ADDRESS = -24;

  /// General Library Documentation Undocument By General Corporation & Global Corporation & General Developer
  static const int MA_BAD_SEEK = -25;

  /// General Library Documentation Undocument By General Corporation & Global Corporation & General Developer
  static const int MA_BAD_PIPE = -26;

  /// General Library Documentation Undocument By General Corporation & Global Corporation & General Developer
  static const int MA_DEADLOCK = -27;

  /// General Library Documentation Undocument By General Corporation & Global Corporation & General Developer
  static const int MA_TOO_MANY_LINKS = -28;

  /// General Library Documentation Undocument By General Corporation & Global Corporation & General Developer
  static const int MA_NOT_IMPLEMENTED = -29;

  /// General Library Documentation Undocument By General Corporation & Global Corporation & General Developer
  static const int MA_NO_MESSAGE = -30;

  /// General Library Documentation Undocument By General Corporation & Global Corporation & General Developer
  static const int MA_BAD_MESSAGE = -31;

  /// General Library Documentation Undocument By General Corporation & Global Corporation & General Developer
  static const int MA_NO_DATA_AVAILABLE = -32;

  /// General Library Documentation Undocument By General Corporation & Global Corporation & General Developer
  static const int MA_INVALID_DATA = -33;

  /// General Library Documentation Undocument By General Corporation & Global Corporation & General Developer
  static const int MA_TIMEOUT = -34;

  /// General Library Documentation Undocument By General Corporation & Global Corporation & General Developer
  static const int MA_NO_NETWORK = -35;

  /// General Library Documentation Undocument By General Corporation & Global Corporation & General Developer
  static const int MA_NOT_UNIQUE = -36;

  /// General Library Documentation Undocument By General Corporation & Global Corporation & General Developer
  static const int MA_NOT_SOCKET = -37;

  /// General Library Documentation Undocument By General Corporation & Global Corporation & General Developer
  static const int MA_NO_ADDRESS = -38;

  /// General Library Documentation Undocument By General Corporation & Global Corporation & General Developer
  static const int MA_BAD_PROTOCOL = -39;

  /// General Library Documentation Undocument By General Corporation & Global Corporation & General Developer
  static const int MA_PROTOCOL_UNAVAILABLE = -40;

  /// General Library Documentation Undocument By General Corporation & Global Corporation & General Developer
  static const int MA_PROTOCOL_NOT_SUPPORTED = -41;

  /// General Library Documentation Undocument By General Corporation & Global Corporation & General Developer
  static const int MA_PROTOCOL_FAMILY_NOT_SUPPORTED = -42;

  /// General Library Documentation Undocument By General Corporation & Global Corporation & General Developer
  static const int MA_ADDRESS_FAMILY_NOT_SUPPORTED = -43;

  /// General Library Documentation Undocument By General Corporation & Global Corporation & General Developer
  static const int MA_SOCKET_NOT_SUPPORTED = -44;

  /// General Library Documentation Undocument By General Corporation & Global Corporation & General Developer
  static const int MA_CONNECTION_RESET = -45;

  /// General Library Documentation Undocument By General Corporation & Global Corporation & General Developer
  static const int MA_ALREADY_CONNECTED = -46;

  /// General Library Documentation Undocument By General Corporation & Global Corporation & General Developer
  static const int MA_NOT_CONNECTED = -47;

  /// General Library Documentation Undocument By General Corporation & Global Corporation & General Developer
  static const int MA_CONNECTION_REFUSED = -48;

  /// General Library Documentation Undocument By General Corporation & Global Corporation & General Developer
  static const int MA_NO_HOST = -49;

  /// General Library Documentation Undocument By General Corporation & Global Corporation & General Developer
  static const int MA_IN_PROGRESS = -50;

  /// General Library Documentation Undocument By General Corporation & Global Corporation & General Developer
  static const int MA_CANCELLED = -51;

  /// General Library Documentation Undocument By General Corporation & Global Corporation & General Developer
  static const int MA_MEMORY_ALREADY_MAPPED = -52;

  /// General Library Documentation Undocument By General Corporation & Global Corporation & General Developer
  static const int MA_CRC_MISMATCH = -100;

  /// General Library Documentation Undocument By General Corporation & Global Corporation & General Developer
  static const int MA_FORMAT_NOT_SUPPORTED = -200;

  /// General Library Documentation Undocument By General Corporation & Global Corporation & General Developer
  static const int MA_DEVICE_TYPE_NOT_SUPPORTED = -201;

  /// General Library Documentation Undocument By General Corporation & Global Corporation & General Developer
  static const int MA_SHARE_MODE_NOT_SUPPORTED = -202;

  /// General Library Documentation Undocument By General Corporation & Global Corporation & General Developer
  static const int MA_NO_BACKEND = -203;

  /// General Library Documentation Undocument By General Corporation & Global Corporation & General Developer
  static const int MA_NO_DEVICE = -204;

  /// General Library Documentation Undocument By General Corporation & Global Corporation & General Developer
  static const int MA_API_NOT_FOUND = -205;

  /// General Library Documentation Undocument By General Corporation & Global Corporation & General Developer
  static const int MA_INVALID_DEVICE_CONFIG = -206;

  /// General Library Documentation Undocument By General Corporation & Global Corporation & General Developer
  static const int MA_LOOP = -207;

  /// General Library Documentation Undocument By General Corporation & Global Corporation & General Developer
  static const int MA_BACKEND_NOT_ENABLED = -208;

  /// General Library Documentation Undocument By General Corporation & Global Corporation & General Developer
  static const int MA_DEVICE_NOT_INITIALIZED = -300;

  /// General Library Documentation Undocument By General Corporation & Global Corporation & General Developer
  static const int MA_DEVICE_ALREADY_INITIALIZED = -301;

  /// General Library Documentation Undocument By General Corporation & Global Corporation & General Developer
  static const int MA_DEVICE_NOT_STARTED = -302;

  /// General Library Documentation Undocument By General Corporation & Global Corporation & General Developer
  static const int MA_DEVICE_NOT_STOPPED = -303;

  /// General Library Documentation Undocument By General Corporation & Global Corporation & General Developer
  static const int MA_FAILED_TO_INIT_BACKEND = -400;

  /// General Library Documentation Undocument By General Corporation & Global Corporation & General Developer
  static const int MA_FAILED_TO_OPEN_BACKEND_DEVICE = -401;

  /// General Library Documentation Undocument By General Corporation & Global Corporation & General Developer
  static const int MA_FAILED_TO_START_BACKEND_DEVICE = -402;

  /// General Library Documentation Undocument By General Corporation & Global Corporation & General Developer
  static const int MA_FAILED_TO_STOP_BACKEND_DEVICE = -403;
}

/// General Library Documentation Undocument By General Corporation & Global Corporation & General Developer
final class ma_context_config extends ffi.Struct {
  /// General Library Documentation Undocument By General Corporation & Global Corporation & General Developer
  external ffi.Pointer<ma_log> pLog;

  @ffi.Int32()

  /// General Library Documentation Undocument By General Corporation & Global Corporation & General Developer
  external int threadPriority;

  @ffi.Size()

  /// General Library Documentation Undocument By General Corporation & Global Corporation & General Developer
  external int threadStackSize;

  /// General Library Documentation Undocument By General Corporation & Global Corporation & General Developer
  external ffi.Pointer<ffi.Void> pUserData;

  /// General Library Documentation Undocument By General Corporation & Global Corporation & General Developer
  external ma_allocation_callbacks allocationCallbacks;

  /// General Library Documentation Undocument By General Corporation & Global Corporation & General Developer
  external UnnamedStruct1 alsa;

  /// General Library Documentation Undocument By General Corporation & Global Corporation & General Developer
  external UnnamedStruct2 pulse;

  /// General Library Documentation Undocument By General Corporation & Global Corporation & General Developer
  external UnnamedStruct3 coreaudio;

  /// General Library Documentation Undocument By General Corporation & Global Corporation & General Developer
  external UnnamedStruct4 jack;

  /// General Library Documentation Undocument By General Corporation & Global Corporation & General Developer
  external ma_backend_callbacks custom;
}

/// General Library Documentation Undocument By General Corporation & Global Corporation & General Developer
final class ma_log extends ffi.Struct {
  @ffi.Array.multi([4])

  /// General Library Documentation Undocument By General Corporation & Global Corporation & General Developer
  external ffi.Array<ma_log_callback> callbacks;

  @ma_uint32()

  /// General Library Documentation Undocument By General Corporation & Global Corporation & General Developer
  external int callbackCount;

  /// General Library Documentation Undocument By General Corporation & Global Corporation & General Developer
  external ma_allocation_callbacks allocationCallbacks;

  /// General Library Documentation Undocument By General Corporation & Global Corporation & General Developer
  external ma_mutex lock;
}

/// General Library Documentation Undocument By General Corporation & Global Corporation & General Developer
final class ma_log_callback extends ffi.Struct {
  /// General Library Documentation Undocument By General Corporation & Global Corporation & General Developer
  external ma_log_callback_proc onLog;

  /// General Library Documentation Undocument By General Corporation & Global Corporation & General Developer
  external ffi.Pointer<ffi.Void> pUserData;
}

/// General Library Documentation Undocument By General Corporation & Global Corporation & General Developer
typedef ma_log_callback_proc
    = ffi.Pointer<ffi.NativeFunction<ma_log_callback_procFunction>>;

/// General Library Documentation Undocument By General Corporation & Global Corporation & General Developer
typedef ma_log_callback_procFunction = ffi.Void Function(
    ffi.Pointer<ffi.Void> pUserData,
    ma_uint32 level,
    ffi.Pointer<ffi.Char> pMessage);

/// General Library Documentation Undocument By General Corporation & Global Corporation & General Developer
typedef Dartma_log_callback_procFunction = void Function(
    ffi.Pointer<ffi.Void> pUserData,
    Dartma_uint32 level,
    ffi.Pointer<ffi.Char> pMessage);

/// General Library Documentation Undocument By General Corporation & Global Corporation & General Developer
typedef ma_uint32 = ffi.UnsignedInt;

/// General Library Documentation Undocument By General Corporation & Global Corporation & General Developer
typedef Dartma_uint32 = int;

/// General Library Documentation Undocument By General Corporation & Global Corporation & General Developer
final class ma_allocation_callbacks extends ffi.Struct {
  /// General Library Documentation Undocument By General Corporation & Global Corporation & General Developer
  external ffi.Pointer<ffi.Void> pUserData;

  /// General Library Documentation Undocument By General Corporation & Global Corporation & General Developer
  external ffi.Pointer<
      ffi.NativeFunction<
          ffi.Pointer<ffi.Void> Function(
              ffi.Size sz, ffi.Pointer<ffi.Void> pUserData)>> onMalloc;

  /// General Library Documentation Undocument By General Corporation & Global Corporation & General Developer
  external ffi.Pointer<
      ffi.NativeFunction<
          ffi.Pointer<ffi.Void> Function(ffi.Pointer<ffi.Void> p, ffi.Size sz,
              ffi.Pointer<ffi.Void> pUserData)>> onRealloc;

  /// General Library Documentation Undocument By General Corporation & Global Corporation & General Developer
  external ffi.Pointer<
          ffi.NativeFunction<
              ffi.Void Function(
                  ffi.Pointer<ffi.Void> p, ffi.Pointer<ffi.Void> pUserData)>>
      onFree;
}

/// General Library Documentation Undocument By General Corporation & Global Corporation & General Developer
typedef ma_mutex = ma_pthread_mutex_t;

/// General Library Documentation Undocument By General Corporation & Global Corporation & General Developer
typedef ma_pthread_mutex_t = pthread_mutex_t;

/// General Library Documentation Undocument By General Corporation & Global Corporation & General Developer
final class pthread_mutex_t extends ffi.Union {
  external __pthread_mutex_s _data;

  @ffi.Array.multi([40])
  external ffi.Array<ffi.Char> _size;

  @ffi.Long()
  external int _align;
}

final class __pthread_mutex_s extends ffi.Struct {
  @ffi.Int()
  external int _lock;

  @ffi.UnsignedInt()
  external int _count;

  @ffi.Int()
  external int _owner;

  @ffi.UnsignedInt()
  external int _nusers;

  @ffi.Int()
  external int _kind;

  @ffi.Short()
  external int _spins;

  @ffi.Short()
  external int _elision;

  external __pthread_list_t _list;
}

typedef __pthread_list_t = __pthread_internal_list;

final class __pthread_internal_list extends ffi.Struct {
  external ffi.Pointer<__pthread_internal_list> _prev;

  external ffi.Pointer<__pthread_internal_list> _next;
}

/// General Library Documentation Undocument By General Corporation & Global Corporation & General Developer
abstract class ma_thread_priority {
  /// General Library Documentation Undocument By General Corporation & Global Corporation & General Developer
  static const int ma_thread_priority_idle = -5;

  /// General Library Documentation Undocument By General Corporation & Global Corporation & General Developer
  static const int ma_thread_priority_lowest = -4;

  /// General Library Documentation Undocument By General Corporation & Global Corporation & General Developer
  static const int ma_thread_priority_low = -3;

  /// General Library Documentation Undocument By General Corporation & Global Corporation & General Developer
  static const int ma_thread_priority_normal = -2;

  /// General Library Documentation Undocument By General Corporation & Global Corporation & General Developer
  static const int ma_thread_priority_high = -1;

  /// General Library Documentation Undocument By General Corporation & Global Corporation & General Developer
  static const int ma_thread_priority_highest = 0;

  /// General Library Documentation Undocument By General Corporation & Global Corporation & General Developer
  static const int ma_thread_priority_realtime = 1;

  /// General Library Documentation Undocument By General Corporation & Global Corporation & General Developer
  static const int ma_thread_priority_default = 0;
}

/// General Library Documentation Undocument By General Corporation & Global Corporation & General Developer
final class UnnamedStruct1 extends ffi.Struct {
  @ma_bool32()

  /// General Library Documentation Undocument By General Corporation & Global Corporation & General Developer
  external int useVerboseDeviceEnumeration;
}

/// General Library Documentation Undocument By General Corporation & Global Corporation & General Developer
typedef ma_bool32 = ma_uint32;

/// General Library Documentation Undocument By General Corporation & Global Corporation & General Developer
final class UnnamedStruct2 extends ffi.Struct {
  /// General Library Documentation Undocument By General Corporation & Global Corporation & General Developer
  external ffi.Pointer<ffi.Char> pApplicationName;

  /// General Library Documentation Undocument By General Corporation & Global Corporation & General Developer
  external ffi.Pointer<ffi.Char> pServerName;

  @ma_bool32()

  /// General Library Documentation Undocument By General Corporation & Global Corporation & General Developer
  external int tryAutoSpawn;
}

/// General Library Documentation Undocument By General Corporation & Global Corporation & General Developer
final class UnnamedStruct3 extends ffi.Struct {
  @ffi.Int32()

  /// General Library Documentation Undocument By General Corporation & Global Corporation & General Developer
  external int sessionCategory;

  @ma_uint32()

  /// General Library Documentation Undocument By General Corporation & Global Corporation & General Developer
  external int sessionCategoryOptions;

  @ma_bool32()

  /// General Library Documentation Undocument By General Corporation & Global Corporation & General Developer
  external int noAudioSessionActivate;

  @ma_bool32()

  /// General Library Documentation Undocument By General Corporation & Global Corporation & General Developer
  external int noAudioSessionDeactivate;
}

/// General Library Documentation Undocument By General Corporation & Global Corporation & General Developer
abstract class ma_ios_session_category {
  /// General Library Documentation Undocument By General Corporation & Global Corporation & General Developer
  static const int ma_ios_session_category_default = 0;

  /// General Library Documentation Undocument By General Corporation & Global Corporation & General Developer
  static const int ma_ios_session_category_none = 1;

  /// General Library Documentation Undocument By General Corporation & Global Corporation & General Developer
  static const int ma_ios_session_category_ambient = 2;

  /// General Library Documentation Undocument By General Corporation & Global Corporation & General Developer
  static const int ma_ios_session_category_solo_ambient = 3;

  /// General Library Documentation Undocument By General Corporation & Global Corporation & General Developer
  static const int ma_ios_session_category_playback = 4;

  /// General Library Documentation Undocument By General Corporation & Global Corporation & General Developer
  static const int ma_ios_session_category_record = 5;

  /// General Library Documentation Undocument By General Corporation & Global Corporation & General Developer
  static const int ma_ios_session_category_play_and_record = 6;

  /// General Library Documentation Undocument By General Corporation & Global Corporation & General Developer
  static const int ma_ios_session_category_multi_route = 7;
}

/// General Library Documentation Undocument By General Corporation & Global Corporation & General Developer
final class UnnamedStruct4 extends ffi.Struct {
  /// General Library Documentation Undocument By General Corporation & Global Corporation & General Developer
  external ffi.Pointer<ffi.Char> pClientName;

  @ma_bool32()

  /// General Library Documentation Undocument By General Corporation & Global Corporation & General Developer
  external int tryStartServer;
}

/// General Library Documentation Undocument By General Corporation & Global Corporation & General Developer
typedef ma_enum_devices_callback_proc
    = ffi.Pointer<ffi.NativeFunction<ma_enum_devices_callback_procFunction>>;

/// General Library Documentation Undocument By General Corporation & Global Corporation & General Developer
typedef ma_enum_devices_callback_procFunction = ma_bool32 Function(
    ffi.Pointer<ma_context> pContext,
    ffi.Int32 deviceType,
    ffi.Pointer<ma_device_info> pInfo,
    ffi.Pointer<ffi.Void> pUserData);

/// General Library Documentation Undocument By General Corporation & Global Corporation & General Developer
typedef Dartma_enum_devices_callback_procFunction = Dartma_uint32 Function(
    ffi.Pointer<ma_context> pContext,
    int deviceType,
    ffi.Pointer<ma_device_info> pInfo,
    ffi.Pointer<ffi.Void> pUserData);

/// General Library Documentation Undocument By General Corporation & Global Corporation & General Developer
abstract class ma_device_type {
  /// General Library Documentation Undocument By General Corporation & Global Corporation & General Developer
  static const int ma_device_type_playback = 1;

  /// General Library Documentation Undocument By General Corporation & Global Corporation & General Developer
  static const int ma_device_type_capture = 2;

  /// General Library Documentation Undocument By General Corporation & Global Corporation & General Developer
  static const int ma_device_type_duplex = 3;

  /// General Library Documentation Undocument By General Corporation & Global Corporation & General Developer
  static const int ma_device_type_loopback = 4;
}

/// General Library Documentation Undocument By General Corporation & Global Corporation & General Developer
final class ma_device_info extends ffi.Struct {
  /// General Library Documentation Undocument By General Corporation & Global Corporation & General Developer
  external ma_device_id id;

  @ffi.Array.multi([256])

  /// General Library Documentation Undocument By General Corporation & Global Corporation & General Developer
  external ffi.Array<ffi.Char> name;

  @ma_bool32()

  /// General Library Documentation Undocument By General Corporation & Global Corporation & General Developer
  external int isDefault;

  @ma_uint32()

  /// General Library Documentation Undocument By General Corporation & Global Corporation & General Developer
  external int nativeDataFormatCount;

  @ffi.Array.multi([64])

  /// General Library Documentation Undocument By General Corporation & Global Corporation & General Developer
  external ffi.Array<UnnamedStruct5> nativeDataFormats;
}

/// General Library Documentation Undocument By General Corporation & Global Corporation & General Developer
final class ma_device_id extends ffi.Union {
  @ffi.Array.multi([64])

  /// General Library Documentation Undocument By General Corporation & Global Corporation & General Developer
  external ffi.Array<ma_wchar_win32> wasapi;

  @ffi.Array.multi([16])

  /// General Library Documentation Undocument By General Corporation & Global Corporation & General Developer
  external ffi.Array<ma_uint8> dsound;

  @ma_uint32()

  /// General Library Documentation Undocument By General Corporation & Global Corporation & General Developer
  external int winmm;

  @ffi.Array.multi([256])

  /// General Library Documentation Undocument By General Corporation & Global Corporation & General Developer
  external ffi.Array<ffi.Char> alsa;

  @ffi.Array.multi([256])

  /// General Library Documentation Undocument By General Corporation & Global Corporation & General Developer
  external ffi.Array<ffi.Char> pulse;

  @ffi.Int()

  /// General Library Documentation Undocument By General Corporation & Global Corporation & General Developer
  external int jack;

  @ffi.Array.multi([256])

  /// General Library Documentation Undocument By General Corporation & Global Corporation & General Developer
  external ffi.Array<ffi.Char> coreaudio;

  @ffi.Array.multi([256])

  /// General Library Documentation Undocument By General Corporation & Global Corporation & General Developer
  external ffi.Array<ffi.Char> sndio;

  @ffi.Array.multi([256])

  /// General Library Documentation Undocument By General Corporation & Global Corporation & General Developer
  external ffi.Array<ffi.Char> audio4;

  @ffi.Array.multi([64])

  /// General Library Documentation Undocument By General Corporation & Global Corporation & General Developer
  external ffi.Array<ffi.Char> oss;

  @ma_int32()

  /// General Library Documentation Undocument By General Corporation & Global Corporation & General Developer
  external int aaudio;

  @ma_uint32()

  /// General Library Documentation Undocument By General Corporation & Global Corporation & General Developer
  external int opensl;

  @ffi.Array.multi([32])

  /// General Library Documentation Undocument By General Corporation & Global Corporation & General Developer
  external ffi.Array<ffi.Char> webaudio;

  /// General Library Documentation Undocument By General Corporation & Global Corporation & General Developer
  external UnnamedUnion1 custom;

  @ffi.Int()

  /// General Library Documentation Undocument By General Corporation & Global Corporation & General Developer
  external int nullbackend;
}

/// General Library Documentation Undocument By General Corporation & Global Corporation & General Developer
typedef ma_wchar_win32 = ma_uint16;

/// General Library Documentation Undocument By General Corporation & Global Corporation & General Developer
typedef ma_uint16 = ffi.UnsignedShort;

/// General Library Documentation Undocument By General Corporation & Global Corporation & General Developer
typedef Dartma_uint16 = int;

/// General Library Documentation Undocument By General Corporation & Global Corporation & General Developer
typedef ma_uint8 = ffi.UnsignedChar;

/// General Library Documentation Undocument By General Corporation & Global Corporation & General Developer
typedef Dartma_uint8 = int;

/// General Library Documentation Undocument By General Corporation & Global Corporation & General Developer
typedef ma_int32 = ffi.Int;

/// General Library Documentation Undocument By General Corporation & Global Corporation & General Developer
typedef Dartma_int32 = int;

/// General Library Documentation Undocument By General Corporation & Global Corporation & General Developer
final class UnnamedUnion1 extends ffi.Union {
  @ffi.Int()

  /// General Library Documentation Undocument By General Corporation & Global Corporation & General Developer
  external int i;

  @ffi.Array.multi([256])

  /// General Library Documentation Undocument By General Corporation & Global Corporation & General Developer
  external ffi.Array<ffi.Char> s;

  /// General Library Documentation Undocument By General Corporation & Global Corporation & General Developer
  external ffi.Pointer<ffi.Void> p;
}

/// General Library Documentation Undocument By General Corporation & Global Corporation & General Developer
final class UnnamedStruct5 extends ffi.Struct {
  @ffi.Int32()

  /// General Library Documentation Undocument By General Corporation & Global Corporation & General Developer
  external int format;

  @ma_uint32()

  /// General Library Documentation Undocument By General Corporation & Global Corporation & General Developer
  external int channels;

  @ma_uint32()

  /// General Library Documentation Undocument By General Corporation & Global Corporation & General Developer
  external int sampleRate;

  @ma_uint32()

  /// General Library Documentation Undocument By General Corporation & Global Corporation & General Developer
  external int flags;
}

/// General Library Documentation Undocument By General Corporation & Global Corporation & General Developer
abstract class ma_format {
  /// General Library Documentation Undocument By General Corporation & Global Corporation & General Developer
  static const int ma_format_unknown = 0;

  /// General Library Documentation Undocument By General Corporation & Global Corporation & General Developer
  static const int ma_format_u8 = 1;

  /// General Library Documentation Undocument By General Corporation & Global Corporation & General Developer
  static const int ma_format_s16 = 2;

  /// General Library Documentation Undocument By General Corporation & Global Corporation & General Developer
  static const int ma_format_s24 = 3;

  /// General Library Documentation Undocument By General Corporation & Global Corporation & General Developer
  static const int ma_format_s32 = 4;

  /// General Library Documentation Undocument By General Corporation & Global Corporation & General Developer
  static const int ma_format_f32 = 5;

  /// General Library Documentation Undocument By General Corporation & Global Corporation & General Developer
  static const int ma_format_count = 6;
}

/// General Library Documentation Undocument By General Corporation & Global Corporation & General Developer
final class ma_device extends ffi.Struct {
  /// General Library Documentation Undocument By General Corporation & Global Corporation & General Developer
  external ffi.Pointer<ma_context> pContext;

  @ffi.Int32()

  /// General Library Documentation Undocument By General Corporation & Global Corporation & General Developer
  external int type;

  @ma_uint32()

  /// General Library Documentation Undocument By General Corporation & Global Corporation & General Developer
  external int sampleRate;

  /// General Library Documentation Undocument By General Corporation & Global Corporation & General Developer
  external ma_atomic_device_state state;

  /// General Library Documentation Undocument By General Corporation & Global Corporation & General Developer
  external ma_device_data_proc onData;

  /// General Library Documentation Undocument By General Corporation & Global Corporation & General Developer
  external ma_device_notification_proc onNotification;

  /// General Library Documentation Undocument By General Corporation & Global Corporation & General Developer
  external ma_stop_proc onStop;

  /// General Library Documentation Undocument By General Corporation & Global Corporation & General Developer
  external ffi.Pointer<ffi.Void> pUserData;

  /// General Library Documentation Undocument By General Corporation & Global Corporation & General Developer
  external ma_mutex startStopLock;

  /// General Library Documentation Undocument By General Corporation & Global Corporation & General Developer
  external ma_event wakeupEvent;

  /// General Library Documentation Undocument By General Corporation & Global Corporation & General Developer
  external ma_event startEvent;

  /// General Library Documentation Undocument By General Corporation & Global Corporation & General Developer
  external ma_event stopEvent;

  @ma_thread()

  /// General Library Documentation Undocument By General Corporation & Global Corporation & General Developer
  external int thread;

  @ffi.Int32()

  /// General Library Documentation Undocument By General Corporation & Global Corporation & General Developer
  external int workResult;

  @ma_bool8()

  /// General Library Documentation Undocument By General Corporation & Global Corporation & General Developer
  external int isOwnerOfContext;

  @ma_bool8()

  /// General Library Documentation Undocument By General Corporation & Global Corporation & General Developer
  external int noPreSilencedOutputBuffer;

  @ma_bool8()

  /// General Library Documentation Undocument By General Corporation & Global Corporation & General Developer
  external int noClip;

  @ma_bool8()

  /// General Library Documentation Undocument By General Corporation & Global Corporation & General Developer
  external int noDisableDenormals;

  @ma_bool8()

  /// General Library Documentation Undocument By General Corporation & Global Corporation & General Developer
  external int noFixedSizedCallback;

  /// General Library Documentation Undocument By General Corporation & Global Corporation & General Developer
  external ma_atomic_float masterVolumeFactor;

  /// General Library Documentation Undocument By General Corporation & Global Corporation & General Developer
  external ma_duplex_rb duplexRB;

  /// General Library Documentation Undocument By General Corporation & Global Corporation & General Developer
  external UnnamedStruct11 resampling;

  /// General Library Documentation Undocument By General Corporation & Global Corporation & General Developer
  external UnnamedStruct14 playback;

  /// General Library Documentation Undocument By General Corporation & Global Corporation & General Developer
  external UnnamedStruct15 capture;

  /// General Library Documentation Undocument By General Corporation & Global Corporation & General Developer
  external UnnamedUnion7 unnamed;
}

/// General Library Documentation Undocument By General Corporation & Global Corporation & General Developer
final class ma_atomic_device_state extends ffi.Struct {
  @ffi.Int32()

  /// General Library Documentation Undocument By General Corporation & Global Corporation & General Developer
  external int value;
}

/// General Library Documentation Undocument By General Corporation & Global Corporation & General Developer
abstract class ma_device_state {
  /// General Library Documentation Undocument By General Corporation & Global Corporation & General Developer
  static const int ma_device_state_uninitialized = 0;

  /// General Library Documentation Undocument By General Corporation & Global Corporation & General Developer
  static const int ma_device_state_stopped = 1;

  /// General Library Documentation Undocument By General Corporation & Global Corporation & General Developer
  static const int ma_device_state_started = 2;

  /// General Library Documentation Undocument By General Corporation & Global Corporation & General Developer
  static const int ma_device_state_starting = 3;

  /// General Library Documentation Undocument By General Corporation & Global Corporation & General Developer
  static const int ma_device_state_stopping = 4;
}

/// General Library Documentation Undocument By General Corporation & Global Corporation & General Developer
typedef ma_device_data_proc
    = ffi.Pointer<ffi.NativeFunction<ma_device_data_procFunction>>;

/// General Library Documentation Undocument By General Corporation & Global Corporation & General Developer
typedef ma_device_data_procFunction = ffi.Void Function(
    ffi.Pointer<ma_device> pDevice,
    ffi.Pointer<ffi.Void> pOutput,
    ffi.Pointer<ffi.Void> pInput,
    ma_uint32 frameCount);

/// General Library Documentation Undocument By General Corporation & Global Corporation & General Developer
typedef Dartma_device_data_procFunction = void Function(
    ffi.Pointer<ma_device> pDevice,
    ffi.Pointer<ffi.Void> pOutput,
    ffi.Pointer<ffi.Void> pInput,
    Dartma_uint32 frameCount);

/// General Library Documentation Undocument By General Corporation & Global Corporation & General Developer
typedef ma_device_notification_proc
    = ffi.Pointer<ffi.NativeFunction<ma_device_notification_procFunction>>;

/// General Library Documentation Undocument By General Corporation & Global Corporation & General Developer
typedef ma_device_notification_procFunction = ffi.Void Function(
    ffi.Pointer<ma_device_notification> pNotification);

/// General Library Documentation Undocument By General Corporation & Global Corporation & General Developer
typedef Dartma_device_notification_procFunction = void Function(
    ffi.Pointer<ma_device_notification> pNotification);

/// General Library Documentation Undocument By General Corporation & Global Corporation & General Developer
final class ma_device_notification extends ffi.Struct {
  /// General Library Documentation Undocument By General Corporation & Global Corporation & General Developer
  external ffi.Pointer<ma_device> pDevice;

  @ffi.Int32()

  /// General Library Documentation Undocument By General Corporation & Global Corporation & General Developer
  external int type;

  /// General Library Documentation Undocument By General Corporation & Global Corporation & General Developer
  external UnnamedUnion2 data;
}

/// General Library Documentation Undocument By General Corporation & Global Corporation & General Developer
abstract class ma_device_notification_type {
  /// General Library Documentation Undocument By General Corporation & Global Corporation & General Developer
  static const int ma_device_notification_type_started = 0;

  /// General Library Documentation Undocument By General Corporation & Global Corporation & General Developer
  static const int ma_device_notification_type_stopped = 1;

  /// General Library Documentation Undocument By General Corporation & Global Corporation & General Developer
  static const int ma_device_notification_type_rerouted = 2;

  /// General Library Documentation Undocument By General Corporation & Global Corporation & General Developer
  static const int ma_device_notification_type_interruption_began = 3;

  /// General Library Documentation Undocument By General Corporation & Global Corporation & General Developer
  static const int ma_device_notification_type_interruption_ended = 4;

  /// General Library Documentation Undocument By General Corporation & Global Corporation & General Developer
  static const int ma_device_notification_type_unlocked = 5;
}

/// General Library Documentation Undocument By General Corporation & Global Corporation & General Developer
final class UnnamedUnion2 extends ffi.Union {
  /// General Library Documentation Undocument By General Corporation & Global Corporation & General Developer
  external UnnamedStruct6 started;

  /// General Library Documentation Undocument By General Corporation & Global Corporation & General Developer
  external UnnamedStruct7 stopped;

  /// General Library Documentation Undocument By General Corporation & Global Corporation & General Developer
  external UnnamedStruct8 rerouted;

  /// General Library Documentation Undocument By General Corporation & Global Corporation & General Developer
  external UnnamedStruct9 interruption;
}

/// General Library Documentation Undocument By General Corporation & Global Corporation & General Developer
final class UnnamedStruct6 extends ffi.Struct {
  @ffi.Int()

  /// General Library Documentation Undocument By General Corporation & Global Corporation & General Developer
  external int unused;
}

/// General Library Documentation Undocument By General Corporation & Global Corporation & General Developer
final class UnnamedStruct7 extends ffi.Struct {
  @ffi.Int()

  /// General Library Documentation Undocument By General Corporation & Global Corporation & General Developer
  external int unused;
}

/// General Library Documentation Undocument By General Corporation & Global Corporation & General Developer
final class UnnamedStruct8 extends ffi.Struct {
  @ffi.Int()

  /// General Library Documentation Undocument By General Corporation & Global Corporation & General Developer
  external int unused;
}

/// General Library Documentation Undocument By General Corporation & Global Corporation & General Developer
final class UnnamedStruct9 extends ffi.Struct {
  @ffi.Int()

  /// General Library Documentation Undocument By General Corporation & Global Corporation & General Developer
  external int unused;
}

/// General Library Documentation Undocument By General Corporation & Global Corporation & General Developer
typedef ma_stop_proc = ffi.Pointer<ffi.NativeFunction<ma_stop_procFunction>>;

/// General Library Documentation Undocument By General Corporation & Global Corporation & General Developer
typedef ma_stop_procFunction = ffi.Void Function(
    ffi.Pointer<ma_device> pDevice);

/// General Library Documentation Undocument By General Corporation & Global Corporation & General Developer
typedef Dartma_stop_procFunction = void Function(
    ffi.Pointer<ma_device> pDevice);

/// General Library Documentation Undocument By General Corporation & Global Corporation & General Developer
final class ma_event extends ffi.Struct {
  @ma_uint32()

  /// General Library Documentation Undocument By General Corporation & Global Corporation & General Developer
  external int value;

  /// General Library Documentation Undocument By General Corporation & Global Corporation & General Developer
  external ma_pthread_mutex_t lock;

  /// General Library Documentation Undocument By General Corporation & Global Corporation & General Developer
  external ma_pthread_cond_t cond;
}

/// General Library Documentation Undocument By General Corporation & Global Corporation & General Developer
typedef ma_pthread_cond_t = pthread_cond_t;

/// General Library Documentation Undocument By General Corporation & Global Corporation & General Developer
final class pthread_cond_t extends ffi.Union {
  external __pthread_cond_s _data;

  @ffi.Array.multi([48])
  external ffi.Array<ffi.Char> _size;

  @ffi.LongLong()
  external int _align;
}

final class __pthread_cond_s extends ffi.Struct {
  external __atomic_wide_counter _wseq;

  external __atomic_wide_counter _g1_start;

  @ffi.Array.multi([2])
  external ffi.Array<ffi.UnsignedInt> _g_refs;

  @ffi.Array.multi([2])
  external ffi.Array<ffi.UnsignedInt> _g_size;

  @ffi.UnsignedInt()
  external int _g1_orig_size;

  @ffi.UnsignedInt()
  external int _wrefs;

  @ffi.Array.multi([2])
  external ffi.Array<ffi.UnsignedInt> _g_signals;
}

final class __atomic_wide_counter extends ffi.Union {
  @ffi.UnsignedLongLong()
  external int _value64;

  external UnnamedStruct10 _value32;
}

/// General Library Documentation Undocument By General Corporation & Global Corporation & General Developer
final class UnnamedStruct10 extends ffi.Struct {
  @ffi.UnsignedInt()
  external int _low;

  @ffi.UnsignedInt()
  external int _high;
}

/// General Library Documentation Undocument By General Corporation & Global Corporation & General Developer
typedef ma_thread = ma_pthread_t;

/// General Library Documentation Undocument By General Corporation & Global Corporation & General Developer
typedef ma_pthread_t = pthread_t;

/// General Library Documentation Undocument By General Corporation & Global Corporation & General Developer
typedef pthread_t = ffi.UnsignedLong;

/// General Library Documentation Undocument By General Corporation & Global Corporation & General Developer
typedef Dartpthread_t = int;

/// General Library Documentation Undocument By General Corporation & Global Corporation & General Developer
typedef ma_bool8 = ma_uint8;

/// General Library Documentation Undocument By General Corporation & Global Corporation & General Developer
final class ma_atomic_float extends ffi.Struct {
  @ma_float()

  /// General Library Documentation Undocument By General Corporation & Global Corporation & General Developer
  external double value;
}

/// General Library Documentation Undocument By General Corporation & Global Corporation & General Developer
typedef ma_float = ffi.Float;

/// General Library Documentation Undocument By General Corporation & Global Corporation & General Developer
typedef Dartma_float = double;

/// General Library Documentation Undocument By General Corporation & Global Corporation & General Developer
final class ma_duplex_rb extends ffi.Struct {
  /// General Library Documentation Undocument By General Corporation & Global Corporation & General Developer
  external ma_pcm_rb rb;
}

/// General Library Documentation Undocument By General Corporation & Global Corporation & General Developer
final class ma_pcm_rb extends ffi.Struct {
  /// General Library Documentation Undocument By General Corporation & Global Corporation & General Developer
  external ma_data_source_base ds;

  /// General Library Documentation Undocument By General Corporation & Global Corporation & General Developer
  external ma_rb rb;

  @ffi.Int32()

  /// General Library Documentation Undocument By General Corporation & Global Corporation & General Developer
  external int format;

  @ma_uint32()

  /// General Library Documentation Undocument By General Corporation & Global Corporation & General Developer
  external int channels;

  @ma_uint32()

  /// General Library Documentation Undocument By General Corporation & Global Corporation & General Developer
  external int sampleRate;
}

/// General Library Documentation Undocument By General Corporation & Global Corporation & General Developer
final class ma_data_source_base extends ffi.Struct {
  /// General Library Documentation Undocument By General Corporation & Global Corporation & General Developer
  external ffi.Pointer<ma_data_source_vtable> vtable;

  @ma_uint64()

  /// General Library Documentation Undocument By General Corporation & Global Corporation & General Developer
  external int rangeBegInFrames;

  @ma_uint64()

  /// General Library Documentation Undocument By General Corporation & Global Corporation & General Developer
  external int rangeEndInFrames;

  @ma_uint64()

  /// General Library Documentation Undocument By General Corporation & Global Corporation & General Developer
  external int loopBegInFrames;

  @ma_uint64()

  /// General Library Documentation Undocument By General Corporation & Global Corporation & General Developer
  external int loopEndInFrames;

  /// General Library Documentation Undocument By General Corporation & Global Corporation & General Developer
  external ffi.Pointer<ma_data_source> pCurrent;

  /// General Library Documentation Undocument By General Corporation & Global Corporation & General Developer
  external ffi.Pointer<ma_data_source> pNext;

  /// General Library Documentation Undocument By General Corporation & Global Corporation & General Developer
  external ma_data_source_get_next_proc onGetNext;

  @ma_bool32()

  /// General Library Documentation Undocument By General Corporation & Global Corporation & General Developer
  external int isLooping;
}

/// General Library Documentation Undocument By General Corporation & Global Corporation & General Developer
final class ma_data_source_vtable extends ffi.Struct {
  /// General Library Documentation Undocument By General Corporation & Global Corporation & General Developer
  external ffi.Pointer<
      ffi.NativeFunction<
          ffi.Int32 Function(
              ffi.Pointer<ma_data_source> pDataSource,
              ffi.Pointer<ffi.Void> pFramesOut,
              ma_uint64 frameCount,
              ffi.Pointer<ma_uint64> pFramesRead)>> onRead;

  /// General Library Documentation Undocument By General Corporation & Global Corporation & General Developer
  external ffi.Pointer<
      ffi.NativeFunction<
          ffi.Int32 Function(ffi.Pointer<ma_data_source> pDataSource,
              ma_uint64 frameIndex)>> onSeek;

  /// General Library Documentation Undocument By General Corporation & Global Corporation & General Developer
  external ffi.Pointer<
      ffi.NativeFunction<
          ffi.Int32 Function(
              ffi.Pointer<ma_data_source> pDataSource,
              ffi.Pointer<ffi.Int32> pFormat,
              ffi.Pointer<ma_uint32> pChannels,
              ffi.Pointer<ma_uint32> pSampleRate,
              ffi.Pointer<ma_channel> pChannelMap,
              ffi.Size channelMapCap)>> onGetDataFormat;

  /// General Library Documentation Undocument By General Corporation & Global Corporation & General Developer
  external ffi.Pointer<
      ffi.NativeFunction<
          ffi.Int32 Function(ffi.Pointer<ma_data_source> pDataSource,
              ffi.Pointer<ma_uint64> pCursor)>> onGetCursor;

  /// General Library Documentation Undocument By General Corporation & Global Corporation & General Developer
  external ffi.Pointer<
      ffi.NativeFunction<
          ffi.Int32 Function(ffi.Pointer<ma_data_source> pDataSource,
              ffi.Pointer<ma_uint64> pLength)>> onGetLength;

  /// General Library Documentation Undocument By General Corporation & Global Corporation & General Developer
  external ffi.Pointer<
      ffi.NativeFunction<
          ffi.Int32 Function(ffi.Pointer<ma_data_source> pDataSource,
              ma_bool32 isLooping)>> onSetLooping;

  @ma_uint32()

  /// General Library Documentation Undocument By General Corporation & Global Corporation & General Developer
  external int flags;
}

/// Data Source
typedef ma_data_source = ffi.Void;

/// General Library Documentation Undocument By General Corporation & Global Corporation & General Developer
typedef Dartma_data_source = void;

/// General Library Documentation Undocument By General Corporation & Global Corporation & General Developer
typedef ma_uint64 = ffi.UnsignedLongLong;

/// General Library Documentation Undocument By General Corporation & Global Corporation & General Developer
typedef Dartma_uint64 = int;

/// General Library Documentation Undocument By General Corporation & Global Corporation & General Developer
typedef ma_channel = ma_uint8;

/// General Library Documentation Undocument By General Corporation & Global Corporation & General Developer
typedef ma_data_source_get_next_proc
    = ffi.Pointer<ffi.NativeFunction<ma_data_source_get_next_procFunction>>;

/// General Library Documentation Undocument By General Corporation & Global Corporation & General Developer
typedef ma_data_source_get_next_procFunction = ffi.Pointer<ma_data_source>
    Function(ffi.Pointer<ma_data_source> pDataSource);

/// Ring Buffer
final class ma_rb extends ffi.Struct {
  /// General Library Documentation Undocument By General Corporation & Global Corporation & General Developer
  external ffi.Pointer<ffi.Void> pBuffer;

  @ma_uint32()

  /// General Library Documentation Undocument By General Corporation & Global Corporation & General Developer
  external int subbufferSizeInBytes;

  @ma_uint32()

  /// General Library Documentation Undocument By General Corporation & Global Corporation & General Developer
  external int subbufferCount;

  @ma_uint32()

  /// General Library Documentation Undocument By General Corporation & Global Corporation & General Developer
  external int subbufferStrideInBytes;

  @ma_uint32()

  /// General Library Documentation Undocument By General Corporation & Global Corporation & General Developer
  external int encodedReadOffset;

  @ma_uint32()

  /// General Library Documentation Undocument By General Corporation & Global Corporation & General Developer
  external int encodedWriteOffset;

  @ma_bool8()

  /// General Library Documentation Undocument By General Corporation & Global Corporation & General Developer
  external int ownsBuffer;

  @ma_bool8()

  /// General Library Documentation Undocument By General Corporation & Global Corporation & General Developer
  external int clearOnWriteAcquire;

  /// General Library Documentation Undocument By General Corporation & Global Corporation & General Developer
  external ma_allocation_callbacks allocationCallbacks;
}

/// General Library Documentation Undocument By General Corporation & Global Corporation & General Developer
final class UnnamedStruct11 extends ffi.Struct {
  @ffi.Int32()

  /// General Library Documentation Undocument By General Corporation & Global Corporation & General Developer
  external int algorithm;

  /// General Library Documentation Undocument By General Corporation & Global Corporation & General Developer
  external ffi.Pointer<ma_resampling_backend_vtable> pBackendVTable;

  /// General Library Documentation Undocument By General Corporation & Global Corporation & General Developer
  external ffi.Pointer<ffi.Void> pBackendUserData;

  /// General Library Documentation Undocument By General Corporation & Global Corporation & General Developer
  external UnnamedStruct13 linear;
}

/// General Library Documentation Undocument By General Corporation & Global Corporation & General Developer
abstract class ma_resample_algorithm {
  /// General Library Documentation Undocument By General Corporation & Global Corporation & General Developer
  static const int ma_resample_algorithm_linear = 0;

  /// General Library Documentation Undocument By General Corporation & Global Corporation & General Developer
  static const int ma_resample_algorithm_custom = 1;
}

/// General Library Documentation Undocument By General Corporation & Global Corporation & General Developer
final class ma_resampling_backend_vtable extends ffi.Struct {
  /// General Library Documentation Undocument By General Corporation & Global Corporation & General Developer
  external ffi.Pointer<
      ffi.NativeFunction<
          ffi.Int32 Function(
              ffi.Pointer<ffi.Void> pUserData,
              ffi.Pointer<ma_resampler_config> pConfig,
              ffi.Pointer<ffi.Size> pHeapSizeInBytes)>> onGetHeapSize;

  /// General Library Documentation Undocument By General Corporation & Global Corporation & General Developer
  external ffi.Pointer<
          ffi.NativeFunction<
              ffi.Int32 Function(
                  ffi.Pointer<ffi.Void> pUserData,
                  ffi.Pointer<ma_resampler_config> pConfig,
                  ffi.Pointer<ffi.Void> pHeap,
                  ffi.Pointer<ffi.Pointer<ma_resampling_backend>> ppBackend)>>
      onInit;

  /// General Library Documentation Undocument By General Corporation & Global Corporation & General Developer
  external ffi.Pointer<
          ffi.NativeFunction<
              ffi.Void Function(
                  ffi.Pointer<ffi.Void> pUserData,
                  ffi.Pointer<ma_resampling_backend> pBackend,
                  ffi.Pointer<ma_allocation_callbacks> pAllocationCallbacks)>>
      onUninit;

  /// General Library Documentation Undocument By General Corporation & Global Corporation & General Developer
  external ffi.Pointer<
      ffi.NativeFunction<
          ffi.Int32 Function(
              ffi.Pointer<ffi.Void> pUserData,
              ffi.Pointer<ma_resampling_backend> pBackend,
              ffi.Pointer<ffi.Void> pFramesIn,
              ffi.Pointer<ma_uint64> pFrameCountIn,
              ffi.Pointer<ffi.Void> pFramesOut,
              ffi.Pointer<ma_uint64> pFrameCountOut)>> onProcess;

  /// General Library Documentation Undocument By General Corporation & Global Corporation & General Developer
  external ffi.Pointer<
      ffi.NativeFunction<
          ffi.Int32 Function(
              ffi.Pointer<ffi.Void> pUserData,
              ffi.Pointer<ma_resampling_backend> pBackend,
              ma_uint32 sampleRateIn,
              ma_uint32 sampleRateOut)>> onSetRate;

  /// General Library Documentation Undocument By General Corporation & Global Corporation & General Developer
  external ffi.Pointer<
      ffi.NativeFunction<
          ma_uint64 Function(ffi.Pointer<ffi.Void> pUserData,
              ffi.Pointer<ma_resampling_backend> pBackend)>> onGetInputLatency;

  /// General Library Documentation Undocument By General Corporation & Global Corporation & General Developer
  external ffi.Pointer<
      ffi.NativeFunction<
          ma_uint64 Function(ffi.Pointer<ffi.Void> pUserData,
              ffi.Pointer<ma_resampling_backend> pBackend)>> onGetOutputLatency;

  /// General Library Documentation Undocument By General Corporation & Global Corporation & General Developer
  external ffi.Pointer<
          ffi.NativeFunction<
              ffi.Int32 Function(
                  ffi.Pointer<ffi.Void> pUserData,
                  ffi.Pointer<ma_resampling_backend> pBackend,
                  ma_uint64 outputFrameCount,
                  ffi.Pointer<ma_uint64> pInputFrameCount)>>
      onGetRequiredInputFrameCount;

  /// General Library Documentation Undocument By General Corporation & Global Corporation & General Developer
  external ffi.Pointer<
          ffi.NativeFunction<
              ffi.Int32 Function(
                  ffi.Pointer<ffi.Void> pUserData,
                  ffi.Pointer<ma_resampling_backend> pBackend,
                  ma_uint64 inputFrameCount,
                  ffi.Pointer<ma_uint64> pOutputFrameCount)>>
      onGetExpectedOutputFrameCount;

  /// General Library Documentation Undocument By General Corporation & Global Corporation & General Developer
  external ffi.Pointer<
      ffi.NativeFunction<
          ffi.Int32 Function(ffi.Pointer<ffi.Void> pUserData,
              ffi.Pointer<ma_resampling_backend> pBackend)>> onReset;
}

/// General Library Documentation Undocument By General Corporation & Global Corporation & General Developer
final class ma_resampler_config extends ffi.Struct {
  @ffi.Int32()

  /// General Library Documentation Undocument By General Corporation & Global Corporation & General Developer
  external int format;

  @ma_uint32()

  /// General Library Documentation Undocument By General Corporation & Global Corporation & General Developer
  external int channels;

  @ma_uint32()

  /// General Library Documentation Undocument By General Corporation & Global Corporation & General Developer
  external int sampleRateIn;

  @ma_uint32()

  /// General Library Documentation Undocument By General Corporation & Global Corporation & General Developer
  external int sampleRateOut;

  @ffi.Int32()

  /// General Library Documentation Undocument By General Corporation & Global Corporation & General Developer
  external int algorithm;

  /// General Library Documentation Undocument By General Corporation & Global Corporation & General Developer
  external ffi.Pointer<ma_resampling_backend_vtable> pBackendVTable;

  /// General Library Documentation Undocument By General Corporation & Global Corporation & General Developer
  external ffi.Pointer<ffi.Void> pBackendUserData;

  /// General Library Documentation Undocument By General Corporation & Global Corporation & General Developer
  external UnnamedStruct12 linear;
}

/// General Library Documentation Undocument By General Corporation & Global Corporation & General Developer
final class UnnamedStruct12 extends ffi.Struct {
  @ma_uint32()

  /// General Library Documentation Undocument By General Corporation & Global Corporation & General Developer
  external int lpfOrder;
}

/// General Library Documentation Undocument By General Corporation & Global Corporation & General Developer
typedef ma_resampling_backend = ffi.Void;

/// General Library Documentation Undocument By General Corporation & Global Corporation & General Developer
typedef Dartma_resampling_backend = void;

/// General Library Documentation Undocument By General Corporation & Global Corporation & General Developer
final class UnnamedStruct13 extends ffi.Struct {
  @ma_uint32()

  /// General Library Documentation Undocument By General Corporation & Global Corporation & General Developer
  external int lpfOrder;
}

/// General Library Documentation Undocument By General Corporation & Global Corporation & General Developer
final class UnnamedStruct14 extends ffi.Struct {
  /// General Library Documentation Undocument By General Corporation & Global Corporation & General Developer
  external ffi.Pointer<ma_device_id> pID;

  /// General Library Documentation Undocument By General Corporation & Global Corporation & General Developer
  external ma_device_id id;

  @ffi.Array.multi([256])

  /// General Library Documentation Undocument By General Corporation & Global Corporation & General Developer
  external ffi.Array<ffi.Char> name;

  @ffi.Int32()

  /// General Library Documentation Undocument By General Corporation & Global Corporation & General Developer
  external int shareMode;

  @ffi.Int32()

  /// General Library Documentation Undocument By General Corporation & Global Corporation & General Developer
  external int format;

  @ma_uint32()

  /// General Library Documentation Undocument By General Corporation & Global Corporation & General Developer
  external int channels;

  @ffi.Array.multi([254])

  /// General Library Documentation Undocument By General Corporation & Global Corporation & General Developer
  external ffi.Array<ma_channel> channelMap;

  @ffi.Int32()

  /// General Library Documentation Undocument By General Corporation & Global Corporation & General Developer
  external int internalFormat;

  @ma_uint32()

  /// General Library Documentation Undocument By General Corporation & Global Corporation & General Developer
  external int internalChannels;

  @ma_uint32()

  /// General Library Documentation Undocument By General Corporation & Global Corporation & General Developer
  external int internalSampleRate;

  @ffi.Array.multi([254])

  /// General Library Documentation Undocument By General Corporation & Global Corporation & General Developer
  external ffi.Array<ma_channel> internalChannelMap;

  @ma_uint32()

  /// General Library Documentation Undocument By General Corporation & Global Corporation & General Developer
  external int internalPeriodSizeInFrames;

  @ma_uint32()

  /// General Library Documentation Undocument By General Corporation & Global Corporation & General Developer
  external int internalPeriods;

  @ffi.Int32()

  /// General Library Documentation Undocument By General Corporation & Global Corporation & General Developer
  external int channelMixMode;

  @ma_bool32()

  /// General Library Documentation Undocument By General Corporation & Global Corporation & General Developer
  external int calculateLFEFromSpatialChannels;

  /// General Library Documentation Undocument By General Corporation & Global Corporation & General Developer
  external ma_data_converter converter;

  /// General Library Documentation Undocument By General Corporation & Global Corporation & General Developer
  external ffi.Pointer<ffi.Void> pIntermediaryBuffer;

  @ma_uint32()

  /// General Library Documentation Undocument By General Corporation & Global Corporation & General Developer
  external int intermediaryBufferCap;

  @ma_uint32()

  /// General Library Documentation Undocument By General Corporation & Global Corporation & General Developer
  external int intermediaryBufferLen;

  /// General Library Documentation Undocument By General Corporation & Global Corporation & General Developer
  external ffi.Pointer<ffi.Void> pInputCache;

  @ma_uint64()

  /// General Library Documentation Undocument By General Corporation & Global Corporation & General Developer
  external int inputCacheCap;

  @ma_uint64()

  /// General Library Documentation Undocument By General Corporation & Global Corporation & General Developer
  external int inputCacheConsumed;

  @ma_uint64()

  /// General Library Documentation Undocument By General Corporation & Global Corporation & General Developer
  external int inputCacheRemaining;
}

/// General Library Documentation Undocument By General Corporation & Global Corporation & General Developer
abstract class ma_share_mode {
  /// General Library Documentation Undocument By General Corporation & Global Corporation & General Developer
  static const int ma_share_mode_shared = 0;

  /// General Library Documentation Undocument By General Corporation & Global Corporation & General Developer
  static const int ma_share_mode_exclusive = 1;
}

/// General Library Documentation Undocument By General Corporation & Global Corporation & General Developer
abstract class ma_channel_mix_mode {
  /// General Library Documentation Undocument By General Corporation & Global Corporation & General Developer
  static const int ma_channel_mix_mode_rectangular = 0;

  /// General Library Documentation Undocument By General Corporation & Global Corporation & General Developer
  static const int ma_channel_mix_mode_simple = 1;

  /// General Library Documentation Undocument By General Corporation & Global Corporation & General Developer
  static const int ma_channel_mix_mode_custom_weights = 2;

  /// General Library Documentation Undocument By General Corporation & Global Corporation & General Developer
  static const int ma_channel_mix_mode_default = 0;
}

/// General Library Documentation Undocument By General Corporation & Global Corporation & General Developer
final class ma_data_converter extends ffi.Struct {
  @ffi.Int32()

  /// General Library Documentation Undocument By General Corporation & Global Corporation & General Developer
  external int formatIn;

  @ffi.Int32()

  /// General Library Documentation Undocument By General Corporation & Global Corporation & General Developer
  external int formatOut;

  @ma_uint32()

  /// General Library Documentation Undocument By General Corporation & Global Corporation & General Developer
  external int channelsIn;

  @ma_uint32()

  /// General Library Documentation Undocument By General Corporation & Global Corporation & General Developer
  external int channelsOut;

  @ma_uint32()

  /// General Library Documentation Undocument By General Corporation & Global Corporation & General Developer
  external int sampleRateIn;

  @ma_uint32()

  /// General Library Documentation Undocument By General Corporation & Global Corporation & General Developer
  external int sampleRateOut;

  @ffi.Int32()

  /// General Library Documentation Undocument By General Corporation & Global Corporation & General Developer
  external int ditherMode;

  @ffi.Int32()

  /// General Library Documentation Undocument By General Corporation & Global Corporation & General Developer
  external int executionPath;

  /// General Library Documentation Undocument By General Corporation & Global Corporation & General Developer
  external ma_channel_converter channelConverter;

  /// General Library Documentation Undocument By General Corporation & Global Corporation & General Developer
  external ma_resampler resampler;

  @ma_bool8()

  /// General Library Documentation Undocument By General Corporation & Global Corporation & General Developer
  external int hasPreFormatConversion;

  @ma_bool8()

  /// General Library Documentation Undocument By General Corporation & Global Corporation & General Developer
  external int hasPostFormatConversion;

  @ma_bool8()

  /// General Library Documentation Undocument By General Corporation & Global Corporation & General Developer
  external int hasChannelConverter;

  @ma_bool8()

  /// General Library Documentation Undocument By General Corporation & Global Corporation & General Developer
  external int hasResampler;

  @ma_bool8()

  /// General Library Documentation Undocument By General Corporation & Global Corporation & General Developer
  external int isPassthrough;

  @ma_bool8()

  /// General Library Documentation Undocument By General Corporation & Global Corporation & General Developer
  external int ownsHeap;

  /// General Library Documentation Undocument By General Corporation & Global Corporation & General Developer
  external ffi.Pointer<ffi.Void> pHeap;
}

/// General Library Documentation Undocument By General Corporation & Global Corporation & General Developer
abstract class ma_dither_mode {
  /// General Library Documentation Undocument By General Corporation & Global Corporation & General Developer
  static const int ma_dither_mode_none = 0;

  /// General Library Documentation Undocument By General Corporation & Global Corporation & General Developer
  static const int ma_dither_mode_rectangle = 1;

  /// General Library Documentation Undocument By General Corporation & Global Corporation & General Developer
  static const int ma_dither_mode_triangle = 2;
}

/// General Library Documentation Undocument By General Corporation & Global Corporation & General Developer
abstract class ma_data_converter_execution_path {
  /// General Library Documentation Undocument By General Corporation & Global Corporation & General Developer
  static const int ma_data_converter_execution_path_passthrough = 0;

  /// General Library Documentation Undocument By General Corporation & Global Corporation & General Developer
  static const int ma_data_converter_execution_path_format_only = 1;

  /// General Library Documentation Undocument By General Corporation & Global Corporation & General Developer
  static const int ma_data_converter_execution_path_channels_only = 2;

  /// General Library Documentation Undocument By General Corporation & Global Corporation & General Developer
  static const int ma_data_converter_execution_path_resample_only = 3;

  /// General Library Documentation Undocument By General Corporation & Global Corporation & General Developer
  static const int ma_data_converter_execution_path_resample_first = 4;

  /// General Library Documentation Undocument By General Corporation & Global Corporation & General Developer
  static const int ma_data_converter_execution_path_channels_first = 5;
}

/// General Library Documentation Undocument By General Corporation & Global Corporation & General Developer
final class ma_channel_converter extends ffi.Struct {
  @ffi.Int32()

  /// General Library Documentation Undocument By General Corporation & Global Corporation & General Developer
  external int format;

  @ma_uint32()

  /// General Library Documentation Undocument By General Corporation & Global Corporation & General Developer
  external int channelsIn;

  @ma_uint32()

  /// General Library Documentation Undocument By General Corporation & Global Corporation & General Developer
  external int channelsOut;

  @ffi.Int32()

  /// General Library Documentation Undocument By General Corporation & Global Corporation & General Developer
  external int mixingMode;

  @ffi.Int32()

  /// General Library Documentation Undocument By General Corporation & Global Corporation & General Developer
  external int conversionPath;

  /// General Library Documentation Undocument By General Corporation & Global Corporation & General Developer
  external ffi.Pointer<ma_channel> pChannelMapIn;

  /// General Library Documentation Undocument By General Corporation & Global Corporation & General Developer
  external ffi.Pointer<ma_channel> pChannelMapOut;

  /// General Library Documentation Undocument By General Corporation & Global Corporation & General Developer
  external ffi.Pointer<ma_uint8> pShuffleTable;

  /// General Library Documentation Undocument By General Corporation & Global Corporation & General Developer
  external UnnamedUnion3 weights;

  /// General Library Documentation Undocument By General Corporation & Global Corporation & General Developer
  external ffi.Pointer<ffi.Void> pHeap;

  @ma_bool32()

  /// General Library Documentation Undocument By General Corporation & Global Corporation & General Developer
  external int ownsHeap;
}

/// Channel Conversion
abstract class ma_channel_conversion_path {
  /// General Library Documentation Undocument By General Corporation & Global Corporation & General Developer
  static const int ma_channel_conversion_path_unknown = 0;

  /// General Library Documentation Undocument By General Corporation & Global Corporation & General Developer
  static const int ma_channel_conversion_path_passthrough = 1;

  /// General Library Documentation Undocument By General Corporation & Global Corporation & General Developer
  static const int ma_channel_conversion_path_mono_out = 2;

  /// General Library Documentation Undocument By General Corporation & Global Corporation & General Developer
  static const int ma_channel_conversion_path_mono_in = 3;

  /// General Library Documentation Undocument By General Corporation & Global Corporation & General Developer
  static const int ma_channel_conversion_path_shuffle = 4;

  /// General Library Documentation Undocument By General Corporation & Global Corporation & General Developer
  static const int ma_channel_conversion_path_weights = 5;
}

/// General Library Documentation Undocument By General Corporation & Global Corporation & General Developer
final class UnnamedUnion3 extends ffi.Union {
  /// General Library Documentation Undocument By General Corporation & Global Corporation & General Developer
  external ffi.Pointer<ffi.Pointer<ffi.Float>> f32;

  /// General Library Documentation Undocument By General Corporation & Global Corporation & General Developer
  external ffi.Pointer<ffi.Pointer<ma_int32>> s16;
}

/// General Library Documentation Undocument By General Corporation & Global Corporation & General Developer
final class ma_resampler extends ffi.Struct {
  /// General Library Documentation Undocument By General Corporation & Global Corporation & General Developer
  external ffi.Pointer<ma_resampling_backend> pBackend;

  /// General Library Documentation Undocument By General Corporation & Global Corporation & General Developer
  external ffi.Pointer<ma_resampling_backend_vtable> pBackendVTable;

  /// General Library Documentation Undocument By General Corporation & Global Corporation & General Developer
  external ffi.Pointer<ffi.Void> pBackendUserData;

  @ffi.Int32()

  /// General Library Documentation Undocument By General Corporation & Global Corporation & General Developer
  external int format;

  @ma_uint32()

  /// General Library Documentation Undocument By General Corporation & Global Corporation & General Developer
  external int channels;

  @ma_uint32()

  /// General Library Documentation Undocument By General Corporation & Global Corporation & General Developer
  external int sampleRateIn;

  @ma_uint32()

  /// General Library Documentation Undocument By General Corporation & Global Corporation & General Developer
  external int sampleRateOut;

  /// General Library Documentation Undocument By General Corporation & Global Corporation & General Developer
  external UnnamedUnion4 state;

  /// General Library Documentation Undocument By General Corporation & Global Corporation & General Developer
  external ffi.Pointer<ffi.Void> pHeap;

  @ma_bool32()

  /// General Library Documentation Undocument By General Corporation & Global Corporation & General Developer
  external int ownsHeap;
}

/// General Library Documentation Undocument By General Corporation & Global Corporation & General Developer
final class UnnamedUnion4 extends ffi.Union {
  /// General Library Documentation Undocument By General Corporation & Global Corporation & General Developer
  external ma_linear_resampler linear;
}

/// General Library Documentation Undocument By General Corporation & Global Corporation & General Developer
final class ma_linear_resampler extends ffi.Struct {
  /// General Library Documentation Undocument By General Corporation & Global Corporation & General Developer
  external ma_linear_resampler_config config;

  @ma_uint32()

  /// General Library Documentation Undocument By General Corporation & Global Corporation & General Developer
  external int inAdvanceInt;

  @ma_uint32()

  /// General Library Documentation Undocument By General Corporation & Global Corporation & General Developer
  external int inAdvanceFrac;

  @ma_uint32()

  /// General Library Documentation Undocument By General Corporation & Global Corporation & General Developer
  external int inTimeInt;

  @ma_uint32()

  /// General Library Documentation Undocument By General Corporation & Global Corporation & General Developer
  external int inTimeFrac;

  /// General Library Documentation Undocument By General Corporation & Global Corporation & General Developer
  external UnnamedUnion5 x0;

  /// General Library Documentation Undocument By General Corporation & Global Corporation & General Developer
  external UnnamedUnion6 x1;

  /// General Library Documentation Undocument By General Corporation & Global Corporation & General Developer
  external ma_lpf lpf;

  /// General Library Documentation Undocument By General Corporation & Global Corporation & General Developer
  external ffi.Pointer<ffi.Void> pHeap;

  @ma_bool32()

  /// General Library Documentation Undocument By General Corporation & Global Corporation & General Developer
  external int ownsHeap;
}

/// Resampling
final class ma_linear_resampler_config extends ffi.Struct {
  @ffi.Int32()

  /// General Library Documentation Undocument By General Corporation & Global Corporation & General Developer
  external int format;

  @ma_uint32()

  /// General Library Documentation Undocument By General Corporation & Global Corporation & General Developer
  external int channels;

  @ma_uint32()

  /// General Library Documentation Undocument By General Corporation & Global Corporation & General Developer
  external int sampleRateIn;

  @ma_uint32()

  /// General Library Documentation Undocument By General Corporation & Global Corporation & General Developer
  external int sampleRateOut;

  @ma_uint32()

  /// General Library Documentation Undocument By General Corporation & Global Corporation & General Developer
  external int lpfOrder;

  @ffi.Double()

  /// General Library Documentation Undocument By General Corporation & Global Corporation & General Developer
  external double lpfNyquistFactor;
}

/// General Library Documentation Undocument By General Corporation & Global Corporation & General Developer
final class UnnamedUnion5 extends ffi.Union {
  /// General Library Documentation Undocument By General Corporation & Global Corporation & General Developer
  external ffi.Pointer<ffi.Float> f32;

  /// General Library Documentation Undocument By General Corporation & Global Corporation & General Developer
  external ffi.Pointer<ma_int16> s16;
}

/// General Library Documentation Undocument By General Corporation & Global Corporation & General Developer
typedef ma_int16 = ffi.Short;

/// General Library Documentation Undocument By General Corporation & Global Corporation & General Developer
typedef Dartma_int16 = int;

/// General Library Documentation Undocument By General Corporation & Global Corporation & General Developer
final class UnnamedUnion6 extends ffi.Union {
  /// General Library Documentation Undocument By General Corporation & Global Corporation & General Developer
  external ffi.Pointer<ffi.Float> f32;

  /// General Library Documentation Undocument By General Corporation & Global Corporation & General Developer
  external ffi.Pointer<ma_int16> s16;
}

/// General Library Documentation Undocument By General Corporation & Global Corporation & General Developer
final class ma_lpf extends ffi.Struct {
  @ffi.Int32()

  /// General Library Documentation Undocument By General Corporation & Global Corporation & General Developer
  external int format;

  @ma_uint32()

  /// General Library Documentation Undocument By General Corporation & Global Corporation & General Developer
  external int channels;

  @ma_uint32()

  /// General Library Documentation Undocument By General Corporation & Global Corporation & General Developer
  external int sampleRate;

  @ma_uint32()

  /// General Library Documentation Undocument By General Corporation & Global Corporation & General Developer
  external int lpf1Count;

  @ma_uint32()

  /// General Library Documentation Undocument By General Corporation & Global Corporation & General Developer
  external int lpf2Count;

  /// General Library Documentation Undocument By General Corporation & Global Corporation & General Developer
  external ffi.Pointer<ma_lpf1> pLPF1;

  /// General Library Documentation Undocument By General Corporation & Global Corporation & General Developer
  external ffi.Pointer<ma_lpf2> pLPF2;

  /// General Library Documentation Undocument By General Corporation & Global Corporation & General Developer
  external ffi.Pointer<ffi.Void> pHeap;

  @ma_bool32()

  /// General Library Documentation Undocument By General Corporation & Global Corporation & General Developer
  external int ownsHeap;
}

/// General Library Documentation Undocument By General Corporation & Global Corporation & General Developer
final class ma_lpf1 extends ffi.Struct {
  @ffi.Int32()

  /// General Library Documentation Undocument By General Corporation & Global Corporation & General Developer
  external int format;

  @ma_uint32()

  /// General Library Documentation Undocument By General Corporation & Global Corporation & General Developer
  external int channels;

  /// General Library Documentation Undocument By General Corporation & Global Corporation & General Developer
  external ma_biquad_coefficient a;

  /// General Library Documentation Undocument By General Corporation & Global Corporation & General Developer
  external ffi.Pointer<ma_biquad_coefficient> pR1;

  /// General Library Documentation Undocument By General Corporation & Global Corporation & General Developer
  external ffi.Pointer<ffi.Void> pHeap;

  @ma_bool32()

  /// General Library Documentation Undocument By General Corporation & Global Corporation & General Developer
  external int ownsHeap;
}

/// Biquad Filtering
final class ma_biquad_coefficient extends ffi.Union {
  @ffi.Float()

  /// General Library Documentation Undocument By General Corporation & Global Corporation & General Developer
  external double f32;

  @ma_int32()

  /// General Library Documentation Undocument By General Corporation & Global Corporation & General Developer
  external int s32;
}

/// General Library Documentation Undocument By General Corporation & Global Corporation & General Developer
final class ma_lpf2 extends ffi.Struct {
  /// General Library Documentation Undocument By General Corporation & Global Corporation & General Developer
  external ma_biquad bq;
}

/// General Library Documentation Undocument By General Corporation & Global Corporation & General Developer
final class ma_biquad extends ffi.Struct {
  @ffi.Int32()

  /// General Library Documentation Undocument By General Corporation & Global Corporation & General Developer
  external int format;

  @ma_uint32()

  /// General Library Documentation Undocument By General Corporation & Global Corporation & General Developer
  external int channels;

  /// General Library Documentation Undocument By General Corporation & Global Corporation & General Developer
  external ma_biquad_coefficient b0;

  /// General Library Documentation Undocument By General Corporation & Global Corporation & General Developer
  external ma_biquad_coefficient b1;

  /// General Library Documentation Undocument By General Corporation & Global Corporation & General Developer
  external ma_biquad_coefficient b2;

  /// General Library Documentation Undocument By General Corporation & Global Corporation & General Developer
  external ma_biquad_coefficient a1;

  /// General Library Documentation Undocument By General Corporation & Global Corporation & General Developer
  external ma_biquad_coefficient a2;

  /// General Library Documentation Undocument By General Corporation & Global Corporation & General Developer
  external ffi.Pointer<ma_biquad_coefficient> pR1;

  /// General Library Documentation Undocument By General Corporation & Global Corporation & General Developer
  external ffi.Pointer<ma_biquad_coefficient> pR2;

  /// General Library Documentation Undocument By General Corporation & Global Corporation & General Developer
  external ffi.Pointer<ffi.Void> pHeap;

  @ma_bool32()

  /// General Library Documentation Undocument By General Corporation & Global Corporation & General Developer
  external int ownsHeap;
}

/// General Library Documentation Undocument By General Corporation & Global Corporation & General Developer
final class UnnamedStruct15 extends ffi.Struct {
  /// General Library Documentation Undocument By General Corporation & Global Corporation & General Developer
  external ffi.Pointer<ma_device_id> pID;

  /// General Library Documentation Undocument By General Corporation & Global Corporation & General Developer
  external ma_device_id id;

  @ffi.Array.multi([256])

  /// General Library Documentation Undocument By General Corporation & Global Corporation & General Developer
  external ffi.Array<ffi.Char> name;

  @ffi.Int32()

  /// General Library Documentation Undocument By General Corporation & Global Corporation & General Developer
  external int shareMode;

  @ffi.Int32()

  /// General Library Documentation Undocument By General Corporation & Global Corporation & General Developer
  external int format;

  @ma_uint32()

  /// General Library Documentation Undocument By General Corporation & Global Corporation & General Developer
  external int channels;

  @ffi.Array.multi([254])

  /// General Library Documentation Undocument By General Corporation & Global Corporation & General Developer
  external ffi.Array<ma_channel> channelMap;

  @ffi.Int32()

  /// General Library Documentation Undocument By General Corporation & Global Corporation & General Developer
  external int internalFormat;

  @ma_uint32()

  /// General Library Documentation Undocument By General Corporation & Global Corporation & General Developer
  external int internalChannels;

  @ma_uint32()

  /// General Library Documentation Undocument By General Corporation & Global Corporation & General Developer
  external int internalSampleRate;

  @ffi.Array.multi([254])

  /// General Library Documentation Undocument By General Corporation & Global Corporation & General Developer
  external ffi.Array<ma_channel> internalChannelMap;

  @ma_uint32()

  /// General Library Documentation Undocument By General Corporation & Global Corporation & General Developer
  external int internalPeriodSizeInFrames;

  @ma_uint32()

  /// General Library Documentation Undocument By General Corporation & Global Corporation & General Developer
  external int internalPeriods;

  @ffi.Int32()

  /// General Library Documentation Undocument By General Corporation & Global Corporation & General Developer
  external int channelMixMode;

  @ma_bool32()

  /// General Library Documentation Undocument By General Corporation & Global Corporation & General Developer
  external int calculateLFEFromSpatialChannels;

  /// General Library Documentation Undocument By General Corporation & Global Corporation & General Developer
  external ma_data_converter converter;

  /// General Library Documentation Undocument By General Corporation & Global Corporation & General Developer
  external ffi.Pointer<ffi.Void> pIntermediaryBuffer;

  @ma_uint32()

  /// General Library Documentation Undocument By General Corporation & Global Corporation & General Developer
  external int intermediaryBufferCap;

  @ma_uint32()

  /// General Library Documentation Undocument By General Corporation & Global Corporation & General Developer
  external int intermediaryBufferLen;
}

/// General Library Documentation Undocument By General Corporation & Global Corporation & General Developer
final class UnnamedUnion7 extends ffi.Union {
  /// General Library Documentation Undocument By General Corporation & Global Corporation & General Developer
  external UnnamedStruct16 alsa;

  /// General Library Documentation Undocument By General Corporation & Global Corporation & General Developer
  external UnnamedStruct17 pulse;

  /// General Library Documentation Undocument By General Corporation & Global Corporation & General Developer
  external UnnamedStruct18 jack;

  /// General Library Documentation Undocument By General Corporation & Global Corporation & General Developer
  external UnnamedStruct19 null_device;
}

/// General Library Documentation Undocument By General Corporation & Global Corporation & General Developer
final class UnnamedStruct16 extends ffi.Struct {
  /// General Library Documentation Undocument By General Corporation & Global Corporation & General Developer
  external ma_ptr pPCMPlayback;

  /// General Library Documentation Undocument By General Corporation & Global Corporation & General Developer
  external ma_ptr pPCMCapture;

  /// General Library Documentation Undocument By General Corporation & Global Corporation & General Developer
  external ffi.Pointer<ffi.Void> pPollDescriptorsPlayback;

  /// General Library Documentation Undocument By General Corporation & Global Corporation & General Developer
  external ffi.Pointer<ffi.Void> pPollDescriptorsCapture;

  @ffi.Int()

  /// General Library Documentation Undocument By General Corporation & Global Corporation & General Developer
  external int pollDescriptorCountPlayback;

  @ffi.Int()

  /// General Library Documentation Undocument By General Corporation & Global Corporation & General Developer
  external int pollDescriptorCountCapture;

  @ffi.Int()

  /// General Library Documentation Undocument By General Corporation & Global Corporation & General Developer
  external int wakeupfdPlayback;

  @ffi.Int()

  /// General Library Documentation Undocument By General Corporation & Global Corporation & General Developer
  external int wakeupfdCapture;

  @ma_bool8()

  /// General Library Documentation Undocument By General Corporation & Global Corporation & General Developer
  external int isUsingMMapPlayback;

  @ma_bool8()

  /// General Library Documentation Undocument By General Corporation & Global Corporation & General Developer
  external int isUsingMMapCapture;
}

/// General Library Documentation Undocument By General Corporation & Global Corporation & General Developer
typedef ma_ptr = ffi.Pointer<ffi.Void>;

/// General Library Documentation Undocument By General Corporation & Global Corporation & General Developer
final class UnnamedStruct17 extends ffi.Struct {
  /// General Library Documentation Undocument By General Corporation & Global Corporation & General Developer
  external ma_ptr pMainLoop;

  /// General Library Documentation Undocument By General Corporation & Global Corporation & General Developer
  external ma_ptr pPulseContext;

  /// General Library Documentation Undocument By General Corporation & Global Corporation & General Developer
  external ma_ptr pStreamPlayback;

  /// General Library Documentation Undocument By General Corporation & Global Corporation & General Developer
  external ma_ptr pStreamCapture;
}

/// General Library Documentation Undocument By General Corporation & Global Corporation & General Developer
final class UnnamedStruct18 extends ffi.Struct {
  /// General Library Documentation Undocument By General Corporation & Global Corporation & General Developer
  external ma_ptr pClient;

  /// General Library Documentation Undocument By General Corporation & Global Corporation & General Developer
  external ffi.Pointer<ma_ptr> ppPortsPlayback;

  /// General Library Documentation Undocument By General Corporation & Global Corporation & General Developer
  external ffi.Pointer<ma_ptr> ppPortsCapture;

  /// General Library Documentation Undocument By General Corporation & Global Corporation & General Developer
  external ffi.Pointer<ffi.Float> pIntermediaryBufferPlayback;

  /// General Library Documentation Undocument By General Corporation & Global Corporation & General Developer
  external ffi.Pointer<ffi.Float> pIntermediaryBufferCapture;
}

/// General Library Documentation Undocument By General Corporation & Global Corporation & General Developer
final class UnnamedStruct19 extends ffi.Struct {
  @ma_thread()

  /// General Library Documentation Undocument By General Corporation & Global Corporation & General Developer
  external int deviceThread;

  /// General Library Documentation Undocument By General Corporation & Global Corporation & General Developer
  external ma_event operationEvent;

  /// General Library Documentation Undocument By General Corporation & Global Corporation & General Developer
  external ma_event operationCompletionEvent;

  /// General Library Documentation Undocument By General Corporation & Global Corporation & General Developer
  external ma_semaphore operationSemaphore;

  @ma_uint32()

  /// General Library Documentation Undocument By General Corporation & Global Corporation & General Developer
  external int operation;

  @ffi.Int32()

  /// General Library Documentation Undocument By General Corporation & Global Corporation & General Developer
  external int operationResult;

  /// General Library Documentation Undocument By General Corporation & Global Corporation & General Developer
  external ma_timer timer;

  @ffi.Double()

  /// General Library Documentation Undocument By General Corporation & Global Corporation & General Developer
  external double priorRunTime;

  @ma_uint32()

  /// General Library Documentation Undocument By General Corporation & Global Corporation & General Developer
  external int currentPeriodFramesRemainingPlayback;

  @ma_uint32()

  /// General Library Documentation Undocument By General Corporation & Global Corporation & General Developer
  external int currentPeriodFramesRemainingCapture;

  @ma_uint64()

  /// General Library Documentation Undocument By General Corporation & Global Corporation & General Developer
  external int lastProcessedFramePlayback;

  @ma_uint64()

  /// General Library Documentation Undocument By General Corporation & Global Corporation & General Developer
  external int lastProcessedFrameCapture;

  /// General Library Documentation Undocument By General Corporation & Global Corporation & General Developer
  external ma_atomic_bool32 isStarted;
}

/// General Library Documentation Undocument By General Corporation & Global Corporation & General Developer
final class ma_semaphore extends ffi.Struct {
  @ffi.Int()

  /// General Library Documentation Undocument By General Corporation & Global Corporation & General Developer
  external int value;

  /// General Library Documentation Undocument By General Corporation & Global Corporation & General Developer
  external ma_pthread_mutex_t lock;

  /// General Library Documentation Undocument By General Corporation & Global Corporation & General Developer
  external ma_pthread_cond_t cond;
}

/// General Library Documentation Undocument By General Corporation & Global Corporation & General Developer
final class ma_timer extends ffi.Union {
  @ma_int64()

  /// General Library Documentation Undocument By General Corporation & Global Corporation & General Developer
  external int counter;

  @ffi.Double()

  /// General Library Documentation Undocument By General Corporation & Global Corporation & General Developer
  external double counterD;
}

/// General Library Documentation Undocument By General Corporation & Global Corporation & General Developer
typedef ma_int64 = ffi.LongLong;

/// General Library Documentation Undocument By General Corporation & Global Corporation & General Developer
typedef Dartma_int64 = int;

/// General Library Documentation Undocument By General Corporation & Global Corporation & General Developer
final class ma_atomic_bool32 extends ffi.Struct {
  @ma_bool32()

  /// General Library Documentation Undocument By General Corporation & Global Corporation & General Developer
  external int value;
}

/// General Library Documentation Undocument By General Corporation & Global Corporation & General Developer
final class ma_device_config extends ffi.Struct {
  @ffi.Int32()

  /// General Library Documentation Undocument By General Corporation & Global Corporation & General Developer
  external int deviceType;

  @ma_uint32()

  /// General Library Documentation Undocument By General Corporation & Global Corporation & General Developer
  external int sampleRate;

  @ma_uint32()

  /// General Library Documentation Undocument By General Corporation & Global Corporation & General Developer
  external int periodSizeInFrames;

  @ma_uint32()

  /// General Library Documentation Undocument By General Corporation & Global Corporation & General Developer
  external int periodSizeInMilliseconds;

  @ma_uint32()

  /// General Library Documentation Undocument By General Corporation & Global Corporation & General Developer
  external int periods;

  @ffi.Int32()

  /// General Library Documentation Undocument By General Corporation & Global Corporation & General Developer
  external int performanceProfile;

  @ma_bool8()

  /// General Library Documentation Undocument By General Corporation & Global Corporation & General Developer
  external int noPreSilencedOutputBuffer;

  @ma_bool8()

  /// General Library Documentation Undocument By General Corporation & Global Corporation & General Developer
  external int noClip;

  @ma_bool8()

  /// General Library Documentation Undocument By General Corporation & Global Corporation & General Developer
  external int noDisableDenormals;

  @ma_bool8()

  /// General Library Documentation Undocument By General Corporation & Global Corporation & General Developer
  external int noFixedSizedCallback;

  /// General Library Documentation Undocument By General Corporation & Global Corporation & General Developer
  external ma_device_data_proc dataCallback;

  /// General Library Documentation Undocument By General Corporation & Global Corporation & General Developer
  external ma_device_notification_proc notificationCallback;

  /// General Library Documentation Undocument By General Corporation & Global Corporation & General Developer
  external ma_stop_proc stopCallback;

  /// General Library Documentation Undocument By General Corporation & Global Corporation & General Developer
  external ffi.Pointer<ffi.Void> pUserData;

  /// General Library Documentation Undocument By General Corporation & Global Corporation & General Developer
  external ma_resampler_config resampling;

  /// General Library Documentation Undocument By General Corporation & Global Corporation & General Developer
  external UnnamedStruct20 playback;

  /// General Library Documentation Undocument By General Corporation & Global Corporation & General Developer
  external UnnamedStruct21 capture;

  /// General Library Documentation Undocument By General Corporation & Global Corporation & General Developer
  external UnnamedStruct22 wasapi;

  /// General Library Documentation Undocument By General Corporation & Global Corporation & General Developer
  external UnnamedStruct23 alsa;

  /// General Library Documentation Undocument By General Corporation & Global Corporation & General Developer
  external UnnamedStruct24 pulse;

  /// General Library Documentation Undocument By General Corporation & Global Corporation & General Developer
  external UnnamedStruct25 coreaudio;

  /// General Library Documentation Undocument By General Corporation & Global Corporation & General Developer
  external UnnamedStruct26 opensl;

  /// General Library Documentation Undocument By General Corporation & Global Corporation & General Developer
  external UnnamedStruct27 aaudio;
}

/// General Library Documentation Undocument By General Corporation & Global Corporation & General Developer
abstract class ma_performance_profile {
  /// General Library Documentation Undocument By General Corporation & Global Corporation & General Developer
  static const int ma_performance_profile_low_latency = 0;

  /// General Library Documentation Undocument By General Corporation & Global Corporation & General Developer
  static const int ma_performance_profile_conservative = 1;
}

/// General Library Documentation Undocument By General Corporation & Global Corporation & General Developer
final class UnnamedStruct20 extends ffi.Struct {
  /// General Library Documentation Undocument By General Corporation & Global Corporation & General Developer
  external ffi.Pointer<ma_device_id> pDeviceID;

  @ffi.Int32()

  /// General Library Documentation Undocument By General Corporation & Global Corporation & General Developer
  external int format;

  @ma_uint32()

  /// General Library Documentation Undocument By General Corporation & Global Corporation & General Developer
  external int channels;

  /// General Library Documentation Undocument By General Corporation & Global Corporation & General Developer
  external ffi.Pointer<ma_channel> pChannelMap;

  @ffi.Int32()

  /// General Library Documentation Undocument By General Corporation & Global Corporation & General Developer
  external int channelMixMode;

  @ma_bool32()

  /// General Library Documentation Undocument By General Corporation & Global Corporation & General Developer
  external int calculateLFEFromSpatialChannels;

  @ffi.Int32()

  /// General Library Documentation Undocument By General Corporation & Global Corporation & General Developer
  external int shareMode;
}

/// General Library Documentation Undocument By General Corporation & Global Corporation & General Developer
final class UnnamedStruct21 extends ffi.Struct {
  /// General Library Documentation Undocument By General Corporation & Global Corporation & General Developer
  external ffi.Pointer<ma_device_id> pDeviceID;

  @ffi.Int32()

  /// General Library Documentation Undocument By General Corporation & Global Corporation & General Developer
  external int format;

  @ma_uint32()

  /// General Library Documentation Undocument By General Corporation & Global Corporation & General Developer
  external int channels;

  /// General Library Documentation Undocument By General Corporation & Global Corporation & General Developer
  external ffi.Pointer<ma_channel> pChannelMap;

  @ffi.Int32()

  /// General Library Documentation Undocument By General Corporation & Global Corporation & General Developer
  external int channelMixMode;

  @ma_bool32()

  /// General Library Documentation Undocument By General Corporation & Global Corporation & General Developer
  external int calculateLFEFromSpatialChannels;

  @ffi.Int32()

  /// General Library Documentation Undocument By General Corporation & Global Corporation & General Developer
  external int shareMode;
}

/// General Library Documentation Undocument By General Corporation & Global Corporation & General Developer
final class UnnamedStruct22 extends ffi.Struct {
  @ffi.Int32()

  /// General Library Documentation Undocument By General Corporation & Global Corporation & General Developer
  external int usage;

  @ma_bool8()

  /// General Library Documentation Undocument By General Corporation & Global Corporation & General Developer
  external int noAutoConvertSRC;

  @ma_bool8()

  /// General Library Documentation Undocument By General Corporation & Global Corporation & General Developer
  external int noDefaultQualitySRC;

  @ma_bool8()

  /// General Library Documentation Undocument By General Corporation & Global Corporation & General Developer
  external int noAutoStreamRouting;

  @ma_bool8()

  /// General Library Documentation Undocument By General Corporation & Global Corporation & General Developer
  external int noHardwareOffloading;

  @ma_uint32()

  /// General Library Documentation Undocument By General Corporation & Global Corporation & General Developer
  external int loopbackProcessID;

  @ma_bool8()

  /// General Library Documentation Undocument By General Corporation & Global Corporation & General Developer
  external int loopbackProcessExclude;
}

/// General Library Documentation Undocument By General Corporation & Global Corporation & General Developer
abstract class ma_wasapi_usage {
  /// General Library Documentation Undocument By General Corporation & Global Corporation & General Developer
  static const int ma_wasapi_usage_default = 0;

  /// General Library Documentation Undocument By General Corporation & Global Corporation & General Developer
  static const int ma_wasapi_usage_games = 1;

  /// General Library Documentation Undocument By General Corporation & Global Corporation & General Developer
  static const int ma_wasapi_usage_pro_audio = 2;
}

/// General Library Documentation Undocument By General Corporation & Global Corporation & General Developer
final class UnnamedStruct23 extends ffi.Struct {
  @ma_bool32()

  /// General Library Documentation Undocument By General Corporation & Global Corporation & General Developer
  external int noMMap;

  @ma_bool32()

  /// General Library Documentation Undocument By General Corporation & Global Corporation & General Developer
  external int noAutoFormat;

  @ma_bool32()

  /// General Library Documentation Undocument By General Corporation & Global Corporation & General Developer
  external int noAutoChannels;

  @ma_bool32()

  /// General Library Documentation Undocument By General Corporation & Global Corporation & General Developer
  external int noAutoResample;
}

/// General Library Documentation Undocument By General Corporation & Global Corporation & General Developer
final class UnnamedStruct24 extends ffi.Struct {
  /// General Library Documentation Undocument By General Corporation & Global Corporation & General Developer
  external ffi.Pointer<ffi.Char> pStreamNamePlayback;

  /// General Library Documentation Undocument By General Corporation & Global Corporation & General Developer
  external ffi.Pointer<ffi.Char> pStreamNameCapture;
}

/// General Library Documentation Undocument By General Corporation & Global Corporation & General Developer
final class UnnamedStruct25 extends ffi.Struct {
  @ma_bool32()

  /// General Library Documentation Undocument By General Corporation & Global Corporation & General Developer
  external int allowNominalSampleRateChange;
}

/// General Library Documentation Undocument By General Corporation & Global Corporation & General Developer
final class UnnamedStruct26 extends ffi.Struct {
  @ffi.Int32()

  /// General Library Documentation Undocument By General Corporation & Global Corporation & General Developer
  external int streamType;

  @ffi.Int32()

  /// General Library Documentation Undocument By General Corporation & Global Corporation & General Developer
  external int recordingPreset;

  @ma_bool32()

  /// General Library Documentation Undocument By General Corporation & Global Corporation & General Developer
  external int enableCompatibilityWorkarounds;
}

/// General Library Documentation Undocument By General Corporation & Global Corporation & General Developer
abstract class ma_opensl_stream_type {
  /// General Library Documentation Undocument By General Corporation & Global Corporation & General Developer
  static const int ma_opensl_stream_type_default = 0;

  /// General Library Documentation Undocument By General Corporation & Global Corporation & General Developer
  static const int ma_opensl_stream_type_voice = 1;

  /// General Library Documentation Undocument By General Corporation & Global Corporation & General Developer
  static const int ma_opensl_stream_type_system = 2;

  /// General Library Documentation Undocument By General Corporation & Global Corporation & General Developer
  static const int ma_opensl_stream_type_ring = 3;

  /// General Library Documentation Undocument By General Corporation & Global Corporation & General Developer
  static const int ma_opensl_stream_type_media = 4;

  /// General Library Documentation Undocument By General Corporation & Global Corporation & General Developer
  static const int ma_opensl_stream_type_alarm = 5;

  /// General Library Documentation Undocument By General Corporation & Global Corporation & General Developer
  static const int ma_opensl_stream_type_notification = 6;
}

/// General Library Documentation Undocument By General Corporation & Global Corporation & General Developer
abstract class ma_opensl_recording_preset {
  /// General Library Documentation Undocument By General Corporation & Global Corporation & General Developer
  static const int ma_opensl_recording_preset_default = 0;

  /// General Library Documentation Undocument By General Corporation & Global Corporation & General Developer
  static const int ma_opensl_recording_preset_generic = 1;

  /// General Library Documentation Undocument By General Corporation & Global Corporation & General Developer
  static const int ma_opensl_recording_preset_camcorder = 2;

  /// General Library Documentation Undocument By General Corporation & Global Corporation & General Developer
  static const int ma_opensl_recording_preset_voice_recognition = 3;

  /// General Library Documentation Undocument By General Corporation & Global Corporation & General Developer
  static const int ma_opensl_recording_preset_voice_communication = 4;

  /// General Library Documentation Undocument By General Corporation & Global Corporation & General Developer
  static const int ma_opensl_recording_preset_voice_unprocessed = 5;
}

/// General Library Documentation Undocument By General Corporation & Global Corporation & General Developer
final class UnnamedStruct27 extends ffi.Struct {
  @ffi.Int32()

  /// General Library Documentation Undocument By General Corporation & Global Corporation & General Developer
  external int usage;

  @ffi.Int32()

  /// General Library Documentation Undocument By General Corporation & Global Corporation & General Developer
  external int contentType;

  @ffi.Int32()

  /// General Library Documentation Undocument By General Corporation & Global Corporation & General Developer
  external int inputPreset;

  @ffi.Int32()

  /// General Library Documentation Undocument By General Corporation & Global Corporation & General Developer
  external int allowedCapturePolicy;

  @ma_bool32()

  /// General Library Documentation Undocument By General Corporation & Global Corporation & General Developer
  external int noAutoStartAfterReroute;

  @ma_bool32()

  /// General Library Documentation Undocument By General Corporation & Global Corporation & General Developer
  external int enableCompatibilityWorkarounds;
}

/// General Library Documentation Undocument By General Corporation & Global Corporation & General Developer
abstract class ma_aaudio_usage {
  /// General Library Documentation Undocument By General Corporation & Global Corporation & General Developer
  static const int ma_aaudio_usage_default = 0;

  /// General Library Documentation Undocument By General Corporation & Global Corporation & General Developer
  static const int ma_aaudio_usage_media = 1;

  /// General Library Documentation Undocument By General Corporation & Global Corporation & General Developer
  static const int ma_aaudio_usage_voice_communication = 2;

  /// General Library Documentation Undocument By General Corporation & Global Corporation & General Developer
  static const int ma_aaudio_usage_voice_communication_signalling = 3;

  /// General Library Documentation Undocument By General Corporation & Global Corporation & General Developer
  static const int ma_aaudio_usage_alarm = 4;

  /// General Library Documentation Undocument By General Corporation & Global Corporation & General Developer
  static const int ma_aaudio_usage_notification = 5;

  /// General Library Documentation Undocument By General Corporation & Global Corporation & General Developer
  static const int ma_aaudio_usage_notification_ringtone = 6;

  /// General Library Documentation Undocument By General Corporation & Global Corporation & General Developer
  static const int ma_aaudio_usage_notification_event = 7;

  /// General Library Documentation Undocument By General Corporation & Global Corporation & General Developer
  static const int ma_aaudio_usage_assistance_accessibility = 8;

  /// General Library Documentation Undocument By General Corporation & Global Corporation & General Developer
  static const int ma_aaudio_usage_assistance_navigation_guidance = 9;

  /// General Library Documentation Undocument By General Corporation & Global Corporation & General Developer
  static const int ma_aaudio_usage_assistance_sonification = 10;

  /// General Library Documentation Undocument By General Corporation & Global Corporation & General Developer
  static const int ma_aaudio_usage_game = 11;

  /// General Library Documentation Undocument By General Corporation & Global Corporation & General Developer
  static const int ma_aaudio_usage_assitant = 12;

  /// General Library Documentation Undocument By General Corporation & Global Corporation & General Developer
  static const int ma_aaudio_usage_emergency = 13;

  /// General Library Documentation Undocument By General Corporation & Global Corporation & General Developer
  static const int ma_aaudio_usage_safety = 14;

  /// General Library Documentation Undocument By General Corporation & Global Corporation & General Developer
  static const int ma_aaudio_usage_vehicle_status = 15;

  /// General Library Documentation Undocument By General Corporation & Global Corporation & General Developer
  static const int ma_aaudio_usage_announcement = 16;
}

/// General Library Documentation Undocument By General Corporation & Global Corporation & General Developer
abstract class ma_aaudio_content_type {
  /// General Library Documentation Undocument By General Corporation & Global Corporation & General Developer
  static const int ma_aaudio_content_type_default = 0;

  /// General Library Documentation Undocument By General Corporation & Global Corporation & General Developer
  static const int ma_aaudio_content_type_speech = 1;

  /// General Library Documentation Undocument By General Corporation & Global Corporation & General Developer
  static const int ma_aaudio_content_type_music = 2;

  /// General Library Documentation Undocument By General Corporation & Global Corporation & General Developer
  static const int ma_aaudio_content_type_movie = 3;

  /// General Library Documentation Undocument By General Corporation & Global Corporation & General Developer
  static const int ma_aaudio_content_type_sonification = 4;
}

/// General Library Documentation Undocument By General Corporation & Global Corporation & General Developer
abstract class ma_aaudio_input_preset {
  /// General Library Documentation Undocument By General Corporation & Global Corporation & General Developer
  static const int ma_aaudio_input_preset_default = 0;

  /// General Library Documentation Undocument By General Corporation & Global Corporation & General Developer
  static const int ma_aaudio_input_preset_generic = 1;

  /// General Library Documentation Undocument By General Corporation & Global Corporation & General Developer
  static const int ma_aaudio_input_preset_camcorder = 2;

  /// General Library Documentation Undocument By General Corporation & Global Corporation & General Developer
  static const int ma_aaudio_input_preset_voice_recognition = 3;

  /// General Library Documentation Undocument By General Corporation & Global Corporation & General Developer
  static const int ma_aaudio_input_preset_voice_communication = 4;

  /// General Library Documentation Undocument By General Corporation & Global Corporation & General Developer
  static const int ma_aaudio_input_preset_unprocessed = 5;

  /// General Library Documentation Undocument By General Corporation & Global Corporation & General Developer
  static const int ma_aaudio_input_preset_voice_performance = 6;
}

/// General Library Documentation Undocument By General Corporation & Global Corporation & General Developer
abstract class ma_aaudio_allowed_capture_policy {
  /// General Library Documentation Undocument By General Corporation & Global Corporation & General Developer
  static const int ma_aaudio_allow_capture_default = 0;

  /// General Library Documentation Undocument By General Corporation & Global Corporation & General Developer
  static const int ma_aaudio_allow_capture_by_all = 1;

  /// General Library Documentation Undocument By General Corporation & Global Corporation & General Developer
  static const int ma_aaudio_allow_capture_by_system = 2;

  /// General Library Documentation Undocument By General Corporation & Global Corporation & General Developer
  static const int ma_aaudio_allow_capture_by_none = 3;
}

/// General Library Documentation Undocument By General Corporation & Global Corporation & General Developer
final class ma_device_descriptor extends ffi.Struct {
  /// General Library Documentation Undocument By General Corporation & Global Corporation & General Developer
  external ffi.Pointer<ma_device_id> pDeviceID;

  @ffi.Int32()

  /// General Library Documentation Undocument By General Corporation & Global Corporation & General Developer
  external int shareMode;

  @ffi.Int32()

  /// General Library Documentation Undocument By General Corporation & Global Corporation & General Developer
  external int format;

  @ma_uint32()

  /// General Library Documentation Undocument By General Corporation & Global Corporation & General Developer
  external int channels;

  @ma_uint32()

  /// General Library Documentation Undocument By General Corporation & Global Corporation & General Developer
  external int sampleRate;

  @ffi.Array.multi([254])

  /// General Library Documentation Undocument By General Corporation & Global Corporation & General Developer
  external ffi.Array<ma_channel> channelMap;

  @ma_uint32()

  /// General Library Documentation Undocument By General Corporation & Global Corporation & General Developer
  external int periodSizeInFrames;

  @ma_uint32()

  /// General Library Documentation Undocument By General Corporation & Global Corporation & General Developer
  external int periodSizeInMilliseconds;

  @ma_uint32()

  /// General Library Documentation Undocument By General Corporation & Global Corporation & General Developer
  external int periodCount;
}

/// General Library Documentation Undocument By General Corporation & Global Corporation & General Developer
abstract class ma_backend {
  /// General Library Documentation Undocument By General Corporation & Global Corporation & General Developer
  static const int ma_backend_wasapi = 0;

  /// General Library Documentation Undocument By General Corporation & Global Corporation & General Developer
  static const int ma_backend_dsound = 1;

  /// General Library Documentation Undocument By General Corporation & Global Corporation & General Developer
  static const int ma_backend_winmm = 2;

  /// General Library Documentation Undocument By General Corporation & Global Corporation & General Developer
  static const int ma_backend_coreaudio = 3;

  /// General Library Documentation Undocument By General Corporation & Global Corporation & General Developer
  static const int ma_backend_sndio = 4;

  /// General Library Documentation Undocument By General Corporation & Global Corporation & General Developer
  static const int ma_backend_audio4 = 5;

  /// General Library Documentation Undocument By General Corporation & Global Corporation & General Developer
  static const int ma_backend_oss = 6;

  /// General Library Documentation Undocument By General Corporation & Global Corporation & General Developer
  static const int ma_backend_pulseaudio = 7;

  /// General Library Documentation Undocument By General Corporation & Global Corporation & General Developer
  static const int ma_backend_alsa = 8;

  /// General Library Documentation Undocument By General Corporation & Global Corporation & General Developer
  static const int ma_backend_jack = 9;

  /// General Library Documentation Undocument By General Corporation & Global Corporation & General Developer
  static const int ma_backend_aaudio = 10;

  /// General Library Documentation Undocument By General Corporation & Global Corporation & General Developer
  static const int ma_backend_opensl = 11;

  /// General Library Documentation Undocument By General Corporation & Global Corporation & General Developer
  static const int ma_backend_webaudio = 12;

  /// General Library Documentation Undocument By General Corporation & Global Corporation & General Developer
  static const int ma_backend_custom = 13;

  /// General Library Documentation Undocument By General Corporation & Global Corporation & General Developer
  static const int ma_backend_null = 14;
}

/// General Library Documentation Undocument By General Corporation & Global Corporation & General Developer
final class UnnamedUnion8 extends ffi.Union {
  /// General Library Documentation Undocument By General Corporation & Global Corporation & General Developer
  external UnnamedStruct28 alsa;

  /// General Library Documentation Undocument By General Corporation & Global Corporation & General Developer
  external UnnamedStruct29 pulse;

  /// General Library Documentation Undocument By General Corporation & Global Corporation & General Developer
  external UnnamedStruct30 jack;

  /// General Library Documentation Undocument By General Corporation & Global Corporation & General Developer
  external UnnamedStruct31 null_backend;
}

/// General Library Documentation Undocument By General Corporation & Global Corporation & General Developer
final class UnnamedStruct28 extends ffi.Struct {
  /// General Library Documentation Undocument By General Corporation & Global Corporation & General Developer
  external ma_handle asoundSO;

  /// General Library Documentation Undocument By General Corporation & Global Corporation & General Developer
  external ma_proc snd_pcm_open;

  /// General Library Documentation Undocument By General Corporation & Global Corporation & General Developer
  external ma_proc snd_pcm_close;

  /// General Library Documentation Undocument By General Corporation & Global Corporation & General Developer
  external ma_proc snd_pcm_hw_params_sizeof;

  /// General Library Documentation Undocument By General Corporation & Global Corporation & General Developer
  external ma_proc snd_pcm_hw_params_any;

  /// General Library Documentation Undocument By General Corporation & Global Corporation & General Developer
  external ma_proc snd_pcm_hw_params_set_format;

  /// General Library Documentation Undocument By General Corporation & Global Corporation & General Developer
  external ma_proc snd_pcm_hw_params_set_format_first;

  /// General Library Documentation Undocument By General Corporation & Global Corporation & General Developer
  external ma_proc snd_pcm_hw_params_get_format_mask;

  /// General Library Documentation Undocument By General Corporation & Global Corporation & General Developer
  external ma_proc snd_pcm_hw_params_set_channels;

  /// General Library Documentation Undocument By General Corporation & Global Corporation & General Developer
  external ma_proc snd_pcm_hw_params_set_channels_near;

  /// General Library Documentation Undocument By General Corporation & Global Corporation & General Developer
  external ma_proc snd_pcm_hw_params_set_channels_minmax;

  /// General Library Documentation Undocument By General Corporation & Global Corporation & General Developer
  external ma_proc snd_pcm_hw_params_set_rate_resample;

  /// General Library Documentation Undocument By General Corporation & Global Corporation & General Developer
  external ma_proc snd_pcm_hw_params_set_rate;

  /// General Library Documentation Undocument By General Corporation & Global Corporation & General Developer
  external ma_proc snd_pcm_hw_params_set_rate_near;

  /// General Library Documentation Undocument By General Corporation & Global Corporation & General Developer
  external ma_proc snd_pcm_hw_params_set_buffer_size_near;

  /// General Library Documentation Undocument By General Corporation & Global Corporation & General Developer
  external ma_proc snd_pcm_hw_params_set_periods_near;

  /// General Library Documentation Undocument By General Corporation & Global Corporation & General Developer
  external ma_proc snd_pcm_hw_params_set_access;

  /// General Library Documentation Undocument By General Corporation & Global Corporation & General Developer
  external ma_proc snd_pcm_hw_params_get_format;

  /// General Library Documentation Undocument By General Corporation & Global Corporation & General Developer
  external ma_proc snd_pcm_hw_params_get_channels;

  /// General Library Documentation Undocument By General Corporation & Global Corporation & General Developer
  external ma_proc snd_pcm_hw_params_get_channels_min;

  /// General Library Documentation Undocument By General Corporation & Global Corporation & General Developer
  external ma_proc snd_pcm_hw_params_get_channels_max;

  /// General Library Documentation Undocument By General Corporation & Global Corporation & General Developer
  external ma_proc snd_pcm_hw_params_get_rate;

  /// General Library Documentation Undocument By General Corporation & Global Corporation & General Developer
  external ma_proc snd_pcm_hw_params_get_rate_min;

  /// General Library Documentation Undocument By General Corporation & Global Corporation & General Developer
  external ma_proc snd_pcm_hw_params_get_rate_max;

  /// General Library Documentation Undocument By General Corporation & Global Corporation & General Developer
  external ma_proc snd_pcm_hw_params_get_buffer_size;

  /// General Library Documentation Undocument By General Corporation & Global Corporation & General Developer
  external ma_proc snd_pcm_hw_params_get_periods;

  /// General Library Documentation Undocument By General Corporation & Global Corporation & General Developer
  external ma_proc snd_pcm_hw_params_get_access;

  /// General Library Documentation Undocument By General Corporation & Global Corporation & General Developer
  external ma_proc snd_pcm_hw_params_test_format;

  /// General Library Documentation Undocument By General Corporation & Global Corporation & General Developer
  external ma_proc snd_pcm_hw_params_test_channels;

  /// General Library Documentation Undocument By General Corporation & Global Corporation & General Developer
  external ma_proc snd_pcm_hw_params_test_rate;

  /// General Library Documentation Undocument By General Corporation & Global Corporation & General Developer
  external ma_proc snd_pcm_hw_params;

  /// General Library Documentation Undocument By General Corporation & Global Corporation & General Developer
  external ma_proc snd_pcm_sw_params_sizeof;

  /// General Library Documentation Undocument By General Corporation & Global Corporation & General Developer
  external ma_proc snd_pcm_sw_params_current;

  /// General Library Documentation Undocument By General Corporation & Global Corporation & General Developer
  external ma_proc snd_pcm_sw_params_get_boundary;

  /// General Library Documentation Undocument By General Corporation & Global Corporation & General Developer
  external ma_proc snd_pcm_sw_params_set_avail_min;

  /// General Library Documentation Undocument By General Corporation & Global Corporation & General Developer
  external ma_proc snd_pcm_sw_params_set_start_threshold;

  /// General Library Documentation Undocument By General Corporation & Global Corporation & General Developer
  external ma_proc snd_pcm_sw_params_set_stop_threshold;

  /// General Library Documentation Undocument By General Corporation & Global Corporation & General Developer
  external ma_proc snd_pcm_sw_params;

  /// General Library Documentation Undocument By General Corporation & Global Corporation & General Developer
  external ma_proc snd_pcm_format_mask_sizeof;

  /// General Library Documentation Undocument By General Corporation & Global Corporation & General Developer
  external ma_proc snd_pcm_format_mask_test;

  /// General Library Documentation Undocument By General Corporation & Global Corporation & General Developer
  external ma_proc snd_pcm_get_chmap;

  /// General Library Documentation Undocument By General Corporation & Global Corporation & General Developer
  external ma_proc snd_pcm_state;

  /// General Library Documentation Undocument By General Corporation & Global Corporation & General Developer
  external ma_proc snd_pcm_prepare;

  /// General Library Documentation Undocument By General Corporation & Global Corporation & General Developer
  external ma_proc snd_pcm_start;

  /// General Library Documentation Undocument By General Corporation & Global Corporation & General Developer
  external ma_proc snd_pcm_drop;

  /// General Library Documentation Undocument By General Corporation & Global Corporation & General Developer
  external ma_proc snd_pcm_drain;

  /// General Library Documentation Undocument By General Corporation & Global Corporation & General Developer
  external ma_proc snd_pcm_reset;

  /// General Library Documentation Undocument By General Corporation & Global Corporation & General Developer
  external ma_proc snd_device_name_hint;

  /// General Library Documentation Undocument By General Corporation & Global Corporation & General Developer
  external ma_proc snd_device_name_get_hint;

  /// General Library Documentation Undocument By General Corporation & Global Corporation & General Developer
  external ma_proc snd_card_get_index;

  /// General Library Documentation Undocument By General Corporation & Global Corporation & General Developer
  external ma_proc snd_device_name_free_hint;

  /// General Library Documentation Undocument By General Corporation & Global Corporation & General Developer
  external ma_proc snd_pcm_mmap_begin;

  /// General Library Documentation Undocument By General Corporation & Global Corporation & General Developer
  external ma_proc snd_pcm_mmap_commit;

  /// General Library Documentation Undocument By General Corporation & Global Corporation & General Developer
  external ma_proc snd_pcm_recover;

  /// General Library Documentation Undocument By General Corporation & Global Corporation & General Developer
  external ma_proc snd_pcm_readi;

  /// General Library Documentation Undocument By General Corporation & Global Corporation & General Developer
  external ma_proc snd_pcm_writei;

  /// General Library Documentation Undocument By General Corporation & Global Corporation & General Developer
  external ma_proc snd_pcm_avail;

  /// General Library Documentation Undocument By General Corporation & Global Corporation & General Developer
  external ma_proc snd_pcm_avail_update;

  /// General Library Documentation Undocument By General Corporation & Global Corporation & General Developer
  external ma_proc snd_pcm_wait;

  /// General Library Documentation Undocument By General Corporation & Global Corporation & General Developer
  external ma_proc snd_pcm_nonblock;

  /// General Library Documentation Undocument By General Corporation & Global Corporation & General Developer
  external ma_proc snd_pcm_info;

  /// General Library Documentation Undocument By General Corporation & Global Corporation & General Developer
  external ma_proc snd_pcm_info_sizeof;

  /// General Library Documentation Undocument By General Corporation & Global Corporation & General Developer
  external ma_proc snd_pcm_info_get_name;

  /// General Library Documentation Undocument By General Corporation & Global Corporation & General Developer
  external ma_proc snd_pcm_poll_descriptors;

  /// General Library Documentation Undocument By General Corporation & Global Corporation & General Developer
  external ma_proc snd_pcm_poll_descriptors_count;

  /// General Library Documentation Undocument By General Corporation & Global Corporation & General Developer
  external ma_proc snd_pcm_poll_descriptors_revents;

  /// General Library Documentation Undocument By General Corporation & Global Corporation & General Developer
  external ma_proc snd_config_update_free_global;

  /// General Library Documentation Undocument By General Corporation & Global Corporation & General Developer
  external ma_mutex internalDeviceEnumLock;

  @ma_bool32()

  /// General Library Documentation Undocument By General Corporation & Global Corporation & General Developer
  external int useVerboseDeviceEnumeration;
}

/// General Library Documentation Undocument By General Corporation & Global Corporation & General Developer
typedef ma_handle = ffi.Pointer<ffi.Void>;

/// General Library Documentation Undocument By General Corporation & Global Corporation & General Developer
typedef ma_proc = ffi.Pointer<ffi.NativeFunction<ma_procFunction>>;

/// General Library Documentation Undocument By General Corporation & Global Corporation & General Developer
typedef ma_procFunction = ffi.Void Function();

/// General Library Documentation Undocument By General Corporation & Global Corporation & General Developer
typedef Dartma_procFunction = void Function();

/// General Library Documentation Undocument By General Corporation & Global Corporation & General Developer
final class UnnamedStruct29 extends ffi.Struct {
  /// General Library Documentation Undocument By General Corporation & Global Corporation & General Developer
  external ma_handle pulseSO;

  /// General Library Documentation Undocument By General Corporation & Global Corporation & General Developer
  external ma_proc pa_mainloop_new;

  /// General Library Documentation Undocument By General Corporation & Global Corporation & General Developer
  external ma_proc pa_mainloop_free;

  /// General Library Documentation Undocument By General Corporation & Global Corporation & General Developer
  external ma_proc pa_mainloop_quit;

  /// General Library Documentation Undocument By General Corporation & Global Corporation & General Developer
  external ma_proc pa_mainloop_get_api;

  /// General Library Documentation Undocument By General Corporation & Global Corporation & General Developer
  external ma_proc pa_mainloop_iterate;

  /// General Library Documentation Undocument By General Corporation & Global Corporation & General Developer
  external ma_proc pa_mainloop_wakeup;

  /// General Library Documentation Undocument By General Corporation & Global Corporation & General Developer
  external ma_proc pa_threaded_mainloop_new;

  /// General Library Documentation Undocument By General Corporation & Global Corporation & General Developer
  external ma_proc pa_threaded_mainloop_free;

  /// General Library Documentation Undocument By General Corporation & Global Corporation & General Developer
  external ma_proc pa_threaded_mainloop_start;

  /// General Library Documentation Undocument By General Corporation & Global Corporation & General Developer
  external ma_proc pa_threaded_mainloop_stop;

  /// General Library Documentation Undocument By General Corporation & Global Corporation & General Developer
  external ma_proc pa_threaded_mainloop_lock;

  /// General Library Documentation Undocument By General Corporation & Global Corporation & General Developer
  external ma_proc pa_threaded_mainloop_unlock;

  /// General Library Documentation Undocument By General Corporation & Global Corporation & General Developer
  external ma_proc pa_threaded_mainloop_wait;

  /// General Library Documentation Undocument By General Corporation & Global Corporation & General Developer
  external ma_proc pa_threaded_mainloop_signal;

  /// General Library Documentation Undocument By General Corporation & Global Corporation & General Developer
  external ma_proc pa_threaded_mainloop_accept;

  /// General Library Documentation Undocument By General Corporation & Global Corporation & General Developer
  external ma_proc pa_threaded_mainloop_get_retval;

  /// General Library Documentation Undocument By General Corporation & Global Corporation & General Developer
  external ma_proc pa_threaded_mainloop_get_api;

  /// General Library Documentation Undocument By General Corporation & Global Corporation & General Developer
  external ma_proc pa_threaded_mainloop_in_thread;

  /// General Library Documentation Undocument By General Corporation & Global Corporation & General Developer
  external ma_proc pa_threaded_mainloop_set_name;

  /// General Library Documentation Undocument By General Corporation & Global Corporation & General Developer
  external ma_proc pa_context_new;

  /// General Library Documentation Undocument By General Corporation & Global Corporation & General Developer
  external ma_proc pa_context_unref;

  /// General Library Documentation Undocument By General Corporation & Global Corporation & General Developer
  external ma_proc pa_context_connect;

  /// General Library Documentation Undocument By General Corporation & Global Corporation & General Developer
  external ma_proc pa_context_disconnect;

  /// General Library Documentation Undocument By General Corporation & Global Corporation & General Developer
  external ma_proc pa_context_set_state_callback;

  /// General Library Documentation Undocument By General Corporation & Global Corporation & General Developer
  external ma_proc pa_context_get_state;

  /// General Library Documentation Undocument By General Corporation & Global Corporation & General Developer
  external ma_proc pa_context_get_sink_info_list;

  /// General Library Documentation Undocument By General Corporation & Global Corporation & General Developer
  external ma_proc pa_context_get_source_info_list;

  /// General Library Documentation Undocument By General Corporation & Global Corporation & General Developer
  external ma_proc pa_context_get_sink_info_by_name;

  /// General Library Documentation Undocument By General Corporation & Global Corporation & General Developer
  external ma_proc pa_context_get_source_info_by_name;

  /// General Library Documentation Undocument By General Corporation & Global Corporation & General Developer
  external ma_proc pa_operation_unref;

  /// General Library Documentation Undocument By General Corporation & Global Corporation & General Developer
  external ma_proc pa_operation_get_state;

  /// General Library Documentation Undocument By General Corporation & Global Corporation & General Developer
  external ma_proc pa_channel_map_init_extend;

  /// General Library Documentation Undocument By General Corporation & Global Corporation & General Developer
  external ma_proc pa_channel_map_valid;

  /// General Library Documentation Undocument By General Corporation & Global Corporation & General Developer
  external ma_proc pa_channel_map_compatible;

  /// General Library Documentation Undocument By General Corporation & Global Corporation & General Developer
  external ma_proc pa_stream_new;

  /// General Library Documentation Undocument By General Corporation & Global Corporation & General Developer
  external ma_proc pa_stream_unref;

  /// General Library Documentation Undocument By General Corporation & Global Corporation & General Developer
  external ma_proc pa_stream_connect_playback;

  /// General Library Documentation Undocument By General Corporation & Global Corporation & General Developer
  external ma_proc pa_stream_connect_record;

  /// General Library Documentation Undocument By General Corporation & Global Corporation & General Developer
  external ma_proc pa_stream_disconnect;

  /// General Library Documentation Undocument By General Corporation & Global Corporation & General Developer
  external ma_proc pa_stream_get_state;

  /// General Library Documentation Undocument By General Corporation & Global Corporation & General Developer
  external ma_proc pa_stream_get_sample_spec;

  /// General Library Documentation Undocument By General Corporation & Global Corporation & General Developer
  external ma_proc pa_stream_get_channel_map;

  /// General Library Documentation Undocument By General Corporation & Global Corporation & General Developer
  external ma_proc pa_stream_get_buffer_attr;

  /// General Library Documentation Undocument By General Corporation & Global Corporation & General Developer
  external ma_proc pa_stream_set_buffer_attr;

  /// General Library Documentation Undocument By General Corporation & Global Corporation & General Developer
  external ma_proc pa_stream_get_device_name;

  /// General Library Documentation Undocument By General Corporation & Global Corporation & General Developer
  external ma_proc pa_stream_set_write_callback;

  /// General Library Documentation Undocument By General Corporation & Global Corporation & General Developer
  external ma_proc pa_stream_set_read_callback;

  /// General Library Documentation Undocument By General Corporation & Global Corporation & General Developer
  external ma_proc pa_stream_set_suspended_callback;

  /// General Library Documentation Undocument By General Corporation & Global Corporation & General Developer
  external ma_proc pa_stream_set_moved_callback;

  /// General Library Documentation Undocument By General Corporation & Global Corporation & General Developer
  external ma_proc pa_stream_is_suspended;

  /// General Library Documentation Undocument By General Corporation & Global Corporation & General Developer
  external ma_proc pa_stream_flush;

  /// General Library Documentation Undocument By General Corporation & Global Corporation & General Developer
  external ma_proc pa_stream_drain;

  /// General Library Documentation Undocument By General Corporation & Global Corporation & General Developer
  external ma_proc pa_stream_is_corked;

  /// General Library Documentation Undocument By General Corporation & Global Corporation & General Developer
  external ma_proc pa_stream_cork;

  /// General Library Documentation Undocument By General Corporation & Global Corporation & General Developer
  external ma_proc pa_stream_trigger;

  /// General Library Documentation Undocument By General Corporation & Global Corporation & General Developer
  external ma_proc pa_stream_begin_write;

  /// General Library Documentation Undocument By General Corporation & Global Corporation & General Developer
  external ma_proc pa_stream_write;

  /// General Library Documentation Undocument By General Corporation & Global Corporation & General Developer
  external ma_proc pa_stream_peek;

  /// General Library Documentation Undocument By General Corporation & Global Corporation & General Developer
  external ma_proc pa_stream_drop;

  /// General Library Documentation Undocument By General Corporation & Global Corporation & General Developer
  external ma_proc pa_stream_writable_size;

  /// General Library Documentation Undocument By General Corporation & Global Corporation & General Developer
  external ma_proc pa_stream_readable_size;

  /// General Library Documentation Undocument By General Corporation & Global Corporation & General Developer
  external ma_ptr pMainLoop;

  /// General Library Documentation Undocument By General Corporation & Global Corporation & General Developer
  external ma_ptr pPulseContext;

  /// General Library Documentation Undocument By General Corporation & Global Corporation & General Developer
  external ffi.Pointer<ffi.Char> pApplicationName;

  /// General Library Documentation Undocument By General Corporation & Global Corporation & General Developer
  external ffi.Pointer<ffi.Char> pServerName;
}

/// General Library Documentation Undocument By General Corporation & Global Corporation & General Developer
final class UnnamedStruct30 extends ffi.Struct {
  /// General Library Documentation Undocument By General Corporation & Global Corporation & General Developer
  external ma_handle jackSO;

  /// General Library Documentation Undocument By General Corporation & Global Corporation & General Developer
  external ma_proc jack_client_open;

  /// General Library Documentation Undocument By General Corporation & Global Corporation & General Developer
  external ma_proc jack_client_close;

  /// General Library Documentation Undocument By General Corporation & Global Corporation & General Developer
  external ma_proc jack_client_name_size;

  /// General Library Documentation Undocument By General Corporation & Global Corporation & General Developer
  external ma_proc jack_set_process_callback;

  /// General Library Documentation Undocument By General Corporation & Global Corporation & General Developer
  external ma_proc jack_set_buffer_size_callback;

  /// General Library Documentation Undocument By General Corporation & Global Corporation & General Developer
  external ma_proc jack_on_shutdown;

  /// General Library Documentation Undocument By General Corporation & Global Corporation & General Developer
  external ma_proc jack_get_sample_rate;

  /// General Library Documentation Undocument By General Corporation & Global Corporation & General Developer
  external ma_proc jack_get_buffer_size;

  /// General Library Documentation Undocument By General Corporation & Global Corporation & General Developer
  external ma_proc jack_get_ports;

  /// General Library Documentation Undocument By General Corporation & Global Corporation & General Developer
  external ma_proc jack_activate;

  /// General Library Documentation Undocument By General Corporation & Global Corporation & General Developer
  external ma_proc jack_deactivate;

  /// General Library Documentation Undocument By General Corporation & Global Corporation & General Developer
  external ma_proc jack_connect;

  /// General Library Documentation Undocument By General Corporation & Global Corporation & General Developer
  external ma_proc jack_port_register;

  /// General Library Documentation Undocument By General Corporation & Global Corporation & General Developer
  external ma_proc jack_port_name;

  /// General Library Documentation Undocument By General Corporation & Global Corporation & General Developer
  external ma_proc jack_port_get_buffer;

  /// General Library Documentation Undocument By General Corporation & Global Corporation & General Developer
  external ma_proc jack_free;

  /// General Library Documentation Undocument By General Corporation & Global Corporation & General Developer
  external ffi.Pointer<ffi.Char> pClientName;

  @ma_bool32()

  /// General Library Documentation Undocument By General Corporation & Global Corporation & General Developer
  external int tryStartServer;
}

/// General Library Documentation Undocument By General Corporation & Global Corporation & General Developer
final class UnnamedStruct31 extends ffi.Struct {
  @ffi.Int()

  /// General Library Documentation Undocument By General Corporation & Global Corporation & General Developer
  external int unused;
}

/// General Library Documentation Undocument By General Corporation & Global Corporation & General Developer
final class UnnamedUnion9 extends ffi.Union {
  /// General Library Documentation Undocument By General Corporation & Global Corporation & General Developer
  external UnnamedStruct32 posix;

  @ffi.Int()

  /// General Library Documentation Undocument By General Corporation & Global Corporation & General Developer
  external int unused;
}

/// General Library Documentation Undocument By General Corporation & Global Corporation & General Developer
final class UnnamedStruct32 extends ffi.Struct {
  @ffi.Int()

  /// General Library Documentation Undocument By General Corporation & Global Corporation & General Developer
  external int unused;
}

/// General Library Documentation Undocument By General Corporation & Global Corporation & General Developer
abstract class ma_stream_format {
  /// General Library Documentation Undocument By General Corporation & Global Corporation & General Developer
  static const int ma_stream_format_pcm = 0;
}

/// General Library Documentation Undocument By General Corporation & Global Corporation & General Developer
abstract class ma_stream_layout {
  /// General Library Documentation Undocument By General Corporation & Global Corporation & General Developer
  static const int ma_stream_layout_interleaved = 0;

  /// General Library Documentation Undocument By General Corporation & Global Corporation & General Developer
  static const int ma_stream_layout_deinterleaved = 1;
}

/// General Library Documentation Undocument By General Corporation & Global Corporation & General Developer
abstract class ma_standard_sample_rate {
  /// General Library Documentation Undocument By General Corporation & Global Corporation & General Developer
  static const int ma_standard_sample_rate_48000 = 48000;

  /// General Library Documentation Undocument By General Corporation & Global Corporation & General Developer
  static const int ma_standard_sample_rate_44100 = 44100;

  /// General Library Documentation Undocument By General Corporation & Global Corporation & General Developer
  static const int ma_standard_sample_rate_32000 = 32000;

  /// General Library Documentation Undocument By General Corporation & Global Corporation & General Developer
  static const int ma_standard_sample_rate_24000 = 24000;

  /// General Library Documentation Undocument By General Corporation & Global Corporation & General Developer
  static const int ma_standard_sample_rate_22050 = 22050;

  /// General Library Documentation Undocument By General Corporation & Global Corporation & General Developer
  static const int ma_standard_sample_rate_88200 = 88200;

  /// General Library Documentation Undocument By General Corporation & Global Corporation & General Developer
  static const int ma_standard_sample_rate_96000 = 96000;

  /// General Library Documentation Undocument By General Corporation & Global Corporation & General Developer
  static const int ma_standard_sample_rate_176400 = 176400;

  /// General Library Documentation Undocument By General Corporation & Global Corporation & General Developer
  static const int ma_standard_sample_rate_192000 = 192000;

  /// General Library Documentation Undocument By General Corporation & Global Corporation & General Developer
  static const int ma_standard_sample_rate_16000 = 16000;

  /// General Library Documentation Undocument By General Corporation & Global Corporation & General Developer
  static const int ma_standard_sample_rate_11025 = 11025;

  /// General Library Documentation Undocument By General Corporation & Global Corporation & General Developer
  static const int ma_standard_sample_rate_8000 = 8000;

  /// General Library Documentation Undocument By General Corporation & Global Corporation & General Developer
  static const int ma_standard_sample_rate_352800 = 352800;

  /// General Library Documentation Undocument By General Corporation & Global Corporation & General Developer
  static const int ma_standard_sample_rate_384000 = 384000;

  /// General Library Documentation Undocument By General Corporation & Global Corporation & General Developer
  static const int ma_standard_sample_rate_min = 8000;

  /// General Library Documentation Undocument By General Corporation & Global Corporation & General Developer
  static const int ma_standard_sample_rate_max = 384000;

  /// General Library Documentation Undocument By General Corporation & Global Corporation & General Developer
  static const int ma_standard_sample_rate_count = 14;
}

/// General Library Documentation Undocument By General Corporation & Global Corporation & General Developer
abstract class ma_standard_channel_map {
  /// General Library Documentation Undocument By General Corporation & Global Corporation & General Developer
  static const int ma_standard_channel_map_microsoft = 0;

  /// General Library Documentation Undocument By General Corporation & Global Corporation & General Developer
  static const int ma_standard_channel_map_alsa = 1;

  /// General Library Documentation Undocument By General Corporation & Global Corporation & General Developer
  static const int ma_standard_channel_map_rfc3551 = 2;

  /// General Library Documentation Undocument By General Corporation & Global Corporation & General Developer
  static const int ma_standard_channel_map_flac = 3;

  /// General Library Documentation Undocument By General Corporation & Global Corporation & General Developer
  static const int ma_standard_channel_map_vorbis = 4;

  /// General Library Documentation Undocument By General Corporation & Global Corporation & General Developer
  static const int ma_standard_channel_map_sound4 = 5;

  /// General Library Documentation Undocument By General Corporation & Global Corporation & General Developer
  static const int ma_standard_channel_map_sndio = 6;

  /// General Library Documentation Undocument By General Corporation & Global Corporation & General Developer
  static const int ma_standard_channel_map_webaudio = 3;

  /// General Library Documentation Undocument By General Corporation & Global Corporation & General Developer
  static const int ma_standard_channel_map_default = 0;
}

/// General Library Documentation Undocument By General Corporation & Global Corporation & General Developer
final class ma_lcg extends ffi.Struct {
  @ma_int32()

  /// General Library Documentation Undocument By General Corporation & Global Corporation & General Developer
  external int state;
}

/// General Library Documentation Undocument By General Corporation & Global Corporation & General Developer
final class ma_atomic_uint32 extends ffi.Struct {
  @ma_uint32()

  /// General Library Documentation Undocument By General Corporation & Global Corporation & General Developer
  external int value;
}

/// General Library Documentation Undocument By General Corporation & Global Corporation & General Developer
final class ma_atomic_int32 extends ffi.Struct {
  @ma_int32()

  /// General Library Documentation Undocument By General Corporation & Global Corporation & General Developer
  external int value;
}

/// General Library Documentation Undocument By General Corporation & Global Corporation & General Developer
final class ma_atomic_uint64 extends ffi.Struct {
  @ma_uint64()

  /// General Library Documentation Undocument By General Corporation & Global Corporation & General Developer
  external int value;
}

final class __va_list_tag extends ffi.Struct {
  @ffi.UnsignedInt()
  external int gp_offset;

  @ffi.UnsignedInt()
  external int fp_offset;

  external ffi.Pointer<ffi.Void> overflow_arg_area;

  external ffi.Pointer<ffi.Void> reg_save_area;
}

/// General Library Documentation Undocument By General Corporation & Global Corporation & General Developer
final class ma_biquad_config extends ffi.Struct {
  @ffi.Int32()

  /// General Library Documentation Undocument By General Corporation & Global Corporation & General Developer
  external int format;

  @ma_uint32()

  /// General Library Documentation Undocument By General Corporation & Global Corporation & General Developer
  external int channels;

  @ffi.Double()

  /// General Library Documentation Undocument By General Corporation & Global Corporation & General Developer
  external double b0;

  @ffi.Double()

  /// General Library Documentation Undocument By General Corporation & Global Corporation & General Developer
  external double b1;

  @ffi.Double()

  /// General Library Documentation Undocument By General Corporation & Global Corporation & General Developer
  external double b2;

  @ffi.Double()

  /// General Library Documentation Undocument By General Corporation & Global Corporation & General Developer
  external double a0;

  @ffi.Double()

  /// General Library Documentation Undocument By General Corporation & Global Corporation & General Developer
  external double a1;

  @ffi.Double()

  /// General Library Documentation Undocument By General Corporation & Global Corporation & General Developer
  external double a2;
}

/// Low-Pass Filtering
final class ma_lpf1_config extends ffi.Struct {
  @ffi.Int32()

  /// General Library Documentation Undocument By General Corporation & Global Corporation & General Developer
  external int format;

  @ma_uint32()

  /// General Library Documentation Undocument By General Corporation & Global Corporation & General Developer
  external int channels;

  @ma_uint32()

  /// General Library Documentation Undocument By General Corporation & Global Corporation & General Developer
  external int sampleRate;

  @ffi.Double()

  /// General Library Documentation Undocument By General Corporation & Global Corporation & General Developer
  external double cutoffFrequency;

  @ffi.Double()

  /// General Library Documentation Undocument By General Corporation & Global Corporation & General Developer
  external double q;
}

/// Low-Pass Filtering
typedef ma_lpf2_config = ma_lpf1_config;

/// General Library Documentation Undocument By General Corporation & Global Corporation & General Developer
final class ma_lpf_config extends ffi.Struct {
  @ffi.Int32()

  /// General Library Documentation Undocument By General Corporation & Global Corporation & General Developer
  external int format;

  @ma_uint32()

  /// General Library Documentation Undocument By General Corporation & Global Corporation & General Developer
  external int channels;

  @ma_uint32()

  /// General Library Documentation Undocument By General Corporation & Global Corporation & General Developer
  external int sampleRate;

  @ffi.Double()

  /// General Library Documentation Undocument By General Corporation & Global Corporation & General Developer
  external double cutoffFrequency;

  @ma_uint32()

  /// General Library Documentation Undocument By General Corporation & Global Corporation & General Developer
  external int order;
}

/// High-Pass Filtering
final class ma_hpf1_config extends ffi.Struct {
  @ffi.Int32()

  /// General Library Documentation Undocument By General Corporation & Global Corporation & General Developer
  external int format;

  @ma_uint32()

  /// General Library Documentation Undocument By General Corporation & Global Corporation & General Developer
  external int channels;

  @ma_uint32()

  /// General Library Documentation Undocument By General Corporation & Global Corporation & General Developer
  external int sampleRate;

  @ffi.Double()

  /// General Library Documentation Undocument By General Corporation & Global Corporation & General Developer
  external double cutoffFrequency;

  @ffi.Double()

  /// General Library Documentation Undocument By General Corporation & Global Corporation & General Developer
  external double q;
}

/// High-Pass Filtering
typedef ma_hpf2_config = ma_hpf1_config;

/// General Library Documentation Undocument By General Corporation & Global Corporation & General Developer
final class ma_hpf1 extends ffi.Struct {
  @ffi.Int32()

  /// General Library Documentation Undocument By General Corporation & Global Corporation & General Developer
  external int format;

  @ma_uint32()

  /// General Library Documentation Undocument By General Corporation & Global Corporation & General Developer
  external int channels;

  /// General Library Documentation Undocument By General Corporation & Global Corporation & General Developer
  external ma_biquad_coefficient a;

  /// General Library Documentation Undocument By General Corporation & Global Corporation & General Developer
  external ffi.Pointer<ma_biquad_coefficient> pR1;

  /// General Library Documentation Undocument By General Corporation & Global Corporation & General Developer
  external ffi.Pointer<ffi.Void> pHeap;

  @ma_bool32()

  /// General Library Documentation Undocument By General Corporation & Global Corporation & General Developer
  external int ownsHeap;
}

/// General Library Documentation Undocument By General Corporation & Global Corporation & General Developer
final class ma_hpf2 extends ffi.Struct {
  /// General Library Documentation Undocument By General Corporation & Global Corporation & General Developer
  external ma_biquad bq;
}

/// General Library Documentation Undocument By General Corporation & Global Corporation & General Developer
final class ma_hpf_config extends ffi.Struct {
  @ffi.Int32()

  /// General Library Documentation Undocument By General Corporation & Global Corporation & General Developer
  external int format;

  @ma_uint32()

  /// General Library Documentation Undocument By General Corporation & Global Corporation & General Developer
  external int channels;

  @ma_uint32()

  /// General Library Documentation Undocument By General Corporation & Global Corporation & General Developer
  external int sampleRate;

  @ffi.Double()

  /// General Library Documentation Undocument By General Corporation & Global Corporation & General Developer
  external double cutoffFrequency;

  @ma_uint32()

  /// General Library Documentation Undocument By General Corporation & Global Corporation & General Developer
  external int order;
}

/// General Library Documentation Undocument By General Corporation & Global Corporation & General Developer
final class ma_hpf extends ffi.Struct {
  @ffi.Int32()

  /// General Library Documentation Undocument By General Corporation & Global Corporation & General Developer
  external int format;

  @ma_uint32()

  /// General Library Documentation Undocument By General Corporation & Global Corporation & General Developer
  external int channels;

  @ma_uint32()

  /// General Library Documentation Undocument By General Corporation & Global Corporation & General Developer
  external int sampleRate;

  @ma_uint32()

  /// General Library Documentation Undocument By General Corporation & Global Corporation & General Developer
  external int hpf1Count;

  @ma_uint32()

  /// General Library Documentation Undocument By General Corporation & Global Corporation & General Developer
  external int hpf2Count;

  /// General Library Documentation Undocument By General Corporation & Global Corporation & General Developer
  external ffi.Pointer<ma_hpf1> pHPF1;

  /// General Library Documentation Undocument By General Corporation & Global Corporation & General Developer
  external ffi.Pointer<ma_hpf2> pHPF2;

  /// General Library Documentation Undocument By General Corporation & Global Corporation & General Developer
  external ffi.Pointer<ffi.Void> pHeap;

  @ma_bool32()

  /// General Library Documentation Undocument By General Corporation & Global Corporation & General Developer
  external int ownsHeap;
}

/// Band-Pass Filtering
final class ma_bpf2_config extends ffi.Struct {
  @ffi.Int32()

  /// General Library Documentation Undocument By General Corporation & Global Corporation & General Developer
  external int format;

  @ma_uint32()

  /// General Library Documentation Undocument By General Corporation & Global Corporation & General Developer
  external int channels;

  @ma_uint32()

  /// General Library Documentation Undocument By General Corporation & Global Corporation & General Developer
  external int sampleRate;

  @ffi.Double()

  /// General Library Documentation Undocument By General Corporation & Global Corporation & General Developer
  external double cutoffFrequency;

  @ffi.Double()

  /// General Library Documentation Undocument By General Corporation & Global Corporation & General Developer
  external double q;
}

/// General Library Documentation Undocument By General Corporation & Global Corporation & General Developer
final class ma_bpf2 extends ffi.Struct {
  /// General Library Documentation Undocument By General Corporation & Global Corporation & General Developer
  external ma_biquad bq;
}

/// General Library Documentation Undocument By General Corporation & Global Corporation & General Developer
final class ma_bpf_config extends ffi.Struct {
  @ffi.Int32()

  /// General Library Documentation Undocument By General Corporation & Global Corporation & General Developer
  external int format;

  @ma_uint32()

  /// General Library Documentation Undocument By General Corporation & Global Corporation & General Developer
  external int channels;

  @ma_uint32()

  /// General Library Documentation Undocument By General Corporation & Global Corporation & General Developer
  external int sampleRate;

  @ffi.Double()

  /// General Library Documentation Undocument By General Corporation & Global Corporation & General Developer
  external double cutoffFrequency;

  @ma_uint32()

  /// General Library Documentation Undocument By General Corporation & Global Corporation & General Developer
  external int order;
}

/// General Library Documentation Undocument By General Corporation & Global Corporation & General Developer
final class ma_bpf extends ffi.Struct {
  @ffi.Int32()

  /// General Library Documentation Undocument By General Corporation & Global Corporation & General Developer
  external int format;

  @ma_uint32()

  /// General Library Documentation Undocument By General Corporation & Global Corporation & General Developer
  external int channels;

  @ma_uint32()

  /// General Library Documentation Undocument By General Corporation & Global Corporation & General Developer
  external int bpf2Count;

  /// General Library Documentation Undocument By General Corporation & Global Corporation & General Developer
  external ffi.Pointer<ma_bpf2> pBPF2;

  /// General Library Documentation Undocument By General Corporation & Global Corporation & General Developer
  external ffi.Pointer<ffi.Void> pHeap;

  @ma_bool32()

  /// General Library Documentation Undocument By General Corporation & Global Corporation & General Developer
  external int ownsHeap;
}

/// Notching Filter
final class ma_notch2_config extends ffi.Struct {
  @ffi.Int32()

  /// General Library Documentation Undocument By General Corporation & Global Corporation & General Developer
  external int format;

  @ma_uint32()

  /// General Library Documentation Undocument By General Corporation & Global Corporation & General Developer
  external int channels;

  @ma_uint32()

  /// General Library Documentation Undocument By General Corporation & Global Corporation & General Developer
  external int sampleRate;

  @ffi.Double()

  /// General Library Documentation Undocument By General Corporation & Global Corporation & General Developer
  external double q;

  @ffi.Double()

  /// General Library Documentation Undocument By General Corporation & Global Corporation & General Developer
  external double frequency;
}

/// General Library Documentation Undocument By General Corporation & Global Corporation & General Developer
final class ma_notch2 extends ffi.Struct {
  /// General Library Documentation Undocument By General Corporation & Global Corporation & General Developer
  external ma_biquad bq;
}

/// Peaking EQ Filter
final class ma_peak2_config extends ffi.Struct {
  @ffi.Int32()

  /// General Library Documentation Undocument By General Corporation & Global Corporation & General Developer
  external int format;

  @ma_uint32()

  /// General Library Documentation Undocument By General Corporation & Global Corporation & General Developer
  external int channels;

  @ma_uint32()

  /// General Library Documentation Undocument By General Corporation & Global Corporation & General Developer
  external int sampleRate;

  @ffi.Double()

  /// General Library Documentation Undocument By General Corporation & Global Corporation & General Developer
  external double gainDB;

  @ffi.Double()

  /// General Library Documentation Undocument By General Corporation & Global Corporation & General Developer
  external double q;

  @ffi.Double()

  /// General Library Documentation Undocument By General Corporation & Global Corporation & General Developer
  external double frequency;
}

/// General Library Documentation Undocument By General Corporation & Global Corporation & General Developer
final class ma_peak2 extends ffi.Struct {
  /// General Library Documentation Undocument By General Corporation & Global Corporation & General Developer
  external ma_biquad bq;
}

/// Low Shelf Filter
final class ma_loshelf2_config extends ffi.Struct {
  @ffi.Int32()

  /// General Library Documentation Undocument By General Corporation & Global Corporation & General Developer
  external int format;

  @ma_uint32()

  /// General Library Documentation Undocument By General Corporation & Global Corporation & General Developer
  external int channels;

  @ma_uint32()

  /// General Library Documentation Undocument By General Corporation & Global Corporation & General Developer
  external int sampleRate;

  @ffi.Double()

  /// General Library Documentation Undocument By General Corporation & Global Corporation & General Developer
  external double gainDB;

  @ffi.Double()

  /// General Library Documentation Undocument By General Corporation & Global Corporation & General Developer
  external double shelfSlope;

  @ffi.Double()

  /// General Library Documentation Undocument By General Corporation & Global Corporation & General Developer
  external double frequency;
}

/// General Library Documentation Undocument By General Corporation & Global Corporation & General Developer
final class ma_loshelf2 extends ffi.Struct {
  /// General Library Documentation Undocument By General Corporation & Global Corporation & General Developer
  external ma_biquad bq;
}

/// High Shelf Filter
final class ma_hishelf2_config extends ffi.Struct {
  @ffi.Int32()

  /// General Library Documentation Undocument By General Corporation & Global Corporation & General Developer
  external int format;

  @ma_uint32()

  /// General Library Documentation Undocument By General Corporation & Global Corporation & General Developer
  external int channels;

  @ma_uint32()

  /// General Library Documentation Undocument By General Corporation & Global Corporation & General Developer
  external int sampleRate;

  @ffi.Double()

  /// General Library Documentation Undocument By General Corporation & Global Corporation & General Developer
  external double gainDB;

  @ffi.Double()

  /// General Library Documentation Undocument By General Corporation & Global Corporation & General Developer
  external double shelfSlope;

  @ffi.Double()

  /// General Library Documentation Undocument By General Corporation & Global Corporation & General Developer
  external double frequency;
}

/// General Library Documentation Undocument By General Corporation & Global Corporation & General Developer
final class ma_hishelf2 extends ffi.Struct {
  /// General Library Documentation Undocument By General Corporation & Global Corporation & General Developer
  external ma_biquad bq;
}

/// General Library Documentation Undocument By General Corporation & Global Corporation & General Developer
final class ma_delay_config extends ffi.Struct {
  @ma_uint32()

  /// General Library Documentation Undocument By General Corporation & Global Corporation & General Developer
  external int channels;

  @ma_uint32()

  /// General Library Documentation Undocument By General Corporation & Global Corporation & General Developer
  external int sampleRate;

  @ma_uint32()

  /// General Library Documentation Undocument By General Corporation & Global Corporation & General Developer
  external int delayInFrames;

  @ma_bool32()

  /// General Library Documentation Undocument By General Corporation & Global Corporation & General Developer
  external int delayStart;

  @ffi.Float()

  /// General Library Documentation Undocument By General Corporation & Global Corporation & General Developer
  external double wet;

  @ffi.Float()

  /// General Library Documentation Undocument By General Corporation & Global Corporation & General Developer
  external double dry;

  @ffi.Float()

  /// General Library Documentation Undocument By General Corporation & Global Corporation & General Developer
  external double decay;
}

/// General Library Documentation Undocument By General Corporation & Global Corporation & General Developer
final class ma_delay extends ffi.Struct {
  /// General Library Documentation Undocument By General Corporation & Global Corporation & General Developer
  external ma_delay_config config;

  @ma_uint32()

  /// General Library Documentation Undocument By General Corporation & Global Corporation & General Developer
  external int cursor;

  @ma_uint32()

  /// General Library Documentation Undocument By General Corporation & Global Corporation & General Developer
  external int bufferSizeInFrames;

  /// General Library Documentation Undocument By General Corporation & Global Corporation & General Developer
  external ffi.Pointer<ffi.Float> pBuffer;
}

/// General Library Documentation Undocument By General Corporation & Global Corporation & General Developer
final class ma_gainer_config extends ffi.Struct {
  @ma_uint32()

  /// General Library Documentation Undocument By General Corporation & Global Corporation & General Developer
  external int channels;

  @ma_uint32()

  /// General Library Documentation Undocument By General Corporation & Global Corporation & General Developer
  external int smoothTimeInFrames;
}

/// General Library Documentation Undocument By General Corporation & Global Corporation & General Developer
final class ma_gainer extends ffi.Struct {
  /// General Library Documentation Undocument By General Corporation & Global Corporation & General Developer
  external ma_gainer_config config;

  @ma_uint32()

  /// General Library Documentation Undocument By General Corporation & Global Corporation & General Developer
  external int t;

  @ffi.Float()

  /// General Library Documentation Undocument By General Corporation & Global Corporation & General Developer
  external double masterVolume;

  /// General Library Documentation Undocument By General Corporation & Global Corporation & General Developer
  external ffi.Pointer<ffi.Float> pOldGains;

  /// General Library Documentation Undocument By General Corporation & Global Corporation & General Developer
  external ffi.Pointer<ffi.Float> pNewGains;

  /// General Library Documentation Undocument By General Corporation & Global Corporation & General Developer
  external ffi.Pointer<ffi.Void> pHeap;

  @ma_bool32()

  /// General Library Documentation Undocument By General Corporation & Global Corporation & General Developer
  external int ownsHeap;
}

/// General Library Documentation Undocument By General Corporation & Global Corporation & General Developer
abstract class ma_pan_mode {
  /// General Library Documentation Undocument By General Corporation & Global Corporation & General Developer
  static const int ma_pan_mode_balance = 0;

  /// General Library Documentation Undocument By General Corporation & Global Corporation & General Developer
  static const int ma_pan_mode_pan = 1;
}

/// General Library Documentation Undocument By General Corporation & Global Corporation & General Developer
final class ma_panner_config extends ffi.Struct {
  @ffi.Int32()

  /// General Library Documentation Undocument By General Corporation & Global Corporation & General Developer
  external int format;

  @ma_uint32()

  /// General Library Documentation Undocument By General Corporation & Global Corporation & General Developer
  external int channels;

  @ffi.Int32()

  /// General Library Documentation Undocument By General Corporation & Global Corporation & General Developer
  external int mode;

  @ffi.Float()

  /// General Library Documentation Undocument By General Corporation & Global Corporation & General Developer
  external double pan;
}

/// General Library Documentation Undocument By General Corporation & Global Corporation & General Developer
final class ma_panner extends ffi.Struct {
  @ffi.Int32()

  /// General Library Documentation Undocument By General Corporation & Global Corporation & General Developer
  external int format;

  @ma_uint32()

  /// General Library Documentation Undocument By General Corporation & Global Corporation & General Developer
  external int channels;

  @ffi.Int32()

  /// General Library Documentation Undocument By General Corporation & Global Corporation & General Developer
  external int mode;

  @ffi.Float()

  /// General Library Documentation Undocument By General Corporation & Global Corporation & General Developer
  external double pan;
}

/// General Library Documentation Undocument By General Corporation & Global Corporation & General Developer
final class ma_fader_config extends ffi.Struct {
  @ffi.Int32()

  /// General Library Documentation Undocument By General Corporation & Global Corporation & General Developer
  external int format;

  @ma_uint32()

  /// General Library Documentation Undocument By General Corporation & Global Corporation & General Developer
  external int channels;

  @ma_uint32()

  /// General Library Documentation Undocument By General Corporation & Global Corporation & General Developer
  external int sampleRate;
}

/// General Library Documentation Undocument By General Corporation & Global Corporation & General Developer
final class ma_fader extends ffi.Struct {
  /// General Library Documentation Undocument By General Corporation & Global Corporation & General Developer
  external ma_fader_config config;

  @ffi.Float()

  /// General Library Documentation Undocument By General Corporation & Global Corporation & General Developer
  external double volumeBeg;

  @ffi.Float()

  /// General Library Documentation Undocument By General Corporation & Global Corporation & General Developer
  external double volumeEnd;

  @ma_uint64()

  /// General Library Documentation Undocument By General Corporation & Global Corporation & General Developer
  external int lengthInFrames;

  @ma_int64()

  /// General Library Documentation Undocument By General Corporation & Global Corporation & General Developer
  external int cursorInFrames;
}

/// General Library Documentation Undocument By General Corporation & Global Corporation & General Developer
final class ma_vec3f extends ffi.Struct {
  @ffi.Float()

  /// General Library Documentation Undocument By General Corporation & Global Corporation & General Developer
  external double x;

  @ffi.Float()

  /// General Library Documentation Undocument By General Corporation & Global Corporation & General Developer
  external double y;

  @ffi.Float()

  /// General Library Documentation Undocument By General Corporation & Global Corporation & General Developer
  external double z;
}

/// General Library Documentation Undocument By General Corporation & Global Corporation & General Developer
final class ma_atomic_vec3f extends ffi.Struct {
  /// General Library Documentation Undocument By General Corporation & Global Corporation & General Developer
  external ma_vec3f v;

  @ma_spinlock()

  /// General Library Documentation Undocument By General Corporation & Global Corporation & General Developer
  external int lock;
}

/// General Library Documentation Undocument By General Corporation & Global Corporation & General Developer
typedef ma_spinlock = ma_uint32;

/// General Library Documentation Undocument By General Corporation & Global Corporation & General Developer
abstract class ma_attenuation_model {
  /// General Library Documentation Undocument By General Corporation & Global Corporation & General Developer
  static const int ma_attenuation_model_none = 0;

  /// General Library Documentation Undocument By General Corporation & Global Corporation & General Developer
  static const int ma_attenuation_model_inverse = 1;

  /// General Library Documentation Undocument By General Corporation & Global Corporation & General Developer
  static const int ma_attenuation_model_linear = 2;

  /// General Library Documentation Undocument By General Corporation & Global Corporation & General Developer
  static const int ma_attenuation_model_exponential = 3;
}

/// General Library Documentation Undocument By General Corporation & Global Corporation & General Developer
abstract class ma_positioning {
  /// General Library Documentation Undocument By General Corporation & Global Corporation & General Developer
  static const int ma_positioning_absolute = 0;

  /// General Library Documentation Undocument By General Corporation & Global Corporation & General Developer
  static const int ma_positioning_relative = 1;
}

/// General Library Documentation Undocument By General Corporation & Global Corporation & General Developer
abstract class ma_handedness {
  /// General Library Documentation Undocument By General Corporation & Global Corporation & General Developer
  static const int ma_handedness_right = 0;

  /// General Library Documentation Undocument By General Corporation & Global Corporation & General Developer
  static const int ma_handedness_left = 1;
}

/// General Library Documentation Undocument By General Corporation & Global Corporation & General Developer
final class ma_spatializer_listener_config extends ffi.Struct {
  @ma_uint32()

  /// General Library Documentation Undocument By General Corporation & Global Corporation & General Developer
  external int channelsOut;

  /// General Library Documentation Undocument By General Corporation & Global Corporation & General Developer
  external ffi.Pointer<ma_channel> pChannelMapOut;

  @ffi.Int32()

  /// General Library Documentation Undocument By General Corporation & Global Corporation & General Developer
  external int handedness;

  @ffi.Float()

  /// General Library Documentation Undocument By General Corporation & Global Corporation & General Developer
  external double coneInnerAngleInRadians;

  @ffi.Float()

  /// General Library Documentation Undocument By General Corporation & Global Corporation & General Developer
  external double coneOuterAngleInRadians;

  @ffi.Float()

  /// General Library Documentation Undocument By General Corporation & Global Corporation & General Developer
  external double coneOuterGain;

  @ffi.Float()

  /// General Library Documentation Undocument By General Corporation & Global Corporation & General Developer
  external double speedOfSound;

  /// General Library Documentation Undocument By General Corporation & Global Corporation & General Developer
  external ma_vec3f worldUp;
}

/// General Library Documentation Undocument By General Corporation & Global Corporation & General Developer
final class ma_spatializer_listener extends ffi.Struct {
  /// General Library Documentation Undocument By General Corporation & Global Corporation & General Developer
  external ma_spatializer_listener_config config;

  /// General Library Documentation Undocument By General Corporation & Global Corporation & General Developer
  external ma_atomic_vec3f position;

  /// General Library Documentation Undocument By General Corporation & Global Corporation & General Developer
  external ma_atomic_vec3f direction;

  /// General Library Documentation Undocument By General Corporation & Global Corporation & General Developer
  external ma_atomic_vec3f velocity;

  @ma_bool32()

  /// General Library Documentation Undocument By General Corporation & Global Corporation & General Developer
  external int isEnabled;

  @ma_bool32()

  /// General Library Documentation Undocument By General Corporation & Global Corporation & General Developer
  external int ownsHeap;

  /// General Library Documentation Undocument By General Corporation & Global Corporation & General Developer
  external ffi.Pointer<ffi.Void> pHeap;
}

/// General Library Documentation Undocument By General Corporation & Global Corporation & General Developer
final class ma_spatializer_config extends ffi.Struct {
  @ma_uint32()

  /// General Library Documentation Undocument By General Corporation & Global Corporation & General Developer
  external int channelsIn;

  @ma_uint32()

  /// General Library Documentation Undocument By General Corporation & Global Corporation & General Developer
  external int channelsOut;

  /// General Library Documentation Undocument By General Corporation & Global Corporation & General Developer
  external ffi.Pointer<ma_channel> pChannelMapIn;

  @ffi.Int32()

  /// General Library Documentation Undocument By General Corporation & Global Corporation & General Developer
  external int attenuationModel;

  @ffi.Int32()

  /// General Library Documentation Undocument By General Corporation & Global Corporation & General Developer
  external int positioning;

  @ffi.Int32()

  /// General Library Documentation Undocument By General Corporation & Global Corporation & General Developer
  external int handedness;

  @ffi.Float()

  /// General Library Documentation Undocument By General Corporation & Global Corporation & General Developer
  external double minGain;

  @ffi.Float()

  /// General Library Documentation Undocument By General Corporation & Global Corporation & General Developer
  external double maxGain;

  @ffi.Float()

  /// General Library Documentation Undocument By General Corporation & Global Corporation & General Developer
  external double minDistance;

  @ffi.Float()

  /// General Library Documentation Undocument By General Corporation & Global Corporation & General Developer
  external double maxDistance;

  @ffi.Float()

  /// General Library Documentation Undocument By General Corporation & Global Corporation & General Developer
  external double rolloff;

  @ffi.Float()

  /// General Library Documentation Undocument By General Corporation & Global Corporation & General Developer
  external double coneInnerAngleInRadians;

  @ffi.Float()

  /// General Library Documentation Undocument By General Corporation & Global Corporation & General Developer
  external double coneOuterAngleInRadians;

  @ffi.Float()

  /// General Library Documentation Undocument By General Corporation & Global Corporation & General Developer
  external double coneOuterGain;

  @ffi.Float()

  /// General Library Documentation Undocument By General Corporation & Global Corporation & General Developer
  external double dopplerFactor;

  @ffi.Float()

  /// General Library Documentation Undocument By General Corporation & Global Corporation & General Developer
  external double directionalAttenuationFactor;

  @ffi.Float()

  /// General Library Documentation Undocument By General Corporation & Global Corporation & General Developer
  external double minSpatializationChannelGain;

  @ma_uint32()

  /// General Library Documentation Undocument By General Corporation & Global Corporation & General Developer
  external int gainSmoothTimeInFrames;
}

/// General Library Documentation Undocument By General Corporation & Global Corporation & General Developer
final class ma_spatializer extends ffi.Struct {
  @ma_uint32()

  /// General Library Documentation Undocument By General Corporation & Global Corporation & General Developer
  external int channelsIn;

  @ma_uint32()

  /// General Library Documentation Undocument By General Corporation & Global Corporation & General Developer
  external int channelsOut;

  /// General Library Documentation Undocument By General Corporation & Global Corporation & General Developer
  external ffi.Pointer<ma_channel> pChannelMapIn;

  @ffi.Int32()

  /// General Library Documentation Undocument By General Corporation & Global Corporation & General Developer
  external int attenuationModel;

  @ffi.Int32()

  /// General Library Documentation Undocument By General Corporation & Global Corporation & General Developer
  external int positioning;

  @ffi.Int32()

  /// General Library Documentation Undocument By General Corporation & Global Corporation & General Developer
  external int handedness;

  @ffi.Float()

  /// General Library Documentation Undocument By General Corporation & Global Corporation & General Developer
  external double minGain;

  @ffi.Float()

  /// General Library Documentation Undocument By General Corporation & Global Corporation & General Developer
  external double maxGain;

  @ffi.Float()

  /// General Library Documentation Undocument By General Corporation & Global Corporation & General Developer
  external double minDistance;

  @ffi.Float()

  /// General Library Documentation Undocument By General Corporation & Global Corporation & General Developer
  external double maxDistance;

  @ffi.Float()

  /// General Library Documentation Undocument By General Corporation & Global Corporation & General Developer
  external double rolloff;

  @ffi.Float()

  /// General Library Documentation Undocument By General Corporation & Global Corporation & General Developer
  external double coneInnerAngleInRadians;

  @ffi.Float()

  /// General Library Documentation Undocument By General Corporation & Global Corporation & General Developer
  external double coneOuterAngleInRadians;

  @ffi.Float()

  /// General Library Documentation Undocument By General Corporation & Global Corporation & General Developer
  external double coneOuterGain;

  @ffi.Float()

  /// General Library Documentation Undocument By General Corporation & Global Corporation & General Developer
  external double dopplerFactor;

  @ffi.Float()

  /// General Library Documentation Undocument By General Corporation & Global Corporation & General Developer
  external double directionalAttenuationFactor;

  @ma_uint32()

  /// General Library Documentation Undocument By General Corporation & Global Corporation & General Developer
  external int gainSmoothTimeInFrames;

  /// General Library Documentation Undocument By General Corporation & Global Corporation & General Developer
  external ma_atomic_vec3f position;

  /// General Library Documentation Undocument By General Corporation & Global Corporation & General Developer
  external ma_atomic_vec3f direction;

  /// General Library Documentation Undocument By General Corporation & Global Corporation & General Developer
  external ma_atomic_vec3f velocity;

  @ffi.Float()

  /// General Library Documentation Undocument By General Corporation & Global Corporation & General Developer
  external double dopplerPitch;

  @ffi.Float()

  /// General Library Documentation Undocument By General Corporation & Global Corporation & General Developer
  external double minSpatializationChannelGain;

  /// General Library Documentation Undocument By General Corporation & Global Corporation & General Developer
  external ma_gainer gainer;

  /// General Library Documentation Undocument By General Corporation & Global Corporation & General Developer
  external ffi.Pointer<ffi.Float> pNewChannelGainsOut;

  /// General Library Documentation Undocument By General Corporation & Global Corporation & General Developer
  external ffi.Pointer<ffi.Void> pHeap;

  @ma_bool32()

  /// General Library Documentation Undocument By General Corporation & Global Corporation & General Developer
  external int ownsHeap;
}

/// General Library Documentation Undocument By General Corporation & Global Corporation & General Developer
abstract class ma_mono_expansion_mode {
  /// General Library Documentation Undocument By General Corporation & Global Corporation & General Developer
  static const int ma_mono_expansion_mode_duplicate = 0;

  /// General Library Documentation Undocument By General Corporation & Global Corporation & General Developer
  static const int ma_mono_expansion_mode_average = 1;

  /// General Library Documentation Undocument By General Corporation & Global Corporation & General Developer
  static const int ma_mono_expansion_mode_stereo_only = 2;

  /// General Library Documentation Undocument By General Corporation & Global Corporation & General Developer
  static const int ma_mono_expansion_mode_default = 0;
}

/// General Library Documentation Undocument By General Corporation & Global Corporation & General Developer
final class ma_channel_converter_config extends ffi.Struct {
  @ffi.Int32()

  /// General Library Documentation Undocument By General Corporation & Global Corporation & General Developer
  external int format;

  @ma_uint32()

  /// General Library Documentation Undocument By General Corporation & Global Corporation & General Developer
  external int channelsIn;

  @ma_uint32()

  /// General Library Documentation Undocument By General Corporation & Global Corporation & General Developer
  external int channelsOut;

  /// General Library Documentation Undocument By General Corporation & Global Corporation & General Developer
  external ffi.Pointer<ma_channel> pChannelMapIn;

  /// General Library Documentation Undocument By General Corporation & Global Corporation & General Developer
  external ffi.Pointer<ma_channel> pChannelMapOut;

  @ffi.Int32()

  /// General Library Documentation Undocument By General Corporation & Global Corporation & General Developer
  external int mixingMode;

  @ma_bool32()

  /// General Library Documentation Undocument By General Corporation & Global Corporation & General Developer
  external int calculateLFEFromSpatialChannels;

  /// General Library Documentation Undocument By General Corporation & Global Corporation & General Developer
  external ffi.Pointer<ffi.Pointer<ffi.Float>> ppWeights;
}

/// Data Conversion
final class ma_data_converter_config extends ffi.Struct {
  @ffi.Int32()

  /// General Library Documentation Undocument By General Corporation & Global Corporation & General Developer
  external int formatIn;

  @ffi.Int32()

  /// General Library Documentation Undocument By General Corporation & Global Corporation & General Developer
  external int formatOut;

  @ma_uint32()

  /// General Library Documentation Undocument By General Corporation & Global Corporation & General Developer
  external int channelsIn;

  @ma_uint32()

  /// General Library Documentation Undocument By General Corporation & Global Corporation & General Developer
  external int channelsOut;

  @ma_uint32()

  /// General Library Documentation Undocument By General Corporation & Global Corporation & General Developer
  external int sampleRateIn;

  @ma_uint32()

  /// General Library Documentation Undocument By General Corporation & Global Corporation & General Developer
  external int sampleRateOut;

  /// General Library Documentation Undocument By General Corporation & Global Corporation & General Developer
  external ffi.Pointer<ma_channel> pChannelMapIn;

  /// General Library Documentation Undocument By General Corporation & Global Corporation & General Developer
  external ffi.Pointer<ma_channel> pChannelMapOut;

  @ffi.Int32()

  /// General Library Documentation Undocument By General Corporation & Global Corporation & General Developer
  external int ditherMode;

  @ffi.Int32()

  /// General Library Documentation Undocument By General Corporation & Global Corporation & General Developer
  external int channelMixMode;

  @ma_bool32()

  /// General Library Documentation Undocument By General Corporation & Global Corporation & General Developer
  external int calculateLFEFromSpatialChannels;

  /// General Library Documentation Undocument By General Corporation & Global Corporation & General Developer
  external ffi.Pointer<ffi.Pointer<ffi.Float>> ppChannelWeights;

  @ma_bool32()

  /// General Library Documentation Undocument By General Corporation & Global Corporation & General Developer
  external int allowDynamicSampleRate;

  /// General Library Documentation Undocument By General Corporation & Global Corporation & General Developer
  external ma_resampler_config resampling;
}

/// General Library Documentation Undocument By General Corporation & Global Corporation & General Developer
final class ma_data_source_config extends ffi.Struct {
  /// General Library Documentation Undocument By General Corporation & Global Corporation & General Developer
  external ffi.Pointer<ma_data_source_vtable> vtable;
}

/// General Library Documentation Undocument By General Corporation & Global Corporation & General Developer
final class ma_audio_buffer_ref extends ffi.Struct {
  /// General Library Documentation Undocument By General Corporation & Global Corporation & General Developer
  external ma_data_source_base ds;

  @ffi.Int32()

  /// General Library Documentation Undocument By General Corporation & Global Corporation & General Developer
  external int format;

  @ma_uint32()

  /// General Library Documentation Undocument By General Corporation & Global Corporation & General Developer
  external int channels;

  @ma_uint32()

  /// General Library Documentation Undocument By General Corporation & Global Corporation & General Developer
  external int sampleRate;

  @ma_uint64()

  /// General Library Documentation Undocument By General Corporation & Global Corporation & General Developer
  external int cursor;

  @ma_uint64()

  /// General Library Documentation Undocument By General Corporation & Global Corporation & General Developer
  external int sizeInFrames;

  /// General Library Documentation Undocument By General Corporation & Global Corporation & General Developer
  external ffi.Pointer<ffi.Void> pData;
}

/// General Library Documentation Undocument By General Corporation & Global Corporation & General Developer
final class ma_audio_buffer_config extends ffi.Struct {
  @ffi.Int32()

  /// General Library Documentation Undocument By General Corporation & Global Corporation & General Developer
  external int format;

  @ma_uint32()

  /// General Library Documentation Undocument By General Corporation & Global Corporation & General Developer
  external int channels;

  @ma_uint32()

  /// General Library Documentation Undocument By General Corporation & Global Corporation & General Developer
  external int sampleRate;

  @ma_uint64()

  /// General Library Documentation Undocument By General Corporation & Global Corporation & General Developer
  external int sizeInFrames;

  /// General Library Documentation Undocument By General Corporation & Global Corporation & General Developer
  external ffi.Pointer<ffi.Void> pData;

  /// General Library Documentation Undocument By General Corporation & Global Corporation & General Developer
  external ma_allocation_callbacks allocationCallbacks;
}

/// General Library Documentation Undocument By General Corporation & Global Corporation & General Developer
final class ma_audio_buffer extends ffi.Struct {
  /// General Library Documentation Undocument By General Corporation & Global Corporation & General Developer
  external ma_audio_buffer_ref ref;

  /// General Library Documentation Undocument By General Corporation & Global Corporation & General Developer
  external ma_allocation_callbacks allocationCallbacks;

  @ma_bool32()

  /// General Library Documentation Undocument By General Corporation & Global Corporation & General Developer
  external int ownsData;

  @ffi.Array.multi([1])

  /// General Library Documentation Undocument By General Corporation & Global Corporation & General Developer
  external ffi.Array<ma_uint8> pExtraData;
}

/// General Library Documentation Undocument By General Corporation & Global Corporation & General Developer
final class ma_paged_audio_buffer_page extends ffi.Struct {
  /// General Library Documentation Undocument By General Corporation & Global Corporation & General Developer
  external ffi.Pointer<ma_paged_audio_buffer_page> pNext;

  @ma_uint64()

  /// General Library Documentation Undocument By General Corporation & Global Corporation & General Developer
  external int sizeInFrames;

  @ffi.Array.multi([1])

  /// General Library Documentation Undocument By General Corporation & Global Corporation & General Developer
  external ffi.Array<ma_uint8> pAudioData;
}

/// General Library Documentation Undocument By General Corporation & Global Corporation & General Developer
final class ma_paged_audio_buffer_data extends ffi.Struct {
  @ffi.Int32()

  /// General Library Documentation Undocument By General Corporation & Global Corporation & General Developer
  external int format;

  @ma_uint32()

  /// General Library Documentation Undocument By General Corporation & Global Corporation & General Developer
  external int channels;

  /// General Library Documentation Undocument By General Corporation & Global Corporation & General Developer
  external ma_paged_audio_buffer_page head;

  /// General Library Documentation Undocument By General Corporation & Global Corporation & General Developer
  external ffi.Pointer<ma_paged_audio_buffer_page> pTail;
}

/// General Library Documentation Undocument By General Corporation & Global Corporation & General Developer
final class ma_paged_audio_buffer_config extends ffi.Struct {
  /// General Library Documentation Undocument By General Corporation & Global Corporation & General Developer
  external ffi.Pointer<ma_paged_audio_buffer_data> pData;
}

/// General Library Documentation Undocument By General Corporation & Global Corporation & General Developer
final class ma_paged_audio_buffer extends ffi.Struct {
  /// General Library Documentation Undocument By General Corporation & Global Corporation & General Developer
  external ma_data_source_base ds;

  /// General Library Documentation Undocument By General Corporation & Global Corporation & General Developer
  external ffi.Pointer<ma_paged_audio_buffer_data> pData;

  /// General Library Documentation Undocument By General Corporation & Global Corporation & General Developer
  external ffi.Pointer<ma_paged_audio_buffer_page> pCurrent;

  @ma_uint64()

  /// General Library Documentation Undocument By General Corporation & Global Corporation & General Developer
  external int relativeCursor;

  @ma_uint64()

  /// General Library Documentation Undocument By General Corporation & Global Corporation & General Developer
  external int absoluteCursor;
}

/// General Library Documentation Undocument By General Corporation & Global Corporation & General Developer
final class ma_fence extends ffi.Struct {
  /// General Library Documentation Undocument By General Corporation & Global Corporation & General Developer
  external ma_event e;

  @ma_uint32()

  /// General Library Documentation Undocument By General Corporation & Global Corporation & General Developer
  external int counter;
}

/// General Library Documentation Undocument By General Corporation & Global Corporation & General Developer
final class ma_async_notification_callbacks extends ffi.Struct {
  /// General Library Documentation Undocument By General Corporation & Global Corporation & General Developer
  external ffi.Pointer<
      ffi.NativeFunction<
          ffi.Void Function(
              ffi.Pointer<ma_async_notification> pNotification)>> onSignal;
}

/// General Library Documentation Undocument By General Corporation & Global Corporation & General Developer
typedef ma_async_notification = ffi.Void;

/// General Library Documentation Undocument By General Corporation & Global Corporation & General Developer
typedef Dartma_async_notification = void;

/// General Library Documentation Undocument By General Corporation & Global Corporation & General Developer
final class ma_async_notification_poll extends ffi.Struct {
  /// General Library Documentation Undocument By General Corporation & Global Corporation & General Developer
  external ma_async_notification_callbacks cb;

  @ma_bool32()

  /// General Library Documentation Undocument By General Corporation & Global Corporation & General Developer
  external int signalled;
}

/// General Library Documentation Undocument By General Corporation & Global Corporation & General Developer
final class ma_async_notification_event extends ffi.Struct {
  /// General Library Documentation Undocument By General Corporation & Global Corporation & General Developer
  external ma_async_notification_callbacks cb;

  /// General Library Documentation Undocument By General Corporation & Global Corporation & General Developer
  external ma_event e;
}

/// Job Queue
final class ma_slot_allocator_config extends ffi.Struct {
  @ma_uint32()

  /// General Library Documentation Undocument By General Corporation & Global Corporation & General Developer
  external int capacity;
}

/// General Library Documentation Undocument By General Corporation & Global Corporation & General Developer
final class ma_slot_allocator_group extends ffi.Struct {
  @ma_uint32()

  /// General Library Documentation Undocument By General Corporation & Global Corporation & General Developer
  external int bitfield;
}

/// General Library Documentation Undocument By General Corporation & Global Corporation & General Developer
final class ma_slot_allocator extends ffi.Struct {
  /// General Library Documentation Undocument By General Corporation & Global Corporation & General Developer
  external ffi.Pointer<ma_slot_allocator_group> pGroups;

  /// General Library Documentation Undocument By General Corporation & Global Corporation & General Developer
  external ffi.Pointer<ma_uint32> pSlots;

  @ma_uint32()

  /// General Library Documentation Undocument By General Corporation & Global Corporation & General Developer
  external int count;

  @ma_uint32()

  /// General Library Documentation Undocument By General Corporation & Global Corporation & General Developer
  external int capacity;

  @ma_bool32()

  /// General Library Documentation Undocument By General Corporation & Global Corporation & General Developer
  external int ownsHeap;

  /// General Library Documentation Undocument By General Corporation & Global Corporation & General Developer
  external ffi.Pointer<ffi.Void> pHeap;
}

/// General Library Documentation Undocument By General Corporation & Global Corporation & General Developer
final class ma_job extends ffi.Struct {
  /// General Library Documentation Undocument By General Corporation & Global Corporation & General Developer
  external UnnamedUnion10 toc;

  @ma_uint64()

  /// General Library Documentation Undocument By General Corporation & Global Corporation & General Developer
  external int next;

  @ma_uint32()

  /// General Library Documentation Undocument By General Corporation & Global Corporation & General Developer
  external int order;

  /// General Library Documentation Undocument By General Corporation & Global Corporation & General Developer
  external UnnamedUnion11 data;
}

/// General Library Documentation Undocument By General Corporation & Global Corporation & General Developer
final class UnnamedUnion10 extends ffi.Union {
  /// General Library Documentation Undocument By General Corporation & Global Corporation & General Developer
  external UnnamedStruct33 breakup;

  @ma_uint64()

  /// General Library Documentation Undocument By General Corporation & Global Corporation & General Developer
  external int allocation;
}

/// General Library Documentation Undocument By General Corporation & Global Corporation & General Developer
final class UnnamedStruct33 extends ffi.Struct {
  @ma_uint16()

  /// General Library Documentation Undocument By General Corporation & Global Corporation & General Developer
  external int code;

  @ma_uint16()

  /// General Library Documentation Undocument By General Corporation & Global Corporation & General Developer
  external int slot;

  @ma_uint32()

  /// General Library Documentation Undocument By General Corporation & Global Corporation & General Developer
  external int refcount;
}

/// General Library Documentation Undocument By General Corporation & Global Corporation & General Developer
final class UnnamedUnion11 extends ffi.Union {
  /// General Library Documentation Undocument By General Corporation & Global Corporation & General Developer
  external UnnamedStruct34 custom;

  /// General Library Documentation Undocument By General Corporation & Global Corporation & General Developer
  external UnnamedUnion12 resourceManager;

  /// General Library Documentation Undocument By General Corporation & Global Corporation & General Developer
  external UnnamedUnion13 device;
}

/// General Library Documentation Undocument By General Corporation & Global Corporation & General Developer
final class UnnamedStruct34 extends ffi.Struct {
  /// General Library Documentation Undocument By General Corporation & Global Corporation & General Developer
  external ma_job_proc proc;

  @ma_uintptr()

  /// General Library Documentation Undocument By General Corporation & Global Corporation & General Developer
  external int data0;

  @ma_uintptr()

  /// General Library Documentation Undocument By General Corporation & Global Corporation & General Developer
  external int data1;
}

/// General Library Documentation Undocument By General Corporation & Global Corporation & General Developer
typedef ma_job_proc = ffi.Pointer<ffi.NativeFunction<ma_job_procFunction>>;

/// General Library Documentation Undocument By General Corporation & Global Corporation & General Developer
typedef ma_job_procFunction = ffi.Int32 Function(ffi.Pointer<ma_job> pJob);

/// General Library Documentation Undocument By General Corporation & Global Corporation & General Developer
typedef Dartma_job_procFunction = int Function(ffi.Pointer<ma_job> pJob);

/// General Library Documentation Undocument By General Corporation & Global Corporation & General Developer
typedef ma_uintptr = ma_uint64;

/// General Library Documentation Undocument By General Corporation & Global Corporation & General Developer
final class UnnamedUnion12 extends ffi.Union {
  /// General Library Documentation Undocument By General Corporation & Global Corporation & General Developer
  external UnnamedStruct35 loadDataBufferNode;

  /// General Library Documentation Undocument By General Corporation & Global Corporation & General Developer
  external UnnamedStruct36 freeDataBufferNode;

  /// General Library Documentation Undocument By General Corporation & Global Corporation & General Developer
  external UnnamedStruct37 pageDataBufferNode;

  /// General Library Documentation Undocument By General Corporation & Global Corporation & General Developer
  external UnnamedStruct38 loadDataBuffer;

  /// General Library Documentation Undocument By General Corporation & Global Corporation & General Developer
  external UnnamedStruct39 freeDataBuffer;

  /// General Library Documentation Undocument By General Corporation & Global Corporation & General Developer
  external UnnamedStruct40 loadDataStream;

  /// General Library Documentation Undocument By General Corporation & Global Corporation & General Developer
  external UnnamedStruct41 freeDataStream;

  /// General Library Documentation Undocument By General Corporation & Global Corporation & General Developer
  external UnnamedStruct42 pageDataStream;

  /// General Library Documentation Undocument By General Corporation & Global Corporation & General Developer
  external UnnamedStruct43 seekDataStream;
}

/// General Library Documentation Undocument By General Corporation & Global Corporation & General Developer
final class UnnamedStruct35 extends ffi.Struct {
  /// General Library Documentation Undocument By General Corporation & Global Corporation & General Developer
  external ffi.Pointer<ffi.Void> pResourceManager;

  /// General Library Documentation Undocument By General Corporation & Global Corporation & General Developer
  external ffi.Pointer<ffi.Void> pDataBufferNode;

  /// General Library Documentation Undocument By General Corporation & Global Corporation & General Developer
  external ffi.Pointer<ffi.Char> pFilePath;

  /// General Library Documentation Undocument By General Corporation & Global Corporation & General Developer
  external ffi.Pointer<ffi.WChar> pFilePathW;

  @ma_uint32()

  /// General Library Documentation Undocument By General Corporation & Global Corporation & General Developer
  external int flags;

  /// General Library Documentation Undocument By General Corporation & Global Corporation & General Developer
  external ffi.Pointer<ma_async_notification> pInitNotification;

  /// General Library Documentation Undocument By General Corporation & Global Corporation & General Developer
  external ffi.Pointer<ma_async_notification> pDoneNotification;

  /// General Library Documentation Undocument By General Corporation & Global Corporation & General Developer
  external ffi.Pointer<ma_fence> pInitFence;

  /// General Library Documentation Undocument By General Corporation & Global Corporation & General Developer
  external ffi.Pointer<ma_fence> pDoneFence;
}

/// General Library Documentation Undocument By General Corporation & Global Corporation & General Developer
final class UnnamedStruct36 extends ffi.Struct {
  /// General Library Documentation Undocument By General Corporation & Global Corporation & General Developer
  external ffi.Pointer<ffi.Void> pResourceManager;

  /// General Library Documentation Undocument By General Corporation & Global Corporation & General Developer
  external ffi.Pointer<ffi.Void> pDataBufferNode;

  /// General Library Documentation Undocument By General Corporation & Global Corporation & General Developer
  external ffi.Pointer<ma_async_notification> pDoneNotification;

  /// General Library Documentation Undocument By General Corporation & Global Corporation & General Developer
  external ffi.Pointer<ma_fence> pDoneFence;
}

/// General Library Documentation Undocument By General Corporation & Global Corporation & General Developer
final class UnnamedStruct37 extends ffi.Struct {
  /// General Library Documentation Undocument By General Corporation & Global Corporation & General Developer
  external ffi.Pointer<ffi.Void> pResourceManager;

  /// General Library Documentation Undocument By General Corporation & Global Corporation & General Developer
  external ffi.Pointer<ffi.Void> pDataBufferNode;

  /// General Library Documentation Undocument By General Corporation & Global Corporation & General Developer
  external ffi.Pointer<ffi.Void> pDecoder;

  /// General Library Documentation Undocument By General Corporation & Global Corporation & General Developer
  external ffi.Pointer<ma_async_notification> pDoneNotification;

  /// General Library Documentation Undocument By General Corporation & Global Corporation & General Developer
  external ffi.Pointer<ma_fence> pDoneFence;
}

/// General Library Documentation Undocument By General Corporation & Global Corporation & General Developer
final class UnnamedStruct38 extends ffi.Struct {
  /// General Library Documentation Undocument By General Corporation & Global Corporation & General Developer
  external ffi.Pointer<ffi.Void> pDataBuffer;

  /// General Library Documentation Undocument By General Corporation & Global Corporation & General Developer
  external ffi.Pointer<ma_async_notification> pInitNotification;

  /// General Library Documentation Undocument By General Corporation & Global Corporation & General Developer
  external ffi.Pointer<ma_async_notification> pDoneNotification;

  /// General Library Documentation Undocument By General Corporation & Global Corporation & General Developer
  external ffi.Pointer<ma_fence> pInitFence;

  /// General Library Documentation Undocument By General Corporation & Global Corporation & General Developer
  external ffi.Pointer<ma_fence> pDoneFence;

  @ma_uint64()

  /// General Library Documentation Undocument By General Corporation & Global Corporation & General Developer
  external int rangeBegInPCMFrames;

  @ma_uint64()

  /// General Library Documentation Undocument By General Corporation & Global Corporation & General Developer
  external int rangeEndInPCMFrames;

  @ma_uint64()

  /// General Library Documentation Undocument By General Corporation & Global Corporation & General Developer
  external int loopPointBegInPCMFrames;

  @ma_uint64()

  /// General Library Documentation Undocument By General Corporation & Global Corporation & General Developer
  external int loopPointEndInPCMFrames;

  @ma_uint32()

  /// General Library Documentation Undocument By General Corporation & Global Corporation & General Developer
  external int isLooping;
}

/// General Library Documentation Undocument By General Corporation & Global Corporation & General Developer
final class UnnamedStruct39 extends ffi.Struct {
  /// General Library Documentation Undocument By General Corporation & Global Corporation & General Developer
  external ffi.Pointer<ffi.Void> pDataBuffer;

  /// General Library Documentation Undocument By General Corporation & Global Corporation & General Developer
  external ffi.Pointer<ma_async_notification> pDoneNotification;

  /// General Library Documentation Undocument By General Corporation & Global Corporation & General Developer
  external ffi.Pointer<ma_fence> pDoneFence;
}

/// General Library Documentation Undocument By General Corporation & Global Corporation & General Developer
final class UnnamedStruct40 extends ffi.Struct {
  /// General Library Documentation Undocument By General Corporation & Global Corporation & General Developer
  external ffi.Pointer<ffi.Void> pDataStream;

  /// General Library Documentation Undocument By General Corporation & Global Corporation & General Developer
  external ffi.Pointer<ffi.Char> pFilePath;

  /// General Library Documentation Undocument By General Corporation & Global Corporation & General Developer
  external ffi.Pointer<ffi.WChar> pFilePathW;

  @ma_uint64()

  /// General Library Documentation Undocument By General Corporation & Global Corporation & General Developer
  external int initialSeekPoint;

  /// General Library Documentation Undocument By General Corporation & Global Corporation & General Developer
  external ffi.Pointer<ma_async_notification> pInitNotification;

  /// General Library Documentation Undocument By General Corporation & Global Corporation & General Developer
  external ffi.Pointer<ma_fence> pInitFence;
}

/// General Library Documentation Undocument By General Corporation & Global Corporation & General Developer
final class UnnamedStruct41 extends ffi.Struct {
  /// General Library Documentation Undocument By General Corporation & Global Corporation & General Developer
  external ffi.Pointer<ffi.Void> pDataStream;

  /// General Library Documentation Undocument By General Corporation & Global Corporation & General Developer
  external ffi.Pointer<ma_async_notification> pDoneNotification;

  /// General Library Documentation Undocument By General Corporation & Global Corporation & General Developer
  external ffi.Pointer<ma_fence> pDoneFence;
}

/// General Library Documentation Undocument By General Corporation & Global Corporation & General Developer
final class UnnamedStruct42 extends ffi.Struct {
  /// General Library Documentation Undocument By General Corporation & Global Corporation & General Developer
  external ffi.Pointer<ffi.Void> pDataStream;

  @ma_uint32()

  /// General Library Documentation Undocument By General Corporation & Global Corporation & General Developer
  external int pageIndex;
}

/// General Library Documentation Undocument By General Corporation & Global Corporation & General Developer
final class UnnamedStruct43 extends ffi.Struct {
  /// General Library Documentation Undocument By General Corporation & Global Corporation & General Developer
  external ffi.Pointer<ffi.Void> pDataStream;

  @ma_uint64()

  /// General Library Documentation Undocument By General Corporation & Global Corporation & General Developer
  external int frameIndex;
}

/// General Library Documentation Undocument By General Corporation & Global Corporation & General Developer
final class UnnamedUnion13 extends ffi.Union {
  /// General Library Documentation Undocument By General Corporation & Global Corporation & General Developer
  external UnnamedUnion14 aaudio;
}

/// General Library Documentation Undocument By General Corporation & Global Corporation & General Developer
final class UnnamedUnion14 extends ffi.Union {
  /// General Library Documentation Undocument By General Corporation & Global Corporation & General Developer
  external UnnamedStruct44 reroute;
}

/// General Library Documentation Undocument By General Corporation & Global Corporation & General Developer
final class UnnamedStruct44 extends ffi.Struct {
  /// General Library Documentation Undocument By General Corporation & Global Corporation & General Developer
  external ffi.Pointer<ffi.Void> pDevice;

  @ma_uint32()

  /// General Library Documentation Undocument By General Corporation & Global Corporation & General Developer
  external int deviceType;
}

/// General Library Documentation Undocument By General Corporation & Global Corporation & General Developer
abstract class ma_job_type {
  /// General Library Documentation Undocument By General Corporation & Global Corporation & General Developer
  static const int MA_JOB_TYPE_QUIT = 0;

  /// General Library Documentation Undocument By General Corporation & Global Corporation & General Developer
  static const int MA_JOB_TYPE_CUSTOM = 1;

  /// General Library Documentation Undocument By General Corporation & Global Corporation & General Developer
  static const int MA_JOB_TYPE_RESOURCE_MANAGER_LOAD_DATA_BUFFER_NODE = 2;

  /// General Library Documentation Undocument By General Corporation & Global Corporation & General Developer
  static const int MA_JOB_TYPE_RESOURCE_MANAGER_FREE_DATA_BUFFER_NODE = 3;

  /// General Library Documentation Undocument By General Corporation & Global Corporation & General Developer
  static const int MA_JOB_TYPE_RESOURCE_MANAGER_PAGE_DATA_BUFFER_NODE = 4;

  /// General Library Documentation Undocument By General Corporation & Global Corporation & General Developer
  static const int MA_JOB_TYPE_RESOURCE_MANAGER_LOAD_DATA_BUFFER = 5;

  /// General Library Documentation Undocument By General Corporation & Global Corporation & General Developer
  static const int MA_JOB_TYPE_RESOURCE_MANAGER_FREE_DATA_BUFFER = 6;

  /// General Library Documentation Undocument By General Corporation & Global Corporation & General Developer
  static const int MA_JOB_TYPE_RESOURCE_MANAGER_LOAD_DATA_STREAM = 7;

  /// General Library Documentation Undocument By General Corporation & Global Corporation & General Developer
  static const int MA_JOB_TYPE_RESOURCE_MANAGER_FREE_DATA_STREAM = 8;

  /// General Library Documentation Undocument By General Corporation & Global Corporation & General Developer
  static const int MA_JOB_TYPE_RESOURCE_MANAGER_PAGE_DATA_STREAM = 9;

  /// General Library Documentation Undocument By General Corporation & Global Corporation & General Developer
  static const int MA_JOB_TYPE_RESOURCE_MANAGER_SEEK_DATA_STREAM = 10;

  /// General Library Documentation Undocument By General Corporation & Global Corporation & General Developer
  static const int MA_JOB_TYPE_DEVICE_AAUDIO_REROUTE = 11;

  /// General Library Documentation Undocument By General Corporation & Global Corporation & General Developer
  static const int MA_JOB_TYPE_COUNT = 12;
}

/// General Library Documentation Undocument By General Corporation & Global Corporation & General Developer
abstract class ma_job_queue_flags {
  /// General Library Documentation Undocument By General Corporation & Global Corporation & General Developer
  static const int MA_JOB_QUEUE_FLAG_NON_BLOCKING = 1;
}

/// General Library Documentation Undocument By General Corporation & Global Corporation & General Developer
final class ma_job_queue_config extends ffi.Struct {
  @ma_uint32()

  /// General Library Documentation Undocument By General Corporation & Global Corporation & General Developer
  external int flags;

  @ma_uint32()

  /// General Library Documentation Undocument By General Corporation & Global Corporation & General Developer
  external int capacity;
}

/// General Library Documentation Undocument By General Corporation & Global Corporation & General Developer
final class ma_job_queue extends ffi.Struct {
  @ma_uint32()

  /// General Library Documentation Undocument By General Corporation & Global Corporation & General Developer
  external int flags;

  @ma_uint32()

  /// General Library Documentation Undocument By General Corporation & Global Corporation & General Developer
  external int capacity;

  @ma_uint64()

  /// General Library Documentation Undocument By General Corporation & Global Corporation & General Developer
  external int head;

  @ma_uint64()

  /// General Library Documentation Undocument By General Corporation & Global Corporation & General Developer
  external int tail;

  /// General Library Documentation Undocument By General Corporation & Global Corporation & General Developer
  external ma_semaphore sem;

  /// General Library Documentation Undocument By General Corporation & Global Corporation & General Developer
  external ma_slot_allocator allocator;

  /// General Library Documentation Undocument By General Corporation & Global Corporation & General Developer
  external ffi.Pointer<ma_job> pJobs;

  @ma_spinlock()

  /// General Library Documentation Undocument By General Corporation & Global Corporation & General Developer
  external int lock;

  /// General Library Documentation Undocument By General Corporation & Global Corporation & General Developer
  external ffi.Pointer<ffi.Void> pHeap;

  @ma_bool32()

  /// General Library Documentation Undocument By General Corporation & Global Corporation & General Developer
  external int ownsHeap;
}

/// General Library Documentation Undocument By General Corporation & Global Corporation & General Developer
final class ma_device_job_thread_config extends ffi.Struct {
  @ma_bool32()

  /// General Library Documentation Undocument By General Corporation & Global Corporation & General Developer
  external int noThread;

  @ma_uint32()

  /// General Library Documentation Undocument By General Corporation & Global Corporation & General Developer
  external int jobQueueCapacity;

  @ma_uint32()

  /// General Library Documentation Undocument By General Corporation & Global Corporation & General Developer
  external int jobQueueFlags;
}

/// General Library Documentation Undocument By General Corporation & Global Corporation & General Developer
final class ma_device_job_thread extends ffi.Struct {
  @ma_thread()

  /// General Library Documentation Undocument By General Corporation & Global Corporation & General Developer
  external int thread;

  /// General Library Documentation Undocument By General Corporation & Global Corporation & General Developer
  external ma_job_queue jobQueue;

  @ma_bool32()

  /// General Library Documentation Undocument By General Corporation & Global Corporation & General Developer
  external int hasThread;
}

/// General Library Documentation Undocument By General Corporation & Global Corporation & General Developer
abstract class ma_ios_session_category_option {
  /// General Library Documentation Undocument By General Corporation & Global Corporation & General Developer
  static const int ma_ios_session_category_option_mix_with_others = 1;

  /// General Library Documentation Undocument By General Corporation & Global Corporation & General Developer
  static const int ma_ios_session_category_option_duck_others = 2;

  /// General Library Documentation Undocument By General Corporation & Global Corporation & General Developer
  static const int ma_ios_session_category_option_allow_bluetooth = 4;

  /// General Library Documentation Undocument By General Corporation & Global Corporation & General Developer
  static const int ma_ios_session_category_option_default_to_speaker = 8;

  /// General Library Documentation Undocument By General Corporation & Global Corporation & General Developer
  static const int
      ma_ios_session_category_option_interrupt_spoken_audio_and_mix_with_others =
      17;

  /// General Library Documentation Undocument By General Corporation & Global Corporation & General Developer
  static const int ma_ios_session_category_option_allow_bluetooth_a2dp = 32;

  /// General Library Documentation Undocument By General Corporation & Global Corporation & General Developer
  static const int ma_ios_session_category_option_allow_air_play = 64;
}

/// General Library Documentation Undocument By General Corporation & Global Corporation & General Developer
final class ma_context_command__wasapi extends ffi.Struct {
  @ffi.Int()

  /// General Library Documentation Undocument By General Corporation & Global Corporation & General Developer
  external int code;

  /// General Library Documentation Undocument By General Corporation & Global Corporation & General Developer
  external ffi.Pointer<ma_event> pEvent;

  /// General Library Documentation Undocument By General Corporation & Global Corporation & General Developer
  external UnnamedUnion15 data;
}

/// General Library Documentation Undocument By General Corporation & Global Corporation & General Developer
final class UnnamedUnion15 extends ffi.Union {
  /// General Library Documentation Undocument By General Corporation & Global Corporation & General Developer
  external UnnamedStruct45 quit;

  /// General Library Documentation Undocument By General Corporation & Global Corporation & General Developer
  external UnnamedStruct46 createAudioClient;

  /// General Library Documentation Undocument By General Corporation & Global Corporation & General Developer
  external UnnamedStruct47 releaseAudioClient;
}

/// General Library Documentation Undocument By General Corporation & Global Corporation & General Developer
final class UnnamedStruct45 extends ffi.Struct {
  @ffi.Int()

  /// General Library Documentation Undocument By General Corporation & Global Corporation & General Developer
  external int unused;
}

/// General Library Documentation Undocument By General Corporation & Global Corporation & General Developer
final class UnnamedStruct46 extends ffi.Struct {
  @ffi.Int32()

  /// General Library Documentation Undocument By General Corporation & Global Corporation & General Developer
  external int deviceType;

  /// General Library Documentation Undocument By General Corporation & Global Corporation & General Developer
  external ffi.Pointer<ffi.Void> pAudioClient;

  /// General Library Documentation Undocument By General Corporation & Global Corporation & General Developer
  external ffi.Pointer<ffi.Pointer<ffi.Void>> ppAudioClientService;

  /// General Library Documentation Undocument By General Corporation & Global Corporation & General Developer
  external ffi.Pointer<ffi.Int32> pResult;
}

/// General Library Documentation Undocument By General Corporation & Global Corporation & General Developer
final class UnnamedStruct47 extends ffi.Struct {
  /// General Library Documentation Undocument By General Corporation & Global Corporation & General Developer
  external ffi.Pointer<ma_device> pDevice;

  @ffi.Int32()

  /// General Library Documentation Undocument By General Corporation & Global Corporation & General Developer
  external int deviceType;
}

/// General Library Documentation Undocument By General Corporation & Global Corporation & General Developer
abstract class ma_open_mode_flags {
  /// General Library Documentation Undocument By General Corporation & Global Corporation & General Developer
  static const int MA_OPEN_MODE_READ = 1;

  /// General Library Documentation Undocument By General Corporation & Global Corporation & General Developer
  static const int MA_OPEN_MODE_WRITE = 2;
}

/// General Library Documentation Undocument By General Corporation & Global Corporation & General Developer
abstract class ma_seek_origin {
  /// General Library Documentation Undocument By General Corporation & Global Corporation & General Developer
  static const int ma_seek_origin_start = 0;

  /// General Library Documentation Undocument By General Corporation & Global Corporation & General Developer
  static const int ma_seek_origin_current = 1;

  /// General Library Documentation Undocument By General Corporation & Global Corporation & General Developer
  static const int ma_seek_origin_end = 2;
}

/// General Library Documentation Undocument By General Corporation & Global Corporation & General Developer
final class ma_file_info extends ffi.Struct {
  @ma_uint64()

  /// General Library Documentation Undocument By General Corporation & Global Corporation & General Developer
  external int sizeInBytes;
}

/// General Library Documentation Undocument By General Corporation & Global Corporation & General Developer
final class ma_vfs_callbacks extends ffi.Struct {
  /// General Library Documentation Undocument By General Corporation & Global Corporation & General Developer
  external ffi.Pointer<
      ffi.NativeFunction<
          ffi.Int32 Function(
              ffi.Pointer<ma_vfs> pVFS,
              ffi.Pointer<ffi.Char> pFilePath,
              ma_uint32 openMode,
              ffi.Pointer<ma_vfs_file> pFile)>> onOpen;

  /// General Library Documentation Undocument By General Corporation & Global Corporation & General Developer
  external ffi.Pointer<
      ffi.NativeFunction<
          ffi.Int32 Function(
              ffi.Pointer<ma_vfs> pVFS,
              ffi.Pointer<ffi.WChar> pFilePath,
              ma_uint32 openMode,
              ffi.Pointer<ma_vfs_file> pFile)>> onOpenW;

  /// General Library Documentation Undocument By General Corporation & Global Corporation & General Developer
  external ffi.Pointer<
          ffi.NativeFunction<
              ffi.Int32 Function(ffi.Pointer<ma_vfs> pVFS, ma_vfs_file file)>>
      onClose;

  /// General Library Documentation Undocument By General Corporation & Global Corporation & General Developer
  external ffi.Pointer<
      ffi.NativeFunction<
          ffi.Int32 Function(
              ffi.Pointer<ma_vfs> pVFS,
              ma_vfs_file file,
              ffi.Pointer<ffi.Void> pDst,
              ffi.Size sizeInBytes,
              ffi.Pointer<ffi.Size> pBytesRead)>> onRead;

  /// General Library Documentation Undocument By General Corporation & Global Corporation & General Developer
  external ffi.Pointer<
      ffi.NativeFunction<
          ffi.Int32 Function(
              ffi.Pointer<ma_vfs> pVFS,
              ma_vfs_file file,
              ffi.Pointer<ffi.Void> pSrc,
              ffi.Size sizeInBytes,
              ffi.Pointer<ffi.Size> pBytesWritten)>> onWrite;

  /// General Library Documentation Undocument By General Corporation & Global Corporation & General Developer
  external ffi.Pointer<
      ffi.NativeFunction<
          ffi.Int32 Function(ffi.Pointer<ma_vfs> pVFS, ma_vfs_file file,
              ma_int64 offset, ffi.Int32 origin)>> onSeek;

  /// General Library Documentation Undocument By General Corporation & Global Corporation & General Developer
  external ffi.Pointer<
      ffi.NativeFunction<
          ffi.Int32 Function(ffi.Pointer<ma_vfs> pVFS, ma_vfs_file file,
              ffi.Pointer<ma_int64> pCursor)>> onTell;

  /// General Library Documentation Undocument By General Corporation & Global Corporation & General Developer
  external ffi.Pointer<
      ffi.NativeFunction<
          ffi.Int32 Function(ffi.Pointer<ma_vfs> pVFS, ma_vfs_file file,
              ffi.Pointer<ma_file_info> pInfo)>> onInfo;
}

/// VFS
/// ===
///
/// The VFS object (virtual file system) is what's used to customize file access. This is useful in cases where stdio FILE* based APIs may not be entirely
/// appropriate for a given situation.
typedef ma_vfs = ffi.Void;

/// General Library Documentation Undocument By General Corporation & Global Corporation & General Developer
typedef Dartma_vfs = void;

/// General Library Documentation Undocument By General Corporation & Global Corporation & General Developer
typedef ma_vfs_file = ma_handle;

/// General Library Documentation Undocument By General Corporation & Global Corporation & General Developer
final class ma_default_vfs extends ffi.Struct {
  /// General Library Documentation Undocument By General Corporation & Global Corporation & General Developer
  external ma_vfs_callbacks cb;

  /// General Library Documentation Undocument By General Corporation & Global Corporation & General Developer
  external ma_allocation_callbacks allocationCallbacks;
}

/// General Library Documentation Undocument By General Corporation & Global Corporation & General Developer
abstract class ma_encoding_format {
  /// General Library Documentation Undocument By General Corporation & Global Corporation & General Developer
  static const int ma_encoding_format_unknown = 0;

  /// General Library Documentation Undocument By General Corporation & Global Corporation & General Developer
  static const int ma_encoding_format_wav = 1;

  /// General Library Documentation Undocument By General Corporation & Global Corporation & General Developer
  static const int ma_encoding_format_flac = 2;

  /// General Library Documentation Undocument By General Corporation & Global Corporation & General Developer
  static const int ma_encoding_format_mp3 = 3;

  /// General Library Documentation Undocument By General Corporation & Global Corporation & General Developer
  static const int ma_encoding_format_vorbis = 4;
}

/// General Library Documentation Undocument By General Corporation & Global Corporation & General Developer
final class ma_decoder extends ffi.Struct {
  /// General Library Documentation Undocument By General Corporation & Global Corporation & General Developer
  external ma_data_source_base ds;

  /// General Library Documentation Undocument By General Corporation & Global Corporation & General Developer
  external ffi.Pointer<ma_data_source> pBackend;

  /// General Library Documentation Undocument By General Corporation & Global Corporation & General Developer
  external ffi.Pointer<ma_decoding_backend_vtable> pBackendVTable;

  /// General Library Documentation Undocument By General Corporation & Global Corporation & General Developer
  external ffi.Pointer<ffi.Void> pBackendUserData;

  /// General Library Documentation Undocument By General Corporation & Global Corporation & General Developer
  external ma_decoder_read_proc onRead;

  /// General Library Documentation Undocument By General Corporation & Global Corporation & General Developer
  external ma_decoder_seek_proc onSeek;

  /// General Library Documentation Undocument By General Corporation & Global Corporation & General Developer
  external ma_decoder_tell_proc onTell;

  /// General Library Documentation Undocument By General Corporation & Global Corporation & General Developer
  external ffi.Pointer<ffi.Void> pUserData;

  @ma_uint64()

  /// General Library Documentation Undocument By General Corporation & Global Corporation & General Developer
  external int readPointerInPCMFrames;

  @ffi.Int32()

  /// General Library Documentation Undocument By General Corporation & Global Corporation & General Developer
  external int outputFormat;

  @ma_uint32()

  /// General Library Documentation Undocument By General Corporation & Global Corporation & General Developer
  external int outputChannels;

  @ma_uint32()

  /// General Library Documentation Undocument By General Corporation & Global Corporation & General Developer
  external int outputSampleRate;

  /// General Library Documentation Undocument By General Corporation & Global Corporation & General Developer
  external ma_data_converter converter;

  /// General Library Documentation Undocument By General Corporation & Global Corporation & General Developer
  external ffi.Pointer<ffi.Void> pInputCache;

  @ma_uint64()

  /// General Library Documentation Undocument By General Corporation & Global Corporation & General Developer
  external int inputCacheCap;

  @ma_uint64()

  /// General Library Documentation Undocument By General Corporation & Global Corporation & General Developer
  external int inputCacheConsumed;

  @ma_uint64()

  /// General Library Documentation Undocument By General Corporation & Global Corporation & General Developer
  external int inputCacheRemaining;

  /// General Library Documentation Undocument By General Corporation & Global Corporation & General Developer
  external ma_allocation_callbacks allocationCallbacks;

  /// General Library Documentation Undocument By General Corporation & Global Corporation & General Developer
  external UnnamedUnion16 data;
}

/// General Library Documentation Undocument By General Corporation & Global Corporation & General Developer
final class ma_decoding_backend_vtable extends ffi.Struct {
  /// General Library Documentation Undocument By General Corporation & Global Corporation & General Developer
  external ffi.Pointer<
      ffi.NativeFunction<
          ffi.Int32 Function(
              ffi.Pointer<ffi.Void> pUserData,
              ma_read_proc onRead,
              ma_seek_proc onSeek,
              ma_tell_proc onTell,
              ffi.Pointer<ffi.Void> pReadSeekTellUserData,
              ffi.Pointer<ma_decoding_backend_config> pConfig,
              ffi.Pointer<ma_allocation_callbacks> pAllocationCallbacks,
              ffi.Pointer<ffi.Pointer<ma_data_source>> ppBackend)>> onInit;

  /// General Library Documentation Undocument By General Corporation & Global Corporation & General Developer
  external ffi.Pointer<
      ffi.NativeFunction<
          ffi.Int32 Function(
              ffi.Pointer<ffi.Void> pUserData,
              ffi.Pointer<ffi.Char> pFilePath,
              ffi.Pointer<ma_decoding_backend_config> pConfig,
              ffi.Pointer<ma_allocation_callbacks> pAllocationCallbacks,
              ffi.Pointer<ffi.Pointer<ma_data_source>> ppBackend)>> onInitFile;

  /// General Library Documentation Undocument By General Corporation & Global Corporation & General Developer
  external ffi.Pointer<
      ffi.NativeFunction<
          ffi.Int32 Function(
              ffi.Pointer<ffi.Void> pUserData,
              ffi.Pointer<ffi.WChar> pFilePath,
              ffi.Pointer<ma_decoding_backend_config> pConfig,
              ffi.Pointer<ma_allocation_callbacks> pAllocationCallbacks,
              ffi.Pointer<ffi.Pointer<ma_data_source>> ppBackend)>> onInitFileW;

  /// General Library Documentation Undocument By General Corporation & Global Corporation & General Developer
  external ffi.Pointer<
          ffi.NativeFunction<
              ffi.Int32 Function(
                  ffi.Pointer<ffi.Void> pUserData,
                  ffi.Pointer<ffi.Void> pData,
                  ffi.Size dataSize,
                  ffi.Pointer<ma_decoding_backend_config> pConfig,
                  ffi.Pointer<ma_allocation_callbacks> pAllocationCallbacks,
                  ffi.Pointer<ffi.Pointer<ma_data_source>> ppBackend)>>
      onInitMemory;

  /// General Library Documentation Undocument By General Corporation & Global Corporation & General Developer
  external ffi.Pointer<
          ffi.NativeFunction<
              ffi.Void Function(
                  ffi.Pointer<ffi.Void> pUserData,
                  ffi.Pointer<ma_data_source> pBackend,
                  ffi.Pointer<ma_allocation_callbacks> pAllocationCallbacks)>>
      onUninit;
}

/// General Library Documentation Undocument By General Corporation & Global Corporation & General Developer
typedef ma_read_proc = ffi.Pointer<ffi.NativeFunction<ma_read_procFunction>>;

/// General Library Documentation Undocument By General Corporation & Global Corporation & General Developer
typedef ma_read_procFunction = ffi.Int32 Function(
    ffi.Pointer<ffi.Void> pUserData,
    ffi.Pointer<ffi.Void> pBufferOut,
    ffi.Size bytesToRead,
    ffi.Pointer<ffi.Size> pBytesRead);

/// General Library Documentation Undocument By General Corporation & Global Corporation & General Developer
typedef Dartma_read_procFunction = int Function(
    ffi.Pointer<ffi.Void> pUserData,
    ffi.Pointer<ffi.Void> pBufferOut,
    int bytesToRead,
    ffi.Pointer<ffi.Size> pBytesRead);

/// General Library Documentation Undocument By General Corporation & Global Corporation & General Developer
typedef ma_seek_proc = ffi.Pointer<ffi.NativeFunction<ma_seek_procFunction>>;

/// General Library Documentation Undocument By General Corporation & Global Corporation & General Developer
typedef ma_seek_procFunction = ffi.Int32 Function(
    ffi.Pointer<ffi.Void> pUserData, ma_int64 offset, ffi.Int32 origin);

/// General Library Documentation Undocument By General Corporation & Global Corporation & General Developer
typedef Dartma_seek_procFunction = int Function(
    ffi.Pointer<ffi.Void> pUserData, Dartma_int64 offset, int origin);

/// General Library Documentation Undocument By General Corporation & Global Corporation & General Developer
typedef ma_tell_proc = ffi.Pointer<ffi.NativeFunction<ma_tell_procFunction>>;

/// General Library Documentation Undocument By General Corporation & Global Corporation & General Developer
typedef ma_tell_procFunction = ffi.Int32 Function(
    ffi.Pointer<ffi.Void> pUserData, ffi.Pointer<ma_int64> pCursor);

/// General Library Documentation Undocument By General Corporation & Global Corporation & General Developer
typedef Dartma_tell_procFunction = int Function(
    ffi.Pointer<ffi.Void> pUserData, ffi.Pointer<ma_int64> pCursor);

/// General Library Documentation Undocument By General Corporation & Global Corporation & General Developer
final class ma_decoding_backend_config extends ffi.Struct {
  @ffi.Int32()

  /// General Library Documentation Undocument By General Corporation & Global Corporation & General Developer
  external int preferredFormat;

  @ma_uint32()

  /// General Library Documentation Undocument By General Corporation & Global Corporation & General Developer
  external int seekPointCount;
}

/// General Library Documentation Undocument By General Corporation & Global Corporation & General Developer
typedef ma_decoder_read_proc
    = ffi.Pointer<ffi.NativeFunction<ma_decoder_read_procFunction>>;

/// General Library Documentation Undocument By General Corporation & Global Corporation & General Developer
typedef ma_decoder_read_procFunction = ffi.Int32 Function(
    ffi.Pointer<ma_decoder> pDecoder,
    ffi.Pointer<ffi.Void> pBufferOut,
    ffi.Size bytesToRead,
    ffi.Pointer<ffi.Size> pBytesRead);

/// General Library Documentation Undocument By General Corporation & Global Corporation & General Developer
typedef Dartma_decoder_read_procFunction = int Function(
    ffi.Pointer<ma_decoder> pDecoder,
    ffi.Pointer<ffi.Void> pBufferOut,
    int bytesToRead,
    ffi.Pointer<ffi.Size> pBytesRead);

/// General Library Documentation Undocument By General Corporation & Global Corporation & General Developer
typedef ma_decoder_seek_proc
    = ffi.Pointer<ffi.NativeFunction<ma_decoder_seek_procFunction>>;

/// General Library Documentation Undocument By General Corporation & Global Corporation & General Developer
typedef ma_decoder_seek_procFunction = ffi.Int32 Function(
    ffi.Pointer<ma_decoder> pDecoder, ma_int64 byteOffset, ffi.Int32 origin);

/// General Library Documentation Undocument By General Corporation & Global Corporation & General Developer
typedef Dartma_decoder_seek_procFunction = int Function(
    ffi.Pointer<ma_decoder> pDecoder, Dartma_int64 byteOffset, int origin);

/// General Library Documentation Undocument By General Corporation & Global Corporation & General Developer
typedef ma_decoder_tell_proc
    = ffi.Pointer<ffi.NativeFunction<ma_decoder_tell_procFunction>>;

/// General Library Documentation Undocument By General Corporation & Global Corporation & General Developer
typedef ma_decoder_tell_procFunction = ffi.Int32 Function(
    ffi.Pointer<ma_decoder> pDecoder, ffi.Pointer<ma_int64> pCursor);

/// General Library Documentation Undocument By General Corporation & Global Corporation & General Developer
typedef Dartma_decoder_tell_procFunction = int Function(
    ffi.Pointer<ma_decoder> pDecoder, ffi.Pointer<ma_int64> pCursor);

/// General Library Documentation Undocument By General Corporation & Global Corporation & General Developer
final class UnnamedUnion16 extends ffi.Union {
  /// General Library Documentation Undocument By General Corporation & Global Corporation & General Developer
  external UnnamedStruct48 vfs;

  /// General Library Documentation Undocument By General Corporation & Global Corporation & General Developer
  external UnnamedStruct49 memory;
}

/// General Library Documentation Undocument By General Corporation & Global Corporation & General Developer
final class UnnamedStruct48 extends ffi.Struct {
  /// General Library Documentation Undocument By General Corporation & Global Corporation & General Developer
  external ffi.Pointer<ma_vfs> pVFS;

  /// General Library Documentation Undocument By General Corporation & Global Corporation & General Developer
  external ma_vfs_file file;
}

/// General Library Documentation Undocument By General Corporation & Global Corporation & General Developer
final class UnnamedStruct49 extends ffi.Struct {
  /// General Library Documentation Undocument By General Corporation & Global Corporation & General Developer
  external ffi.Pointer<ma_uint8> pData;

  @ffi.Size()

  /// General Library Documentation Undocument By General Corporation & Global Corporation & General Developer
  external int dataSize;

  @ffi.Size()

  /// General Library Documentation Undocument By General Corporation & Global Corporation & General Developer
  external int currentReadPos;
}

/// General Library Documentation Undocument By General Corporation & Global Corporation & General Developer
final class ma_decoder_config extends ffi.Struct {
  @ffi.Int32()

  /// General Library Documentation Undocument By General Corporation & Global Corporation & General Developer
  external int format;

  @ma_uint32()

  /// General Library Documentation Undocument By General Corporation & Global Corporation & General Developer
  external int channels;

  @ma_uint32()

  /// General Library Documentation Undocument By General Corporation & Global Corporation & General Developer
  external int sampleRate;

  /// General Library Documentation Undocument By General Corporation & Global Corporation & General Developer
  external ffi.Pointer<ma_channel> pChannelMap;

  @ffi.Int32()

  /// General Library Documentation Undocument By General Corporation & Global Corporation & General Developer
  external int channelMixMode;

  @ffi.Int32()

  /// General Library Documentation Undocument By General Corporation & Global Corporation & General Developer
  external int ditherMode;

  /// General Library Documentation Undocument By General Corporation & Global Corporation & General Developer
  external ma_resampler_config resampling;

  /// General Library Documentation Undocument By General Corporation & Global Corporation & General Developer
  external ma_allocation_callbacks allocationCallbacks;

  @ffi.Int32()

  /// General Library Documentation Undocument By General Corporation & Global Corporation & General Developer
  external int encodingFormat;

  @ma_uint32()

  /// General Library Documentation Undocument By General Corporation & Global Corporation & General Developer
  external int seekPointCount;

  /// General Library Documentation Undocument By General Corporation & Global Corporation & General Developer
  external ffi.Pointer<ffi.Pointer<ma_decoding_backend_vtable>>
      ppCustomBackendVTables;

  @ma_uint32()

  /// General Library Documentation Undocument By General Corporation & Global Corporation & General Developer
  external int customBackendCount;

  /// General Library Documentation Undocument By General Corporation & Global Corporation & General Developer
  external ffi.Pointer<ffi.Void> pCustomBackendUserData;
}

/// General Library Documentation Undocument By General Corporation & Global Corporation & General Developer
final class ma_encoder extends ffi.Struct {
  /// General Library Documentation Undocument By General Corporation & Global Corporation & General Developer
  external ma_encoder_config config;

  /// General Library Documentation Undocument By General Corporation & Global Corporation & General Developer
  external ma_encoder_write_proc onWrite;

  /// General Library Documentation Undocument By General Corporation & Global Corporation & General Developer
  external ma_encoder_seek_proc onSeek;

  /// General Library Documentation Undocument By General Corporation & Global Corporation & General Developer
  external ma_encoder_init_proc onInit;

  /// General Library Documentation Undocument By General Corporation & Global Corporation & General Developer
  external ma_encoder_uninit_proc onUninit;

  /// General Library Documentation Undocument By General Corporation & Global Corporation & General Developer
  external ma_encoder_write_pcm_frames_proc onWritePCMFrames;

  /// General Library Documentation Undocument By General Corporation & Global Corporation & General Developer
  external ffi.Pointer<ffi.Void> pUserData;

  /// General Library Documentation Undocument By General Corporation & Global Corporation & General Developer
  external ffi.Pointer<ffi.Void> pInternalEncoder;

  /// General Library Documentation Undocument By General Corporation & Global Corporation & General Developer
  external UnnamedUnion17 data;
}

/// General Library Documentation Undocument By General Corporation & Global Corporation & General Developer
final class ma_encoder_config extends ffi.Struct {
  @ffi.Int32()

  /// General Library Documentation Undocument By General Corporation & Global Corporation & General Developer
  external int encodingFormat;

  @ffi.Int32()

  /// General Library Documentation Undocument By General Corporation & Global Corporation & General Developer
  external int format;

  @ma_uint32()

  /// General Library Documentation Undocument By General Corporation & Global Corporation & General Developer
  external int channels;

  @ma_uint32()

  /// General Library Documentation Undocument By General Corporation & Global Corporation & General Developer
  external int sampleRate;

  /// General Library Documentation Undocument By General Corporation & Global Corporation & General Developer
  external ma_allocation_callbacks allocationCallbacks;
}

/// General Library Documentation Undocument By General Corporation & Global Corporation & General Developer
typedef ma_encoder_write_proc
    = ffi.Pointer<ffi.NativeFunction<ma_encoder_write_procFunction>>;

/// General Library Documentation Undocument By General Corporation & Global Corporation & General Developer
typedef ma_encoder_write_procFunction = ffi.Int32 Function(
    ffi.Pointer<ma_encoder> pEncoder,
    ffi.Pointer<ffi.Void> pBufferIn,
    ffi.Size bytesToWrite,
    ffi.Pointer<ffi.Size> pBytesWritten);

/// General Library Documentation Undocument By General Corporation & Global Corporation & General Developer
typedef Dartma_encoder_write_procFunction = int Function(
    ffi.Pointer<ma_encoder> pEncoder,
    ffi.Pointer<ffi.Void> pBufferIn,
    int bytesToWrite,
    ffi.Pointer<ffi.Size> pBytesWritten);

/// General Library Documentation Undocument By General Corporation & Global Corporation & General Developer
typedef ma_encoder_seek_proc
    = ffi.Pointer<ffi.NativeFunction<ma_encoder_seek_procFunction>>;

/// General Library Documentation Undocument By General Corporation & Global Corporation & General Developer
typedef ma_encoder_seek_procFunction = ffi.Int32 Function(
    ffi.Pointer<ma_encoder> pEncoder, ma_int64 offset, ffi.Int32 origin);

/// General Library Documentation Undocument By General Corporation & Global Corporation & General Developer
typedef Dartma_encoder_seek_procFunction = int Function(
    ffi.Pointer<ma_encoder> pEncoder, Dartma_int64 offset, int origin);

/// General Library Documentation Undocument By General Corporation & Global Corporation & General Developer
typedef ma_encoder_init_proc
    = ffi.Pointer<ffi.NativeFunction<ma_encoder_init_procFunction>>;

/// General Library Documentation Undocument By General Corporation & Global Corporation & General Developer
typedef ma_encoder_init_procFunction = ffi.Int32 Function(
    ffi.Pointer<ma_encoder> pEncoder);

/// General Library Documentation Undocument By General Corporation & Global Corporation & General Developer
typedef Dartma_encoder_init_procFunction = int Function(
    ffi.Pointer<ma_encoder> pEncoder);

/// General Library Documentation Undocument By General Corporation & Global Corporation & General Developer
typedef ma_encoder_uninit_proc
    = ffi.Pointer<ffi.NativeFunction<ma_encoder_uninit_procFunction>>;

/// General Library Documentation Undocument By General Corporation & Global Corporation & General Developer
typedef ma_encoder_uninit_procFunction = ffi.Void Function(
    ffi.Pointer<ma_encoder> pEncoder);

/// General Library Documentation Undocument By General Corporation & Global Corporation & General Developer
typedef Dartma_encoder_uninit_procFunction = void Function(
    ffi.Pointer<ma_encoder> pEncoder);

/// General Library Documentation Undocument By General Corporation & Global Corporation & General Developer
typedef ma_encoder_write_pcm_frames_proc
    = ffi.Pointer<ffi.NativeFunction<ma_encoder_write_pcm_frames_procFunction>>;

/// General Library Documentation Undocument By General Corporation & Global Corporation & General Developer
typedef ma_encoder_write_pcm_frames_procFunction = ffi.Int32 Function(
    ffi.Pointer<ma_encoder> pEncoder,
    ffi.Pointer<ffi.Void> pFramesIn,
    ma_uint64 frameCount,
    ffi.Pointer<ma_uint64> pFramesWritten);

/// General Library Documentation Undocument By General Corporation & Global Corporation & General Developer
typedef Dartma_encoder_write_pcm_frames_procFunction = int Function(
    ffi.Pointer<ma_encoder> pEncoder,
    ffi.Pointer<ffi.Void> pFramesIn,
    Dartma_uint64 frameCount,
    ffi.Pointer<ma_uint64> pFramesWritten);

/// General Library Documentation Undocument By General Corporation & Global Corporation & General Developer
final class UnnamedUnion17 extends ffi.Union {
  /// General Library Documentation Undocument By General Corporation & Global Corporation & General Developer
  external UnnamedStruct50 vfs;
}

/// General Library Documentation Undocument By General Corporation & Global Corporation & General Developer
final class UnnamedStruct50 extends ffi.Struct {
  /// General Library Documentation Undocument By General Corporation & Global Corporation & General Developer
  external ffi.Pointer<ma_vfs> pVFS;

  /// General Library Documentation Undocument By General Corporation & Global Corporation & General Developer
  external ma_vfs_file file;
}

/// General Library Documentation Undocument By General Corporation & Global Corporation & General Developer
abstract class ma_waveform_type {
  /// General Library Documentation Undocument By General Corporation & Global Corporation & General Developer
  static const int ma_waveform_type_sine = 0;

  /// General Library Documentation Undocument By General Corporation & Global Corporation & General Developer
  static const int ma_waveform_type_square = 1;

  /// General Library Documentation Undocument By General Corporation & Global Corporation & General Developer
  static const int ma_waveform_type_triangle = 2;

  /// General Library Documentation Undocument By General Corporation & Global Corporation & General Developer
  static const int ma_waveform_type_sawtooth = 3;
}

/// General Library Documentation Undocument By General Corporation & Global Corporation & General Developer
final class ma_waveform_config extends ffi.Struct {
  @ffi.Int32()

  /// General Library Documentation Undocument By General Corporation & Global Corporation & General Developer
  external int format;

  @ma_uint32()

  /// General Library Documentation Undocument By General Corporation & Global Corporation & General Developer
  external int channels;

  @ma_uint32()

  /// General Library Documentation Undocument By General Corporation & Global Corporation & General Developer
  external int sampleRate;

  @ffi.Int32()

  /// General Library Documentation Undocument By General Corporation & Global Corporation & General Developer
  external int type;

  @ffi.Double()

  /// General Library Documentation Undocument By General Corporation & Global Corporation & General Developer
  external double amplitude;

  @ffi.Double()

  /// General Library Documentation Undocument By General Corporation & Global Corporation & General Developer
  external double frequency;
}

/// General Library Documentation Undocument By General Corporation & Global Corporation & General Developer
final class ma_waveform extends ffi.Struct {
  /// General Library Documentation Undocument By General Corporation & Global Corporation & General Developer
  external ma_data_source_base ds;

  /// General Library Documentation Undocument By General Corporation & Global Corporation & General Developer
  external ma_waveform_config config;

  @ffi.Double()

  /// General Library Documentation Undocument By General Corporation & Global Corporation & General Developer
  external double advance;

  @ffi.Double()

  /// General Library Documentation Undocument By General Corporation & Global Corporation & General Developer
  external double time;
}

/// General Library Documentation Undocument By General Corporation & Global Corporation & General Developer
final class ma_pulsewave_config extends ffi.Struct {
  @ffi.Int32()

  /// General Library Documentation Undocument By General Corporation & Global Corporation & General Developer
  external int format;

  @ma_uint32()

  /// General Library Documentation Undocument By General Corporation & Global Corporation & General Developer
  external int channels;

  @ma_uint32()

  /// General Library Documentation Undocument By General Corporation & Global Corporation & General Developer
  external int sampleRate;

  @ffi.Double()

  /// General Library Documentation Undocument By General Corporation & Global Corporation & General Developer
  external double dutyCycle;

  @ffi.Double()

  /// General Library Documentation Undocument By General Corporation & Global Corporation & General Developer
  external double amplitude;

  @ffi.Double()

  /// General Library Documentation Undocument By General Corporation & Global Corporation & General Developer
  external double frequency;
}

/// General Library Documentation Undocument By General Corporation & Global Corporation & General Developer
final class ma_pulsewave extends ffi.Struct {
  /// General Library Documentation Undocument By General Corporation & Global Corporation & General Developer
  external ma_waveform waveform;

  /// General Library Documentation Undocument By General Corporation & Global Corporation & General Developer
  external ma_pulsewave_config config;
}

/// General Library Documentation Undocument By General Corporation & Global Corporation & General Developer
abstract class ma_noise_type {
  /// General Library Documentation Undocument By General Corporation & Global Corporation & General Developer
  static const int ma_noise_type_white = 0;

  /// General Library Documentation Undocument By General Corporation & Global Corporation & General Developer
  static const int ma_noise_type_pink = 1;

  /// General Library Documentation Undocument By General Corporation & Global Corporation & General Developer
  static const int ma_noise_type_brownian = 2;
}

/// General Library Documentation Undocument By General Corporation & Global Corporation & General Developer
final class ma_noise_config extends ffi.Struct {
  @ffi.Int32()

  /// General Library Documentation Undocument By General Corporation & Global Corporation & General Developer
  external int format;

  @ma_uint32()

  /// General Library Documentation Undocument By General Corporation & Global Corporation & General Developer
  external int channels;

  @ffi.Int32()

  /// General Library Documentation Undocument By General Corporation & Global Corporation & General Developer
  external int type;

  @ma_int32()

  /// General Library Documentation Undocument By General Corporation & Global Corporation & General Developer
  external int seed;

  @ffi.Double()

  /// General Library Documentation Undocument By General Corporation & Global Corporation & General Developer
  external double amplitude;

  @ma_bool32()

  /// General Library Documentation Undocument By General Corporation & Global Corporation & General Developer
  external int duplicateChannels;
}

/// General Library Documentation Undocument By General Corporation & Global Corporation & General Developer
final class ma_noise extends ffi.Struct {
  /// General Library Documentation Undocument By General Corporation & Global Corporation & General Developer
  external ma_data_source_base ds;

  /// General Library Documentation Undocument By General Corporation & Global Corporation & General Developer
  external ma_noise_config config;

  /// General Library Documentation Undocument By General Corporation & Global Corporation & General Developer
  external ma_lcg lcg;

  /// General Library Documentation Undocument By General Corporation & Global Corporation & General Developer
  external UnnamedUnion18 state;

  /// General Library Documentation Undocument By General Corporation & Global Corporation & General Developer
  external ffi.Pointer<ffi.Void> pHeap;

  @ma_bool32()

  /// General Library Documentation Undocument By General Corporation & Global Corporation & General Developer
  external int ownsHeap;
}

/// General Library Documentation Undocument By General Corporation & Global Corporation & General Developer
final class UnnamedUnion18 extends ffi.Union {
  /// General Library Documentation Undocument By General Corporation & Global Corporation & General Developer
  external UnnamedStruct51 pink;

  /// General Library Documentation Undocument By General Corporation & Global Corporation & General Developer
  external UnnamedStruct52 brownian;
}

/// General Library Documentation Undocument By General Corporation & Global Corporation & General Developer
final class UnnamedStruct51 extends ffi.Struct {
  /// General Library Documentation Undocument By General Corporation & Global Corporation & General Developer
  external ffi.Pointer<ffi.Pointer<ffi.Double>> bin;

  /// General Library Documentation Undocument By General Corporation & Global Corporation & General Developer
  external ffi.Pointer<ffi.Double> accumulation;

  /// General Library Documentation Undocument By General Corporation & Global Corporation & General Developer
  external ffi.Pointer<ma_uint32> counter;
}

/// General Library Documentation Undocument By General Corporation & Global Corporation & General Developer
final class UnnamedStruct52 extends ffi.Struct {
  /// General Library Documentation Undocument By General Corporation & Global Corporation & General Developer
  external ffi.Pointer<ffi.Double> accumulation;
}

/// General Library Documentation Undocument By General Corporation & Global Corporation & General Developer
typedef Dart_PostCObject_Def
    = ffi.Pointer<ffi.NativeFunction<Dart_PostCObject_DefFunction>>;

/// General Library Documentation Undocument By General Corporation & Global Corporation & General Developer
typedef Dart_PostCObject_DefFunction = ffi.Void Function(
    Dart_Port_DL port_id, ffi.Pointer<Dart_CObject> message);

/// General Library Documentation Undocument By General Corporation & Global Corporation & General Developer
typedef DartDart_PostCObject_DefFunction = void Function(
    DartDart_Port_DL port_id, ffi.Pointer<Dart_CObject> message);

/// General Library Documentation Undocument By General Corporation & Global Corporation & General Developer
typedef Dart_Port_DL = ffi.Int64;

/// General Library Documentation Undocument By General Corporation & Global Corporation & General Developer
typedef DartDart_Port_DL = int;

/// General Library Documentation Undocument By General Corporation & Global Corporation & General Developer
typedef Dart_CObject = _Dart_CObject;

final class _Dart_CObject extends ffi.Struct {
  @ffi.Int32()
  external int type;

  external UnnamedUnion19 value;
}

/// General Library Documentation Undocument By General Corporation & Global Corporation & General Developer
abstract class Dart_CObject_Type {
  /// General Library Documentation Undocument By General Corporation & Global Corporation & General Developer
  static const int Dart_CObject_kNull = 0;

  /// General Library Documentation Undocument By General Corporation & Global Corporation & General Developer
  static const int Dart_CObject_kBool = 1;

  /// General Library Documentation Undocument By General Corporation & Global Corporation & General Developer
  static const int Dart_CObject_kInt32 = 2;

  /// General Library Documentation Undocument By General Corporation & Global Corporation & General Developer
  static const int Dart_CObject_kInt64 = 3;

  /// General Library Documentation Undocument By General Corporation & Global Corporation & General Developer
  static const int Dart_CObject_kDouble = 4;

  /// General Library Documentation Undocument By General Corporation & Global Corporation & General Developer
  static const int Dart_CObject_kString = 5;

  /// General Library Documentation Undocument By General Corporation & Global Corporation & General Developer
  static const int Dart_CObject_kArray = 6;

  /// General Library Documentation Undocument By General Corporation & Global Corporation & General Developer
  static const int Dart_CObject_kTypedData = 7;

  /// General Library Documentation Undocument By General Corporation & Global Corporation & General Developer
  static const int Dart_CObject_kExternalTypedData = 8;

  /// General Library Documentation Undocument By General Corporation & Global Corporation & General Developer
  static const int Dart_CObject_kSendPort = 9;

  /// General Library Documentation Undocument By General Corporation & Global Corporation & General Developer
  static const int Dart_CObject_kCapability = 10;

  /// General Library Documentation Undocument By General Corporation & Global Corporation & General Developer
  static const int Dart_CObject_kNativePointer = 11;

  /// General Library Documentation Undocument By General Corporation & Global Corporation & General Developer
  static const int Dart_CObject_kUnsupported = 12;

  /// General Library Documentation Undocument By General Corporation & Global Corporation & General Developer
  static const int Dart_CObject_kUnmodifiableExternalTypedData = 13;

  /// General Library Documentation Undocument By General Corporation & Global Corporation & General Developer
  static const int Dart_CObject_kNumberOfTypes = 14;
}

/// General Library Documentation Undocument By General Corporation & Global Corporation & General Developer
final class UnnamedUnion19 extends ffi.Union {
  @ffi.Bool()

  /// General Library Documentation Undocument By General Corporation & Global Corporation & General Developer
  external bool as_bool;

  @ffi.Int32()

  /// General Library Documentation Undocument By General Corporation & Global Corporation & General Developer
  external int as_int32;

  @ffi.Int64()

  /// General Library Documentation Undocument By General Corporation & Global Corporation & General Developer
  external int as_int64;

  @ffi.Double()

  /// General Library Documentation Undocument By General Corporation & Global Corporation & General Developer
  external double as_double;

  /// General Library Documentation Undocument By General Corporation & Global Corporation & General Developer
  external ffi.Pointer<ffi.Char> as_string;

  /// General Library Documentation Undocument By General Corporation & Global Corporation & General Developer
  external UnnamedStruct53 as_send_port;

  /// General Library Documentation Undocument By General Corporation & Global Corporation & General Developer
  external UnnamedStruct54 as_capability;

  /// General Library Documentation Undocument By General Corporation & Global Corporation & General Developer
  external UnnamedStruct55 as_array;

  /// General Library Documentation Undocument By General Corporation & Global Corporation & General Developer
  external UnnamedStruct56 as_typed_data;

  /// General Library Documentation Undocument By General Corporation & Global Corporation & General Developer
  external UnnamedStruct57 as_external_typed_data;

  /// General Library Documentation Undocument By General Corporation & Global Corporation & General Developer
  external UnnamedStruct58 as_native_pointer;
}

/// General Library Documentation Undocument By General Corporation & Global Corporation & General Developer
final class UnnamedStruct53 extends ffi.Struct {
  @Dart_Port()

  /// General Library Documentation Undocument By General Corporation & Global Corporation & General Developer
  external int id;

  @Dart_Port()

  /// General Library Documentation Undocument By General Corporation & Global Corporation & General Developer
  external int origin_id;
}

/// A port is used to send or receive inter-isolate messages
typedef Dart_Port = ffi.Int64;

/// General Library Documentation Undocument By General Corporation & Global Corporation & General Developer
typedef DartDart_Port = int;

/// General Library Documentation Undocument By General Corporation & Global Corporation & General Developer
final class UnnamedStruct54 extends ffi.Struct {
  @ffi.Int64()

  /// General Library Documentation Undocument By General Corporation & Global Corporation & General Developer
  external int id;
}

/// General Library Documentation Undocument By General Corporation & Global Corporation & General Developer
final class UnnamedStruct55 extends ffi.Struct {
  @ffi.IntPtr()

  /// General Library Documentation Undocument By General Corporation & Global Corporation & General Developer
  external int length;

  /// General Library Documentation Undocument By General Corporation & Global Corporation & General Developer
  external ffi.Pointer<ffi.Pointer<_Dart_CObject>> values;
}

/// General Library Documentation Undocument By General Corporation & Global Corporation & General Developer
final class UnnamedStruct56 extends ffi.Struct {
  @ffi.Int32()

  /// General Library Documentation Undocument By General Corporation & Global Corporation & General Developer
  external int type;

  @ffi.IntPtr()

  /// General Library Documentation Undocument By General Corporation & Global Corporation & General Developer
  external int length;

  /// General Library Documentation Undocument By General Corporation & Global Corporation & General Developer
  external ffi.Pointer<ffi.Uint8> values;
}

/// General Library Documentation Undocument By General Corporation & Global Corporation & General Developer
abstract class Dart_TypedData_Type {
  /// General Library Documentation Undocument By General Corporation & Global Corporation & General Developer
  static const int Dart_TypedData_kByteData = 0;

  /// General Library Documentation Undocument By General Corporation & Global Corporation & General Developer
  static const int Dart_TypedData_kInt8 = 1;

  /// General Library Documentation Undocument By General Corporation & Global Corporation & General Developer
  static const int Dart_TypedData_kUint8 = 2;

  /// General Library Documentation Undocument By General Corporation & Global Corporation & General Developer
  static const int Dart_TypedData_kUint8Clamped = 3;

  /// General Library Documentation Undocument By General Corporation & Global Corporation & General Developer
  static const int Dart_TypedData_kInt16 = 4;

  /// General Library Documentation Undocument By General Corporation & Global Corporation & General Developer
  static const int Dart_TypedData_kUint16 = 5;

  /// General Library Documentation Undocument By General Corporation & Global Corporation & General Developer
  static const int Dart_TypedData_kInt32 = 6;

  /// General Library Documentation Undocument By General Corporation & Global Corporation & General Developer
  static const int Dart_TypedData_kUint32 = 7;

  /// General Library Documentation Undocument By General Corporation & Global Corporation & General Developer
  static const int Dart_TypedData_kInt64 = 8;

  /// General Library Documentation Undocument By General Corporation & Global Corporation & General Developer
  static const int Dart_TypedData_kUint64 = 9;

  /// General Library Documentation Undocument By General Corporation & Global Corporation & General Developer
  static const int Dart_TypedData_kFloat32 = 10;

  /// General Library Documentation Undocument By General Corporation & Global Corporation & General Developer
  static const int Dart_TypedData_kFloat64 = 11;

  /// General Library Documentation Undocument By General Corporation & Global Corporation & General Developer
  static const int Dart_TypedData_kInt32x4 = 12;

  /// General Library Documentation Undocument By General Corporation & Global Corporation & General Developer
  static const int Dart_TypedData_kFloat32x4 = 13;

  /// General Library Documentation Undocument By General Corporation & Global Corporation & General Developer
  static const int Dart_TypedData_kFloat64x2 = 14;

  /// General Library Documentation Undocument By General Corporation & Global Corporation & General Developer
  static const int Dart_TypedData_kInvalid = 15;
}

/// General Library Documentation Undocument By General Corporation & Global Corporation & General Developer
final class UnnamedStruct57 extends ffi.Struct {
  @ffi.Int32()

  /// General Library Documentation Undocument By General Corporation & Global Corporation & General Developer
  external int type;

  @ffi.IntPtr()

  /// General Library Documentation Undocument By General Corporation & Global Corporation & General Developer
  external int length;

  /// General Library Documentation Undocument By General Corporation & Global Corporation & General Developer
  external ffi.Pointer<ffi.Uint8> data;

  /// General Library Documentation Undocument By General Corporation & Global Corporation & General Developer
  external ffi.Pointer<ffi.Void> peer;

  /// General Library Documentation Undocument By General Corporation & Global Corporation & General Developer
  external Dart_HandleFinalizer callback;
}

/// General Library Documentation Undocument By General Corporation & Global Corporation & General Developer
typedef Dart_HandleFinalizer
    = ffi.Pointer<ffi.NativeFunction<Dart_HandleFinalizerFunction>>;

/// General Library Documentation Undocument By General Corporation & Global Corporation & General Developer
typedef Dart_HandleFinalizerFunction = ffi.Void Function(
    ffi.Pointer<ffi.Void> isolate_callback_data, ffi.Pointer<ffi.Void> peer);

/// General Library Documentation Undocument By General Corporation & Global Corporation & General Developer
typedef DartDart_HandleFinalizerFunction = void Function(
    ffi.Pointer<ffi.Void> isolate_callback_data, ffi.Pointer<ffi.Void> peer);

/// General Library Documentation Undocument By General Corporation & Global Corporation & General Developer
final class UnnamedStruct58 extends ffi.Struct {
  @ffi.IntPtr()

  /// General Library Documentation Undocument By General Corporation & Global Corporation & General Developer
  external int ptr;

  @ffi.IntPtr()

  /// General Library Documentation Undocument By General Corporation & Global Corporation & General Developer
  external int size;

  /// General Library Documentation Undocument By General Corporation & Global Corporation & General Developer
  external Dart_HandleFinalizer callback;
}

/// General Library Documentation Undocument By General Corporation & Global Corporation & General Developer
final class ca_context extends ffi.Struct {
  /// General Library Documentation Undocument By General Corporation & Global Corporation & General Developer
  external ffi.Pointer<ffi.Void> pRef;
}

/// General Library Documentation Undocument By General Corporation & Global Corporation & General Developer
final class ca_device_notification extends ffi.Struct {
  @ffi.Int32()

  /// General Library Documentation Undocument By General Corporation & Global Corporation & General Developer
  external int type;

  @ffi.Int32()

  /// General Library Documentation Undocument By General Corporation & Global Corporation & General Developer
  external int state;
}

/// General Library Documentation Undocument By General Corporation & Global Corporation & General Developer
final class ca_device_config extends ffi.Struct {
  @ffi.Int32()

  /// General Library Documentation Undocument By General Corporation & Global Corporation & General Developer
  external int type;

  @ffi.Int32()

  /// General Library Documentation Undocument By General Corporation & Global Corporation & General Developer
  external int format;

  @ffi.Int()

  /// General Library Documentation Undocument By General Corporation & Global Corporation & General Developer
  external int sampleRate;

  @ffi.Int()

  /// General Library Documentation Undocument By General Corporation & Global Corporation & General Developer
  external int channels;

  @ffi.Int()

  /// General Library Documentation Undocument By General Corporation & Global Corporation & General Developer
  external int bufferFrameSize;

  @ma_bool8()

  /// General Library Documentation Undocument By General Corporation & Global Corporation & General Developer
  external int noFixedSizedCallback;

  @ffi.Int64()

  /// General Library Documentation Undocument By General Corporation & Global Corporation & General Developer
  external int notificationPortId;

  @ffi.Int32()

  /// General Library Documentation Undocument By General Corporation & Global Corporation & General Developer
  external int channelMixMode;

  @ffi.Int32()

  /// General Library Documentation Undocument By General Corporation & Global Corporation & General Developer
  external int performanceProfile;

  /// General Library Documentation Undocument By General Corporation & Global Corporation & General Developer
  external ma_resampler_config resampling;
}

/// General Library Documentation Undocument By General Corporation & Global Corporation & General Developer
final class ca_device extends ffi.Struct {
  /// General Library Documentation Undocument By General Corporation & Global Corporation & General Developer
  external ca_device_config config;

  /// General Library Documentation Undocument By General Corporation & Global Corporation & General Developer
  external ffi.Pointer<ca_device_notification> pNotification;

  /// General Library Documentation Undocument By General Corporation & Global Corporation & General Developer
  external ma_device device;

  /// General Library Documentation Undocument By General Corporation & Global Corporation & General Developer
  external ma_pcm_rb buffer;
}

/// General Library Documentation Undocument By General Corporation & Global Corporation & General Developer
final class ca_log_message extends ffi.Struct {
  @ffi.Int32()

  /// General Library Documentation Undocument By General Corporation & Global Corporation & General Developer
  external int level;

  /// General Library Documentation Undocument By General Corporation & Global Corporation & General Developer
  external ffi.Pointer<ffi.Char> pMessage;
}

/// General Library Documentation Undocument By General Corporation & Global Corporation & General Developer
final class ca_log extends ffi.Struct {
  /// General Library Documentation Undocument By General Corporation & Global Corporation & General Developer
  external ma_mutex lock;

  /// General Library Documentation Undocument By General Corporation & Global Corporation & General Developer
  external ma_log log;

  @Dart_Port_DL()

  /// General Library Documentation Undocument By General Corporation & Global Corporation & General Developer
  external int portId;

  /// General Library Documentation Undocument By General Corporation & Global Corporation & General Developer
  external Dart_CObject notification;

  @ma_bool8()

  /// General Library Documentation Undocument By General Corporation & Global Corporation & General Developer
  external int hasNotification;

  @ma_uint32()

  /// General Library Documentation Undocument By General Corporation & Global Corporation & General Developer
  external int messageCount;

  @ffi.Array.multi([256])

  /// General Library Documentation Undocument By General Corporation & Global Corporation & General Developer
  external ffi.Array<ca_log_message> messages;
}

/// General Library Documentation Undocument By General Corporation & Global Corporation & General Developer
final class ma_resource_manager extends ffi.Struct {
  /// General Library Documentation Undocument By General Corporation & Global Corporation & General Developer
  external ma_resource_manager_config config;

  /// General Library Documentation Undocument By General Corporation & Global Corporation & General Developer
  external ffi.Pointer<ma_resource_manager_data_buffer_node>
      pRootDataBufferNode;

  /// General Library Documentation Undocument By General Corporation & Global Corporation & General Developer
  external ma_mutex dataBufferBSTLock;

  @ffi.Array.multi([64])

  /// General Library Documentation Undocument By General Corporation & Global Corporation & General Developer
  external ffi.Array<ma_thread> jobThreads;

  /// General Library Documentation Undocument By General Corporation & Global Corporation & General Developer
  external ma_job_queue jobQueue;

  /// General Library Documentation Undocument By General Corporation & Global Corporation & General Developer
  external ma_default_vfs defaultVFS;

  /// General Library Documentation Undocument By General Corporation & Global Corporation & General Developer
  external ma_log log;
}

/// General Library Documentation Undocument By General Corporation & Global Corporation & General Developer
final class ma_resource_manager_config extends ffi.Struct {
  /// General Library Documentation Undocument By General Corporation & Global Corporation & General Developer
  external ma_allocation_callbacks allocationCallbacks;

  /// General Library Documentation Undocument By General Corporation & Global Corporation & General Developer
  external ffi.Pointer<ma_log> pLog;

  @ffi.Int32()

  /// General Library Documentation Undocument By General Corporation & Global Corporation & General Developer
  external int decodedFormat;

  @ma_uint32()

  /// General Library Documentation Undocument By General Corporation & Global Corporation & General Developer
  external int decodedChannels;

  @ma_uint32()

  /// General Library Documentation Undocument By General Corporation & Global Corporation & General Developer
  external int decodedSampleRate;

  @ma_uint32()

  /// General Library Documentation Undocument By General Corporation & Global Corporation & General Developer
  external int jobThreadCount;

  @ffi.Size()

  /// General Library Documentation Undocument By General Corporation & Global Corporation & General Developer
  external int jobThreadStackSize;

  @ma_uint32()

  /// General Library Documentation Undocument By General Corporation & Global Corporation & General Developer
  external int jobQueueCapacity;

  @ma_uint32()

  /// General Library Documentation Undocument By General Corporation & Global Corporation & General Developer
  external int flags;

  /// General Library Documentation Undocument By General Corporation & Global Corporation & General Developer
  external ffi.Pointer<ma_vfs> pVFS;

  /// General Library Documentation Undocument By General Corporation & Global Corporation & General Developer
  external ffi.Pointer<ffi.Pointer<ma_decoding_backend_vtable>>
      ppCustomDecodingBackendVTables;

  @ma_uint32()

  /// General Library Documentation Undocument By General Corporation & Global Corporation & General Developer
  external int customDecodingBackendCount;

  /// General Library Documentation Undocument By General Corporation & Global Corporation & General Developer
  external ffi.Pointer<ffi.Void> pCustomDecodingBackendUserData;
}

/// General Library Documentation Undocument By General Corporation & Global Corporation & General Developer
final class ma_resource_manager_data_buffer_node extends ffi.Struct {
  @ma_uint32()

  /// General Library Documentation Undocument By General Corporation & Global Corporation & General Developer
  external int hashedName32;

  @ma_uint32()

  /// General Library Documentation Undocument By General Corporation & Global Corporation & General Developer
  external int refCount;

  @ffi.Int32()

  /// General Library Documentation Undocument By General Corporation & Global Corporation & General Developer
  external int result;

  @ma_uint32()

  /// General Library Documentation Undocument By General Corporation & Global Corporation & General Developer
  external int executionCounter;

  @ma_uint32()

  /// General Library Documentation Undocument By General Corporation & Global Corporation & General Developer
  external int executionPointer;

  @ma_bool32()

  /// General Library Documentation Undocument By General Corporation & Global Corporation & General Developer
  external int isDataOwnedByResourceManager;

  /// General Library Documentation Undocument By General Corporation & Global Corporation & General Developer
  external ma_resource_manager_data_supply data;

  /// General Library Documentation Undocument By General Corporation & Global Corporation & General Developer
  external ffi.Pointer<ma_resource_manager_data_buffer_node> pParent;

  /// General Library Documentation Undocument By General Corporation & Global Corporation & General Developer
  external ffi.Pointer<ma_resource_manager_data_buffer_node> pChildLo;

  /// General Library Documentation Undocument By General Corporation & Global Corporation & General Developer
  external ffi.Pointer<ma_resource_manager_data_buffer_node> pChildHi;
}

/// General Library Documentation Undocument By General Corporation & Global Corporation & General Developer
final class ma_resource_manager_data_supply extends ffi.Struct {
  @ffi.Int32()

  /// General Library Documentation Undocument By General Corporation & Global Corporation & General Developer
  external int type;

  /// General Library Documentation Undocument By General Corporation & Global Corporation & General Developer
  external UnnamedUnion20 backend;
}

/// General Library Documentation Undocument By General Corporation & Global Corporation & General Developer
abstract class ma_resource_manager_data_supply_type {
  /// General Library Documentation Undocument By General Corporation & Global Corporation & General Developer
  static const int ma_resource_manager_data_supply_type_unknown = 0;

  /// General Library Documentation Undocument By General Corporation & Global Corporation & General Developer
  static const int ma_resource_manager_data_supply_type_encoded = 1;

  /// General Library Documentation Undocument By General Corporation & Global Corporation & General Developer
  static const int ma_resource_manager_data_supply_type_decoded = 2;

  /// General Library Documentation Undocument By General Corporation & Global Corporation & General Developer
  static const int ma_resource_manager_data_supply_type_decoded_paged = 3;
}

/// General Library Documentation Undocument By General Corporation & Global Corporation & General Developer
final class UnnamedUnion20 extends ffi.Union {
  /// General Library Documentation Undocument By General Corporation & Global Corporation & General Developer
  external UnnamedStruct59 encoded;

  /// General Library Documentation Undocument By General Corporation & Global Corporation & General Developer
  external UnnamedStruct60 decoded;

  /// General Library Documentation Undocument By General Corporation & Global Corporation & General Developer
  external UnnamedStruct61 decodedPaged;
}

/// General Library Documentation Undocument By General Corporation & Global Corporation & General Developer
final class UnnamedStruct59 extends ffi.Struct {
  /// General Library Documentation Undocument By General Corporation & Global Corporation & General Developer
  external ffi.Pointer<ffi.Void> pData;

  @ffi.Size()

  /// General Library Documentation Undocument By General Corporation & Global Corporation & General Developer
  external int sizeInBytes;
}

/// General Library Documentation Undocument By General Corporation & Global Corporation & General Developer
final class UnnamedStruct60 extends ffi.Struct {
  /// General Library Documentation Undocument By General Corporation & Global Corporation & General Developer
  external ffi.Pointer<ffi.Void> pData;

  @ma_uint64()

  /// General Library Documentation Undocument By General Corporation & Global Corporation & General Developer
  external int totalFrameCount;

  @ma_uint64()

  /// General Library Documentation Undocument By General Corporation & Global Corporation & General Developer
  external int decodedFrameCount;

  @ffi.Int32()

  /// General Library Documentation Undocument By General Corporation & Global Corporation & General Developer
  external int format;

  @ma_uint32()

  /// General Library Documentation Undocument By General Corporation & Global Corporation & General Developer
  external int channels;

  @ma_uint32()

  /// General Library Documentation Undocument By General Corporation & Global Corporation & General Developer
  external int sampleRate;
}

/// General Library Documentation Undocument By General Corporation & Global Corporation & General Developer
final class UnnamedStruct61 extends ffi.Struct {
  /// General Library Documentation Undocument By General Corporation & Global Corporation & General Developer
  external ma_paged_audio_buffer_data data;

  @ma_uint64()

  /// General Library Documentation Undocument By General Corporation & Global Corporation & General Developer
  external int decodedFrameCount;

  @ma_uint32()

  /// General Library Documentation Undocument By General Corporation & Global Corporation & General Developer
  external int sampleRate;
}

/// General Library Documentation Undocument By General Corporation & Global Corporation & General Developer
final class ma_resource_manager_data_buffer extends ffi.Struct {
  /// General Library Documentation Undocument By General Corporation & Global Corporation & General Developer
  external ma_data_source_base ds;

  /// General Library Documentation Undocument By General Corporation & Global Corporation & General Developer
  external ffi.Pointer<ma_resource_manager> pResourceManager;

  /// General Library Documentation Undocument By General Corporation & Global Corporation & General Developer
  external ffi.Pointer<ma_resource_manager_data_buffer_node> pNode;

  @ma_uint32()

  /// General Library Documentation Undocument By General Corporation & Global Corporation & General Developer
  external int flags;

  @ma_uint32()

  /// General Library Documentation Undocument By General Corporation & Global Corporation & General Developer
  external int executionCounter;

  @ma_uint32()

  /// General Library Documentation Undocument By General Corporation & Global Corporation & General Developer
  external int executionPointer;

  @ma_uint64()

  /// General Library Documentation Undocument By General Corporation & Global Corporation & General Developer
  external int seekTargetInPCMFrames;

  @ma_bool32()

  /// General Library Documentation Undocument By General Corporation & Global Corporation & General Developer
  external int seekToCursorOnNextRead;

  @ffi.Int32()

  /// General Library Documentation Undocument By General Corporation & Global Corporation & General Developer
  external int result;

  @ma_bool32()

  /// General Library Documentation Undocument By General Corporation & Global Corporation & General Developer
  external int isLooping;

  /// General Library Documentation Undocument By General Corporation & Global Corporation & General Developer
  external ma_atomic_bool32 isConnectorInitialized;

  /// General Library Documentation Undocument By General Corporation & Global Corporation & General Developer
  external UnnamedUnion21 connector;
}

/// General Library Documentation Undocument By General Corporation & Global Corporation & General Developer
final class UnnamedUnion21 extends ffi.Union {
  /// General Library Documentation Undocument By General Corporation & Global Corporation & General Developer
  external ma_decoder decoder;

  /// General Library Documentation Undocument By General Corporation & Global Corporation & General Developer
  external ma_audio_buffer buffer;

  /// General Library Documentation Undocument By General Corporation & Global Corporation & General Developer
  external ma_paged_audio_buffer pagedBuffer;
}

/// General Library Documentation Undocument By General Corporation & Global Corporation & General Developer
final class ma_resource_manager_data_stream extends ffi.Struct {
  /// General Library Documentation Undocument By General Corporation & Global Corporation & General Developer
  external ma_data_source_base ds;

  /// General Library Documentation Undocument By General Corporation & Global Corporation & General Developer
  external ffi.Pointer<ma_resource_manager> pResourceManager;

  @ma_uint32()

  /// General Library Documentation Undocument By General Corporation & Global Corporation & General Developer
  external int flags;

  /// General Library Documentation Undocument By General Corporation & Global Corporation & General Developer
  external ma_decoder decoder;

  @ma_bool32()

  /// General Library Documentation Undocument By General Corporation & Global Corporation & General Developer
  external int isDecoderInitialized;

  @ma_uint64()

  /// General Library Documentation Undocument By General Corporation & Global Corporation & General Developer
  external int totalLengthInPCMFrames;

  @ma_uint32()

  /// General Library Documentation Undocument By General Corporation & Global Corporation & General Developer
  external int relativeCursor;

  @ma_uint64()

  /// General Library Documentation Undocument By General Corporation & Global Corporation & General Developer
  external int absoluteCursor;

  @ma_uint32()

  /// General Library Documentation Undocument By General Corporation & Global Corporation & General Developer
  external int currentPageIndex;

  @ma_uint32()

  /// General Library Documentation Undocument By General Corporation & Global Corporation & General Developer
  external int executionCounter;

  @ma_uint32()

  /// General Library Documentation Undocument By General Corporation & Global Corporation & General Developer
  external int executionPointer;

  @ma_bool32()

  /// General Library Documentation Undocument By General Corporation & Global Corporation & General Developer
  external int isLooping;

  /// General Library Documentation Undocument By General Corporation & Global Corporation & General Developer
  external ffi.Pointer<ffi.Void> pPageData;

  @ffi.Array.multi([2])

  /// General Library Documentation Undocument By General Corporation & Global Corporation & General Developer
  external ffi.Array<ma_uint32> pageFrameCount;

  @ffi.Int32()

  /// General Library Documentation Undocument By General Corporation & Global Corporation & General Developer
  external int result;

  @ma_bool32()

  /// General Library Documentation Undocument By General Corporation & Global Corporation & General Developer
  external int isDecoderAtEnd;

  @ffi.Array.multi([2])

  /// General Library Documentation Undocument By General Corporation & Global Corporation & General Developer
  external ffi.Array<ma_bool32> isPageValid;

  @ma_bool32()

  /// General Library Documentation Undocument By General Corporation & Global Corporation & General Developer
  external int seekCounter;
}

/// General Library Documentation Undocument By General Corporation & Global Corporation & General Developer
final class ma_resource_manager_data_source extends ffi.Struct {
  /// General Library Documentation Undocument By General Corporation & Global Corporation & General Developer
  external UnnamedUnion22 backend;

  @ma_uint32()

  /// General Library Documentation Undocument By General Corporation & Global Corporation & General Developer
  external int flags;

  @ma_uint32()

  /// General Library Documentation Undocument By General Corporation & Global Corporation & General Developer
  external int executionCounter;

  @ma_uint32()

  /// General Library Documentation Undocument By General Corporation & Global Corporation & General Developer
  external int executionPointer;
}

/// General Library Documentation Undocument By General Corporation & Global Corporation & General Developer
final class UnnamedUnion22 extends ffi.Union {
  /// General Library Documentation Undocument By General Corporation & Global Corporation & General Developer
  external ma_resource_manager_data_buffer buffer;

  /// General Library Documentation Undocument By General Corporation & Global Corporation & General Developer
  external ma_resource_manager_data_stream stream;
}

/// General Library Documentation Undocument By General Corporation & Global Corporation & General Developer
abstract class ma_resource_manager_data_source_flags {
  /// General Library Documentation Undocument By General Corporation & Global Corporation & General Developer
  static const int MA_RESOURCE_MANAGER_DATA_SOURCE_FLAG_STREAM = 1;

  /// General Library Documentation Undocument By General Corporation & Global Corporation & General Developer
  static const int MA_RESOURCE_MANAGER_DATA_SOURCE_FLAG_DECODE = 2;

  /// General Library Documentation Undocument By General Corporation & Global Corporation & General Developer
  static const int MA_RESOURCE_MANAGER_DATA_SOURCE_FLAG_ASYNC = 4;

  /// General Library Documentation Undocument By General Corporation & Global Corporation & General Developer
  static const int MA_RESOURCE_MANAGER_DATA_SOURCE_FLAG_WAIT_INIT = 8;

  /// General Library Documentation Undocument By General Corporation & Global Corporation & General Developer
  static const int MA_RESOURCE_MANAGER_DATA_SOURCE_FLAG_UNKNOWN_LENGTH = 16;
}

/// General Library Documentation Undocument By General Corporation & Global Corporation & General Developer
final class ma_resource_manager_pipeline_stage_notification extends ffi.Struct {
  /// General Library Documentation Undocument By General Corporation & Global Corporation & General Developer
  external ffi.Pointer<ma_async_notification> pNotification;

  /// General Library Documentation Undocument By General Corporation & Global Corporation & General Developer
  external ffi.Pointer<ma_fence> pFence;
}

/// General Library Documentation Undocument By General Corporation & Global Corporation & General Developer
final class ma_resource_manager_pipeline_notifications extends ffi.Struct {
  /// General Library Documentation Undocument By General Corporation & Global Corporation & General Developer
  external ma_resource_manager_pipeline_stage_notification init;

  /// General Library Documentation Undocument By General Corporation & Global Corporation & General Developer
  external ma_resource_manager_pipeline_stage_notification done;
}

/// General Library Documentation Undocument By General Corporation & Global Corporation & General Developer
abstract class ma_resource_manager_flags {
  /// General Library Documentation Undocument By General Corporation & Global Corporation & General Developer
  static const int MA_RESOURCE_MANAGER_FLAG_NON_BLOCKING = 1;

  /// General Library Documentation Undocument By General Corporation & Global Corporation & General Developer
  static const int MA_RESOURCE_MANAGER_FLAG_NO_THREADING = 2;
}

/// General Library Documentation Undocument By General Corporation & Global Corporation & General Developer
final class ma_resource_manager_data_source_config extends ffi.Struct {
  /// General Library Documentation Undocument By General Corporation & Global Corporation & General Developer
  external ffi.Pointer<ffi.Char> pFilePath;

  /// General Library Documentation Undocument By General Corporation & Global Corporation & General Developer
  external ffi.Pointer<ffi.WChar> pFilePathW;

  /// General Library Documentation Undocument By General Corporation & Global Corporation & General Developer
  external ffi.Pointer<ma_resource_manager_pipeline_notifications>
      pNotifications;

  @ma_uint64()

  /// General Library Documentation Undocument By General Corporation & Global Corporation & General Developer
  external int initialSeekPointInPCMFrames;

  @ma_uint64()

  /// General Library Documentation Undocument By General Corporation & Global Corporation & General Developer
  external int rangeBegInPCMFrames;

  @ma_uint64()

  /// General Library Documentation Undocument By General Corporation & Global Corporation & General Developer
  external int rangeEndInPCMFrames;

  @ma_uint64()

  /// General Library Documentation Undocument By General Corporation & Global Corporation & General Developer
  external int loopPointBegInPCMFrames;

  @ma_uint64()

  /// General Library Documentation Undocument By General Corporation & Global Corporation & General Developer
  external int loopPointEndInPCMFrames;

  @ma_bool32()

  /// General Library Documentation Undocument By General Corporation & Global Corporation & General Developer
  external int isLooping;

  @ma_uint32()

  /// General Library Documentation Undocument By General Corporation & Global Corporation & General Developer
  external int flags;
}

/// General Library Documentation Undocument By General Corporation & Global Corporation & General Developer
final class ma_node_graph extends ffi.Struct {
  /// General Library Documentation Undocument By General Corporation & Global Corporation & General Developer
  external ma_node_base base;

  /// General Library Documentation Undocument By General Corporation & Global Corporation & General Developer
  external ma_node_base endpoint;

  @ma_uint16()

  /// General Library Documentation Undocument By General Corporation & Global Corporation & General Developer
  external int nodeCacheCapInFrames;

  @ma_bool32()

  /// General Library Documentation Undocument By General Corporation & Global Corporation & General Developer
  external int isReading;
}

/// General Library Documentation Undocument By General Corporation & Global Corporation & General Developer
final class ma_node_base extends ffi.Struct {
  /// General Library Documentation Undocument By General Corporation & Global Corporation & General Developer
  external ffi.Pointer<ma_node_graph> pNodeGraph;

  /// General Library Documentation Undocument By General Corporation & Global Corporation & General Developer
  external ffi.Pointer<ma_node_vtable> vtable;

  /// General Library Documentation Undocument By General Corporation & Global Corporation & General Developer
  external ffi.Pointer<ffi.Float> pCachedData;

  @ma_uint16()

  /// General Library Documentation Undocument By General Corporation & Global Corporation & General Developer
  external int cachedDataCapInFramesPerBus;

  @ma_uint16()

  /// General Library Documentation Undocument By General Corporation & Global Corporation & General Developer
  external int cachedFrameCountOut;

  @ma_uint16()

  /// General Library Documentation Undocument By General Corporation & Global Corporation & General Developer
  external int cachedFrameCountIn;

  @ma_uint16()

  /// General Library Documentation Undocument By General Corporation & Global Corporation & General Developer
  external int consumedFrameCountIn;

  @ffi.Int32()

  /// General Library Documentation Undocument By General Corporation & Global Corporation & General Developer
  external int state;

  @ffi.Array.multi([2])

  /// General Library Documentation Undocument By General Corporation & Global Corporation & General Developer
  external ffi.Array<ma_uint64> stateTimes;

  @ma_uint64()

  /// General Library Documentation Undocument By General Corporation & Global Corporation & General Developer
  external int localTime;

  @ma_uint32()

  /// General Library Documentation Undocument By General Corporation & Global Corporation & General Developer
  external int inputBusCount;

  @ma_uint32()

  /// General Library Documentation Undocument By General Corporation & Global Corporation & General Developer
  external int outputBusCount;

  /// General Library Documentation Undocument By General Corporation & Global Corporation & General Developer
  external ffi.Pointer<ma_node_input_bus> pInputBuses;

  /// General Library Documentation Undocument By General Corporation & Global Corporation & General Developer
  external ffi.Pointer<ma_node_output_bus> pOutputBuses;

  @ffi.Array.multi([2])

  /// General Library Documentation Undocument By General Corporation & Global Corporation & General Developer
  external ffi.Array<ma_node_input_bus> inputBuses;

  @ffi.Array.multi([2])

  /// General Library Documentation Undocument By General Corporation & Global Corporation & General Developer
  external ffi.Array<ma_node_output_bus> outputBuses;

  /// General Library Documentation Undocument By General Corporation & Global Corporation & General Developer
  external ffi.Pointer<ffi.Void> pHeap;

  @ma_bool32()

  /// General Library Documentation Undocument By General Corporation & Global Corporation & General Developer
  external int ownsHeap;
}

/// General Library Documentation Undocument By General Corporation & Global Corporation & General Developer
final class ma_node_vtable extends ffi.Struct {
  /// General Library Documentation Undocument By General Corporation & Global Corporation & General Developer
  external ffi.Pointer<
      ffi.NativeFunction<
          ffi.Void Function(
              ffi.Pointer<ma_node> pNode,
              ffi.Pointer<ffi.Pointer<ffi.Float>> ppFramesIn,
              ffi.Pointer<ma_uint32> pFrameCountIn,
              ffi.Pointer<ffi.Pointer<ffi.Float>> ppFramesOut,
              ffi.Pointer<ma_uint32> pFrameCountOut)>> onProcess;

  /// General Library Documentation Undocument By General Corporation & Global Corporation & General Developer
  external ffi.Pointer<
          ffi.NativeFunction<
              ffi.Int32 Function(
                  ffi.Pointer<ma_node> pNode,
                  ma_uint32 outputFrameCount,
                  ffi.Pointer<ma_uint32> pInputFrameCount)>>
      onGetRequiredInputFrameCount;

  @ma_uint8()

  /// General Library Documentation Undocument By General Corporation & Global Corporation & General Developer
  external int inputBusCount;

  @ma_uint8()

  /// General Library Documentation Undocument By General Corporation & Global Corporation & General Developer
  external int outputBusCount;

  @ma_uint32()

  /// General Library Documentation Undocument By General Corporation & Global Corporation & General Developer
  external int flags;
}

/// General Library Documentation Undocument By General Corporation & Global Corporation & General Developer
typedef ma_node = ffi.Void;

/// General Library Documentation Undocument By General Corporation & Global Corporation & General Developer
typedef Dartma_node = void;

/// General Library Documentation Undocument By General Corporation & Global Corporation & General Developer
abstract class ma_node_state {
  /// General Library Documentation Undocument By General Corporation & Global Corporation & General Developer
  static const int ma_node_state_started = 0;

  /// General Library Documentation Undocument By General Corporation & Global Corporation & General Developer
  static const int ma_node_state_stopped = 1;
}

/// General Library Documentation Undocument By General Corporation & Global Corporation & General Developer
final class ma_node_input_bus extends ffi.Struct {
  /// General Library Documentation Undocument By General Corporation & Global Corporation & General Developer
  external ma_node_output_bus head;

  @ma_uint32()

  /// General Library Documentation Undocument By General Corporation & Global Corporation & General Developer
  external int nextCounter;

  @ma_spinlock()

  /// General Library Documentation Undocument By General Corporation & Global Corporation & General Developer
  external int lock;

  @ma_uint8()

  /// General Library Documentation Undocument By General Corporation & Global Corporation & General Developer
  external int channels;
}

/// General Library Documentation Undocument By General Corporation & Global Corporation & General Developer
final class ma_node_output_bus extends ffi.Struct {
  /// General Library Documentation Undocument By General Corporation & Global Corporation & General Developer
  external ffi.Pointer<ma_node> pNode;

  @ma_uint8()

  /// General Library Documentation Undocument By General Corporation & Global Corporation & General Developer
  external int outputBusIndex;

  @ma_uint8()

  /// General Library Documentation Undocument By General Corporation & Global Corporation & General Developer
  external int channels;

  @ma_uint8()

  /// General Library Documentation Undocument By General Corporation & Global Corporation & General Developer
  external int inputNodeInputBusIndex;

  @ma_uint32()

  /// General Library Documentation Undocument By General Corporation & Global Corporation & General Developer
  external int flags;

  @ma_uint32()

  /// General Library Documentation Undocument By General Corporation & Global Corporation & General Developer
  external int refCount;

  @ma_bool32()

  /// General Library Documentation Undocument By General Corporation & Global Corporation & General Developer
  external int isAttached;

  @ma_spinlock()

  /// General Library Documentation Undocument By General Corporation & Global Corporation & General Developer
  external int lock;

  @ffi.Float()

  /// General Library Documentation Undocument By General Corporation & Global Corporation & General Developer
  external double volume;

  /// General Library Documentation Undocument By General Corporation & Global Corporation & General Developer
  external ffi.Pointer<ma_node_output_bus> pNext;

  /// General Library Documentation Undocument By General Corporation & Global Corporation & General Developer
  external ffi.Pointer<ma_node_output_bus> pPrev;

  /// General Library Documentation Undocument By General Corporation & Global Corporation & General Developer
  external ffi.Pointer<ma_node> pInputNode;
}

/// General Library Documentation Undocument By General Corporation & Global Corporation & General Developer
abstract class ma_node_flags {
  /// General Library Documentation Undocument By General Corporation & Global Corporation & General Developer
  static const int MA_NODE_FLAG_PASSTHROUGH = 1;

  /// General Library Documentation Undocument By General Corporation & Global Corporation & General Developer
  static const int MA_NODE_FLAG_CONTINUOUS_PROCESSING = 2;

  /// General Library Documentation Undocument By General Corporation & Global Corporation & General Developer
  static const int MA_NODE_FLAG_ALLOW_NULL_INPUT = 4;

  /// General Library Documentation Undocument By General Corporation & Global Corporation & General Developer
  static const int MA_NODE_FLAG_DIFFERENT_PROCESSING_RATES = 8;

  /// General Library Documentation Undocument By General Corporation & Global Corporation & General Developer
  static const int MA_NODE_FLAG_SILENT_OUTPUT = 16;
}

/// General Library Documentation Undocument By General Corporation & Global Corporation & General Developer
final class ma_node_config extends ffi.Struct {
  /// General Library Documentation Undocument By General Corporation & Global Corporation & General Developer
  external ffi.Pointer<ma_node_vtable> vtable;

  @ffi.Int32()

  /// General Library Documentation Undocument By General Corporation & Global Corporation & General Developer
  external int initialState;

  @ma_uint32()

  /// General Library Documentation Undocument By General Corporation & Global Corporation & General Developer
  external int inputBusCount;

  @ma_uint32()

  /// General Library Documentation Undocument By General Corporation & Global Corporation & General Developer
  external int outputBusCount;

  /// General Library Documentation Undocument By General Corporation & Global Corporation & General Developer
  external ffi.Pointer<ma_uint32> pInputChannels;

  /// General Library Documentation Undocument By General Corporation & Global Corporation & General Developer
  external ffi.Pointer<ma_uint32> pOutputChannels;
}

/// General Library Documentation Undocument By General Corporation & Global Corporation & General Developer
final class ma_node_graph_config extends ffi.Struct {
  @ma_uint32()

  /// General Library Documentation Undocument By General Corporation & Global Corporation & General Developer
  external int channels;

  @ma_uint16()

  /// General Library Documentation Undocument By General Corporation & Global Corporation & General Developer
  external int nodeCacheCapInFrames;
}

/// General Library Documentation Undocument By General Corporation & Global Corporation & General Developer
final class ma_data_source_node_config extends ffi.Struct {
  /// General Library Documentation Undocument By General Corporation & Global Corporation & General Developer
  external ma_node_config nodeConfig;

  /// General Library Documentation Undocument By General Corporation & Global Corporation & General Developer
  external ffi.Pointer<ma_data_source> pDataSource;
}

/// General Library Documentation Undocument By General Corporation & Global Corporation & General Developer
final class ma_data_source_node extends ffi.Struct {
  /// General Library Documentation Undocument By General Corporation & Global Corporation & General Developer
  external ma_node_base base;

  /// General Library Documentation Undocument By General Corporation & Global Corporation & General Developer
  external ffi.Pointer<ma_data_source> pDataSource;
}

/// General Library Documentation Undocument By General Corporation & Global Corporation & General Developer
final class ma_splitter_node_config extends ffi.Struct {
  /// General Library Documentation Undocument By General Corporation & Global Corporation & General Developer
  external ma_node_config nodeConfig;

  @ma_uint32()

  /// General Library Documentation Undocument By General Corporation & Global Corporation & General Developer
  external int channels;

  @ma_uint32()

  /// General Library Documentation Undocument By General Corporation & Global Corporation & General Developer
  external int outputBusCount;
}

/// General Library Documentation Undocument By General Corporation & Global Corporation & General Developer
final class ma_splitter_node extends ffi.Struct {
  /// General Library Documentation Undocument By General Corporation & Global Corporation & General Developer
  external ma_node_base base;
}

/// General Library Documentation Undocument By General Corporation & Global Corporation & General Developer
final class ma_biquad_node_config extends ffi.Struct {
  /// General Library Documentation Undocument By General Corporation & Global Corporation & General Developer
  external ma_node_config nodeConfig;

  /// General Library Documentation Undocument By General Corporation & Global Corporation & General Developer
  external ma_biquad_config biquad;
}

/// General Library Documentation Undocument By General Corporation & Global Corporation & General Developer
final class ma_biquad_node extends ffi.Struct {
  /// General Library Documentation Undocument By General Corporation & Global Corporation & General Developer
  external ma_node_base baseNode;

  /// General Library Documentation Undocument By General Corporation & Global Corporation & General Developer
  external ma_biquad biquad;
}

/// General Library Documentation Undocument By General Corporation & Global Corporation & General Developer
final class ma_lpf_node_config extends ffi.Struct {
  /// General Library Documentation Undocument By General Corporation & Global Corporation & General Developer
  external ma_node_config nodeConfig;

  /// General Library Documentation Undocument By General Corporation & Global Corporation & General Developer
  external ma_lpf_config lpf;
}

/// General Library Documentation Undocument By General Corporation & Global Corporation & General Developer
final class ma_lpf_node extends ffi.Struct {
  /// General Library Documentation Undocument By General Corporation & Global Corporation & General Developer
  external ma_node_base baseNode;

  /// General Library Documentation Undocument By General Corporation & Global Corporation & General Developer
  external ma_lpf lpf;
}

/// General Library Documentation Undocument By General Corporation & Global Corporation & General Developer
final class ma_hpf_node_config extends ffi.Struct {
  /// General Library Documentation Undocument By General Corporation & Global Corporation & General Developer
  external ma_node_config nodeConfig;

  /// General Library Documentation Undocument By General Corporation & Global Corporation & General Developer
  external ma_hpf_config hpf;
}

/// General Library Documentation Undocument By General Corporation & Global Corporation & General Developer
final class ma_hpf_node extends ffi.Struct {
  /// General Library Documentation Undocument By General Corporation & Global Corporation & General Developer
  external ma_node_base baseNode;

  /// General Library Documentation Undocument By General Corporation & Global Corporation & General Developer
  external ma_hpf hpf;
}

/// General Library Documentation Undocument By General Corporation & Global Corporation & General Developer
final class ma_bpf_node_config extends ffi.Struct {
  /// General Library Documentation Undocument By General Corporation & Global Corporation & General Developer
  external ma_node_config nodeConfig;

  /// General Library Documentation Undocument By General Corporation & Global Corporation & General Developer
  external ma_bpf_config bpf;
}

/// General Library Documentation Undocument By General Corporation & Global Corporation & General Developer
final class ma_bpf_node extends ffi.Struct {
  /// General Library Documentation Undocument By General Corporation & Global Corporation & General Developer
  external ma_node_base baseNode;

  /// General Library Documentation Undocument By General Corporation & Global Corporation & General Developer
  external ma_bpf bpf;
}

/// General Library Documentation Undocument By General Corporation & Global Corporation & General Developer
final class ma_notch_node_config extends ffi.Struct {
  /// General Library Documentation Undocument By General Corporation & Global Corporation & General Developer
  external ma_node_config nodeConfig;

  /// General Library Documentation Undocument By General Corporation & Global Corporation & General Developer
  external ma_notch_config notch;
}

/// Notching Filter
typedef ma_notch_config = ma_notch2_config;

/// General Library Documentation Undocument By General Corporation & Global Corporation & General Developer
final class ma_notch_node extends ffi.Struct {
  /// General Library Documentation Undocument By General Corporation & Global Corporation & General Developer
  external ma_node_base baseNode;

  /// General Library Documentation Undocument By General Corporation & Global Corporation & General Developer
  external ma_notch2 notch;
}

/// General Library Documentation Undocument By General Corporation & Global Corporation & General Developer
final class ma_peak_node_config extends ffi.Struct {
  /// General Library Documentation Undocument By General Corporation & Global Corporation & General Developer
  external ma_node_config nodeConfig;

  /// General Library Documentation Undocument By General Corporation & Global Corporation & General Developer
  external ma_peak_config peak;
}

/// Peaking EQ Filter
typedef ma_peak_config = ma_peak2_config;

/// General Library Documentation Undocument By General Corporation & Global Corporation & General Developer
final class ma_peak_node extends ffi.Struct {
  /// General Library Documentation Undocument By General Corporation & Global Corporation & General Developer
  external ma_node_base baseNode;

  /// General Library Documentation Undocument By General Corporation & Global Corporation & General Developer
  external ma_peak2 peak;
}

/// General Library Documentation Undocument By General Corporation & Global Corporation & General Developer
final class ma_loshelf_node_config extends ffi.Struct {
  /// General Library Documentation Undocument By General Corporation & Global Corporation & General Developer
  external ma_node_config nodeConfig;

  /// General Library Documentation Undocument By General Corporation & Global Corporation & General Developer
  external ma_loshelf_config loshelf;
}

/// Low Shelf Filter
typedef ma_loshelf_config = ma_loshelf2_config;

/// General Library Documentation Undocument By General Corporation & Global Corporation & General Developer
final class ma_loshelf_node extends ffi.Struct {
  /// General Library Documentation Undocument By General Corporation & Global Corporation & General Developer
  external ma_node_base baseNode;

  /// General Library Documentation Undocument By General Corporation & Global Corporation & General Developer
  external ma_loshelf2 loshelf;
}

/// General Library Documentation Undocument By General Corporation & Global Corporation & General Developer
final class ma_hishelf_node_config extends ffi.Struct {
  /// General Library Documentation Undocument By General Corporation & Global Corporation & General Developer
  external ma_node_config nodeConfig;

  /// General Library Documentation Undocument By General Corporation & Global Corporation & General Developer
  external ma_hishelf_config hishelf;
}

/// High Shelf Filter
typedef ma_hishelf_config = ma_hishelf2_config;

/// General Library Documentation Undocument By General Corporation & Global Corporation & General Developer
final class ma_hishelf_node extends ffi.Struct {
  /// General Library Documentation Undocument By General Corporation & Global Corporation & General Developer
  external ma_node_base baseNode;

  /// General Library Documentation Undocument By General Corporation & Global Corporation & General Developer
  external ma_hishelf2 hishelf;
}

/// General Library Documentation Undocument By General Corporation & Global Corporation & General Developer
final class ma_delay_node_config extends ffi.Struct {
  /// General Library Documentation Undocument By General Corporation & Global Corporation & General Developer
  external ma_node_config nodeConfig;

  /// General Library Documentation Undocument By General Corporation & Global Corporation & General Developer
  external ma_delay_config delay;
}

/// General Library Documentation Undocument By General Corporation & Global Corporation & General Developer
final class ma_delay_node extends ffi.Struct {
  /// General Library Documentation Undocument By General Corporation & Global Corporation & General Developer
  external ma_node_base baseNode;

  /// General Library Documentation Undocument By General Corporation & Global Corporation & General Developer
  external ma_delay delay;
}

/// General Library Documentation Undocument By General Corporation & Global Corporation & General Developer
final class ma_engine extends ffi.Struct {
  /// General Library Documentation Undocument By General Corporation & Global Corporation & General Developer
  external ma_node_graph nodeGraph;

  /// General Library Documentation Undocument By General Corporation & Global Corporation & General Developer
  external ffi.Pointer<ma_resource_manager> pResourceManager;

  /// General Library Documentation Undocument By General Corporation & Global Corporation & General Developer
  external ffi.Pointer<ma_device> pDevice;

  /// General Library Documentation Undocument By General Corporation & Global Corporation & General Developer
  external ffi.Pointer<ma_log> pLog;

  @ma_uint32()

  /// General Library Documentation Undocument By General Corporation & Global Corporation & General Developer
  external int sampleRate;

  @ma_uint32()

  /// General Library Documentation Undocument By General Corporation & Global Corporation & General Developer
  external int listenerCount;

  @ffi.Array.multi([4])

  /// General Library Documentation Undocument By General Corporation & Global Corporation & General Developer
  external ffi.Array<ma_spatializer_listener> listeners;

  /// General Library Documentation Undocument By General Corporation & Global Corporation & General Developer
  external ma_allocation_callbacks allocationCallbacks;

  @ma_bool8()

  /// General Library Documentation Undocument By General Corporation & Global Corporation & General Developer
  external int ownsResourceManager;

  @ma_bool8()

  /// General Library Documentation Undocument By General Corporation & Global Corporation & General Developer
  external int ownsDevice;

  @ma_spinlock()

  /// General Library Documentation Undocument By General Corporation & Global Corporation & General Developer
  external int inlinedSoundLock;

  /// General Library Documentation Undocument By General Corporation & Global Corporation & General Developer
  external ffi.Pointer<ma_sound_inlined> pInlinedSoundHead;

  @ma_uint32()

  /// General Library Documentation Undocument By General Corporation & Global Corporation & General Developer
  external int inlinedSoundCount;

  @ma_uint32()

  /// General Library Documentation Undocument By General Corporation & Global Corporation & General Developer
  external int gainSmoothTimeInFrames;

  @ma_uint32()

  /// General Library Documentation Undocument By General Corporation & Global Corporation & General Developer
  external int defaultVolumeSmoothTimeInPCMFrames;

  @ffi.Int32()

  /// General Library Documentation Undocument By General Corporation & Global Corporation & General Developer
  external int monoExpansionMode;

  /// General Library Documentation Undocument By General Corporation & Global Corporation & General Developer
  external ma_engine_process_proc onProcess;

  /// General Library Documentation Undocument By General Corporation & Global Corporation & General Developer
  external ffi.Pointer<ffi.Void> pProcessUserData;
}

/// General Library Documentation Undocument By General Corporation & Global Corporation & General Developer
final class ma_sound_inlined extends ffi.Struct {
  /// General Library Documentation Undocument By General Corporation & Global Corporation & General Developer
  external ma_sound sound;

  /// General Library Documentation Undocument By General Corporation & Global Corporation & General Developer
  external ffi.Pointer<ma_sound_inlined> pNext;

  /// General Library Documentation Undocument By General Corporation & Global Corporation & General Developer
  external ffi.Pointer<ma_sound_inlined> pPrev;
}

/// General Library Documentation Undocument By General Corporation & Global Corporation & General Developer
final class ma_sound extends ffi.Struct {
  /// General Library Documentation Undocument By General Corporation & Global Corporation & General Developer
  external ma_engine_node engineNode;

  /// General Library Documentation Undocument By General Corporation & Global Corporation & General Developer
  external ffi.Pointer<ma_data_source> pDataSource;

  @ma_uint64()

  /// General Library Documentation Undocument By General Corporation & Global Corporation & General Developer
  external int seekTarget;

  @ma_bool32()

  /// General Library Documentation Undocument By General Corporation & Global Corporation & General Developer
  external int atEnd;

  /// General Library Documentation Undocument By General Corporation & Global Corporation & General Developer
  external ma_sound_end_proc endCallback;

  /// General Library Documentation Undocument By General Corporation & Global Corporation & General Developer
  external ffi.Pointer<ffi.Void> pEndCallbackUserData;

  @ma_bool8()

  /// General Library Documentation Undocument By General Corporation & Global Corporation & General Developer
  external int ownsDataSource;

  /// General Library Documentation Undocument By General Corporation & Global Corporation & General Developer
  external ffi.Pointer<ma_resource_manager_data_source>
      pResourceManagerDataSource;
}

/// General Library Documentation Undocument By General Corporation & Global Corporation & General Developer
final class ma_engine_node extends ffi.Struct {
  /// General Library Documentation Undocument By General Corporation & Global Corporation & General Developer
  external ma_node_base baseNode;

  /// General Library Documentation Undocument By General Corporation & Global Corporation & General Developer
  external ffi.Pointer<ma_engine> pEngine;

  @ma_uint32()

  /// General Library Documentation Undocument By General Corporation & Global Corporation & General Developer
  external int sampleRate;

  @ma_uint32()

  /// General Library Documentation Undocument By General Corporation & Global Corporation & General Developer
  external int volumeSmoothTimeInPCMFrames;

  @ffi.Int32()

  /// General Library Documentation Undocument By General Corporation & Global Corporation & General Developer
  external int monoExpansionMode;

  /// General Library Documentation Undocument By General Corporation & Global Corporation & General Developer
  external ma_fader fader;

  /// General Library Documentation Undocument By General Corporation & Global Corporation & General Developer
  external ma_linear_resampler resampler;

  /// General Library Documentation Undocument By General Corporation & Global Corporation & General Developer
  external ma_spatializer spatializer;

  /// General Library Documentation Undocument By General Corporation & Global Corporation & General Developer
  external ma_panner panner;

  /// General Library Documentation Undocument By General Corporation & Global Corporation & General Developer
  external ma_gainer volumeGainer;

  /// General Library Documentation Undocument By General Corporation & Global Corporation & General Developer
  external ma_atomic_float volume;

  @ffi.Float()

  /// General Library Documentation Undocument By General Corporation & Global Corporation & General Developer
  external double pitch;

  @ffi.Float()

  /// General Library Documentation Undocument By General Corporation & Global Corporation & General Developer
  external double oldPitch;

  @ffi.Float()

  /// General Library Documentation Undocument By General Corporation & Global Corporation & General Developer
  external double oldDopplerPitch;

  @ma_bool32()

  /// General Library Documentation Undocument By General Corporation & Global Corporation & General Developer
  external int isPitchDisabled;

  @ma_bool32()

  /// General Library Documentation Undocument By General Corporation & Global Corporation & General Developer
  external int isSpatializationDisabled;

  @ma_uint32()

  /// General Library Documentation Undocument By General Corporation & Global Corporation & General Developer
  external int pinnedListenerIndex;

  /// General Library Documentation Undocument By General Corporation & Global Corporation & General Developer
  external UnnamedStruct62 fadeSettings;

  @ma_bool8()

  /// General Library Documentation Undocument By General Corporation & Global Corporation & General Developer
  external int ownsHeap;

  /// General Library Documentation Undocument By General Corporation & Global Corporation & General Developer
  external ffi.Pointer<ffi.Void> pHeap;
}

/// General Library Documentation Undocument By General Corporation & Global Corporation & General Developer
final class UnnamedStruct62 extends ffi.Struct {
  /// General Library Documentation Undocument By General Corporation & Global Corporation & General Developer
  external ma_atomic_float volumeBeg;

  /// General Library Documentation Undocument By General Corporation & Global Corporation & General Developer
  external ma_atomic_float volumeEnd;

  /// General Library Documentation Undocument By General Corporation & Global Corporation & General Developer
  external ma_atomic_uint64 fadeLengthInFrames;

  /// General Library Documentation Undocument By General Corporation & Global Corporation & General Developer
  external ma_atomic_uint64 absoluteGlobalTimeInFrames;
}

/// General Library Documentation Undocument By General Corporation & Global Corporation & General Developer
typedef ma_sound_end_proc
    = ffi.Pointer<ffi.NativeFunction<ma_sound_end_procFunction>>;

/// General Library Documentation Undocument By General Corporation & Global Corporation & General Developer
typedef ma_sound_end_procFunction = ffi.Void Function(
    ffi.Pointer<ffi.Void> pUserData, ffi.Pointer<ma_sound> pSound);

/// General Library Documentation Undocument By General Corporation & Global Corporation & General Developer
typedef Dartma_sound_end_procFunction = void Function(
    ffi.Pointer<ffi.Void> pUserData, ffi.Pointer<ma_sound> pSound);

/// General Library Documentation Undocument By General Corporation & Global Corporation & General Developer
typedef ma_engine_process_proc
    = ffi.Pointer<ffi.NativeFunction<ma_engine_process_procFunction>>;

/// General Library Documentation Undocument By General Corporation & Global Corporation & General Developer
typedef ma_engine_process_procFunction = ffi.Void Function(
    ffi.Pointer<ffi.Void> pUserData,
    ffi.Pointer<ffi.Float> pFramesOut,
    ma_uint64 frameCount);

/// General Library Documentation Undocument By General Corporation & Global Corporation & General Developer
typedef Dartma_engine_process_procFunction = void Function(
    ffi.Pointer<ffi.Void> pUserData,
    ffi.Pointer<ffi.Float> pFramesOut,
    Dartma_uint64 frameCount);

/// General Library Documentation Undocument By General Corporation & Global Corporation & General Developer
abstract class ma_sound_flags {
  /// General Library Documentation Undocument By General Corporation & Global Corporation & General Developer
  static const int MA_SOUND_FLAG_STREAM = 1;

  /// General Library Documentation Undocument By General Corporation & Global Corporation & General Developer
  static const int MA_SOUND_FLAG_DECODE = 2;

  /// General Library Documentation Undocument By General Corporation & Global Corporation & General Developer
  static const int MA_SOUND_FLAG_ASYNC = 4;

  /// General Library Documentation Undocument By General Corporation & Global Corporation & General Developer
  static const int MA_SOUND_FLAG_WAIT_INIT = 8;

  /// General Library Documentation Undocument By General Corporation & Global Corporation & General Developer
  static const int MA_SOUND_FLAG_UNKNOWN_LENGTH = 16;

  /// General Library Documentation Undocument By General Corporation & Global Corporation & General Developer
  static const int MA_SOUND_FLAG_NO_DEFAULT_ATTACHMENT = 4096;

  /// General Library Documentation Undocument By General Corporation & Global Corporation & General Developer
  static const int MA_SOUND_FLAG_NO_PITCH = 8192;

  /// General Library Documentation Undocument By General Corporation & Global Corporation & General Developer
  static const int MA_SOUND_FLAG_NO_SPATIALIZATION = 16384;
}

/// General Library Documentation Undocument By General Corporation & Global Corporation & General Developer
abstract class ma_engine_node_type {
  /// General Library Documentation Undocument By General Corporation & Global Corporation & General Developer
  static const int ma_engine_node_type_sound = 0;

  /// General Library Documentation Undocument By General Corporation & Global Corporation & General Developer
  static const int ma_engine_node_type_group = 1;
}

/// General Library Documentation Undocument By General Corporation & Global Corporation & General Developer
final class ma_engine_node_config extends ffi.Struct {
  /// General Library Documentation Undocument By General Corporation & Global Corporation & General Developer
  external ffi.Pointer<ma_engine> pEngine;

  @ffi.Int32()

  /// General Library Documentation Undocument By General Corporation & Global Corporation & General Developer
  external int type;

  @ma_uint32()

  /// General Library Documentation Undocument By General Corporation & Global Corporation & General Developer
  external int channelsIn;

  @ma_uint32()

  /// General Library Documentation Undocument By General Corporation & Global Corporation & General Developer
  external int channelsOut;

  @ma_uint32()

  /// General Library Documentation Undocument By General Corporation & Global Corporation & General Developer
  external int sampleRate;

  @ma_uint32()

  /// General Library Documentation Undocument By General Corporation & Global Corporation & General Developer
  external int volumeSmoothTimeInPCMFrames;

  @ffi.Int32()

  /// General Library Documentation Undocument By General Corporation & Global Corporation & General Developer
  external int monoExpansionMode;

  @ma_bool8()

  /// General Library Documentation Undocument By General Corporation & Global Corporation & General Developer
  external int isPitchDisabled;

  @ma_bool8()

  /// General Library Documentation Undocument By General Corporation & Global Corporation & General Developer
  external int isSpatializationDisabled;

  @ma_uint8()

  /// General Library Documentation Undocument By General Corporation & Global Corporation & General Developer
  external int pinnedListenerIndex;
}

/// General Library Documentation Undocument By General Corporation & Global Corporation & General Developer
final class ma_sound_config extends ffi.Struct {
  /// General Library Documentation Undocument By General Corporation & Global Corporation & General Developer
  external ffi.Pointer<ffi.Char> pFilePath;

  /// General Library Documentation Undocument By General Corporation & Global Corporation & General Developer
  external ffi.Pointer<ffi.WChar> pFilePathW;

  /// General Library Documentation Undocument By General Corporation & Global Corporation & General Developer
  external ffi.Pointer<ma_data_source> pDataSource;

  /// General Library Documentation Undocument By General Corporation & Global Corporation & General Developer
  external ffi.Pointer<ma_node> pInitialAttachment;

  @ma_uint32()

  /// General Library Documentation Undocument By General Corporation & Global Corporation & General Developer
  external int initialAttachmentInputBusIndex;

  @ma_uint32()

  /// General Library Documentation Undocument By General Corporation & Global Corporation & General Developer
  external int channelsIn;

  @ma_uint32()

  /// General Library Documentation Undocument By General Corporation & Global Corporation & General Developer
  external int channelsOut;

  @ffi.Int32()

  /// General Library Documentation Undocument By General Corporation & Global Corporation & General Developer
  external int monoExpansionMode;

  @ma_uint32()

  /// General Library Documentation Undocument By General Corporation & Global Corporation & General Developer
  external int flags;

  @ma_uint32()

  /// General Library Documentation Undocument By General Corporation & Global Corporation & General Developer
  external int volumeSmoothTimeInPCMFrames;

  @ma_uint64()

  /// General Library Documentation Undocument By General Corporation & Global Corporation & General Developer
  external int initialSeekPointInPCMFrames;

  @ma_uint64()

  /// General Library Documentation Undocument By General Corporation & Global Corporation & General Developer
  external int rangeBegInPCMFrames;

  @ma_uint64()

  /// General Library Documentation Undocument By General Corporation & Global Corporation & General Developer
  external int rangeEndInPCMFrames;

  @ma_uint64()

  /// General Library Documentation Undocument By General Corporation & Global Corporation & General Developer
  external int loopPointBegInPCMFrames;

  @ma_uint64()

  /// General Library Documentation Undocument By General Corporation & Global Corporation & General Developer
  external int loopPointEndInPCMFrames;

  @ma_bool32()

  /// General Library Documentation Undocument By General Corporation & Global Corporation & General Developer
  external int isLooping;

  /// General Library Documentation Undocument By General Corporation & Global Corporation & General Developer
  external ma_sound_end_proc endCallback;

  /// General Library Documentation Undocument By General Corporation & Global Corporation & General Developer
  external ffi.Pointer<ffi.Void> pEndCallbackUserData;

  /// General Library Documentation Undocument By General Corporation & Global Corporation & General Developer
  external ma_resource_manager_pipeline_notifications initNotifications;

  /// General Library Documentation Undocument By General Corporation & Global Corporation & General Developer
  external ffi.Pointer<ma_fence> pDoneFence;
}

/// General Library Documentation Undocument By General Corporation & Global Corporation & General Developer
typedef ma_sound_group_config = ma_sound_config;

/// General Library Documentation Undocument By General Corporation & Global Corporation & General Developer
final class ma_engine_config extends ffi.Struct {
  /// General Library Documentation Undocument By General Corporation & Global Corporation & General Developer
  external ffi.Pointer<ma_resource_manager> pResourceManager;

  /// General Library Documentation Undocument By General Corporation & Global Corporation & General Developer
  external ffi.Pointer<ma_context> pContext;

  /// General Library Documentation Undocument By General Corporation & Global Corporation & General Developer
  external ffi.Pointer<ma_device> pDevice;

  /// General Library Documentation Undocument By General Corporation & Global Corporation & General Developer
  external ffi.Pointer<ma_device_id> pPlaybackDeviceID;

  /// General Library Documentation Undocument By General Corporation & Global Corporation & General Developer
  external ma_device_data_proc dataCallback;

  /// General Library Documentation Undocument By General Corporation & Global Corporation & General Developer
  external ma_device_notification_proc notificationCallback;

  /// General Library Documentation Undocument By General Corporation & Global Corporation & General Developer
  external ffi.Pointer<ma_log> pLog;

  @ma_uint32()

  /// General Library Documentation Undocument By General Corporation & Global Corporation & General Developer
  external int listenerCount;

  @ma_uint32()

  /// General Library Documentation Undocument By General Corporation & Global Corporation & General Developer
  external int channels;

  @ma_uint32()

  /// General Library Documentation Undocument By General Corporation & Global Corporation & General Developer
  external int sampleRate;

  @ma_uint32()

  /// General Library Documentation Undocument By General Corporation & Global Corporation & General Developer
  external int periodSizeInFrames;

  @ma_uint32()

  /// General Library Documentation Undocument By General Corporation & Global Corporation & General Developer
  external int periodSizeInMilliseconds;

  @ma_uint32()

  /// General Library Documentation Undocument By General Corporation & Global Corporation & General Developer
  external int gainSmoothTimeInFrames;

  @ma_uint32()

  /// General Library Documentation Undocument By General Corporation & Global Corporation & General Developer
  external int gainSmoothTimeInMilliseconds;

  @ma_uint32()

  /// General Library Documentation Undocument By General Corporation & Global Corporation & General Developer
  external int defaultVolumeSmoothTimeInPCMFrames;

  /// General Library Documentation Undocument By General Corporation & Global Corporation & General Developer
  external ma_allocation_callbacks allocationCallbacks;

  @ma_bool32()

  /// General Library Documentation Undocument By General Corporation & Global Corporation & General Developer
  external int noAutoStart;

  @ma_bool32()

  /// General Library Documentation Undocument By General Corporation & Global Corporation & General Developer
  external int noDevice;

  @ffi.Int32()

  /// General Library Documentation Undocument By General Corporation & Global Corporation & General Developer
  external int monoExpansionMode;

  /// General Library Documentation Undocument By General Corporation & Global Corporation & General Developer
  external ffi.Pointer<ma_vfs> pResourceManagerVFS;

  /// General Library Documentation Undocument By General Corporation & Global Corporation & General Developer
  external ma_engine_process_proc onProcess;

  /// General Library Documentation Undocument By General Corporation & Global Corporation & General Developer
  external ffi.Pointer<ffi.Void> pProcessUserData;
}

/// General Library Documentation Undocument By General Corporation & Global Corporation & General Developer
typedef ma_sound_group = ma_sound;
